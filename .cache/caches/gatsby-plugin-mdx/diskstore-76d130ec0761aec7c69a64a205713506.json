{"expireTime":9007200851906807000,"key":"gatsby-plugin-mdx-entire-payload-6ced54e93c398dd7b4bdb9c6353e2a9a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import AccentBox from '../src/components/site/blog/accent-box.js';","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":67,"offset":66},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We have setup our project but it doesn't do much right now. Lets add a backend to store our products!","position":{"start":{"line":3,"column":1,"offset":70},"end":{"line":3,"column":102,"offset":171},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":70},"end":{"line":3,"column":102,"offset":171},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is part 2 in a series of tutorials. The format is step by step.","position":{"start":{"line":5,"column":1,"offset":175},"end":{"line":5,"column":69,"offset":243},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":175},"end":{"line":5,"column":69,"offset":243},"indent":[]}},{"type":"jsx","value":"<AccentBox>\nSo lets recap what we have done so far:","position":{"start":{"line":7,"column":1,"offset":247},"end":{"line":8,"column":40,"offset":299},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Setup a project","position":{"start":{"line":10,"column":3,"offset":305},"end":{"line":10,"column":18,"offset":320},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":305},"end":{"line":10,"column":18,"offset":320},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":303},"end":{"line":10,"column":18,"offset":320},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added our demo and theme projects","position":{"start":{"line":11,"column":3,"offset":324},"end":{"line":11,"column":36,"offset":357},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":324},"end":{"line":11,"column":36,"offset":357},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":322},"end":{"line":11,"column":36,"offset":357},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Linked our demo to our theme","position":{"start":{"line":12,"column":3,"offset":361},"end":{"line":12,"column":31,"offset":389},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":361},"end":{"line":12,"column":31,"offset":389},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":359},"end":{"line":12,"column":31,"offset":389},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Created a repository and committed our work","position":{"start":{"line":13,"column":3,"offset":393},"end":{"line":13,"column":46,"offset":436},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":393},"end":{"line":13,"column":46,"offset":436},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":391},"end":{"line":13,"column":46,"offset":436},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added a site layout","position":{"start":{"line":14,"column":3,"offset":440},"end":{"line":14,"column":22,"offset":459},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":440},"end":{"line":14,"column":22,"offset":459},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":438},"end":{"line":14,"column":22,"offset":459},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added our theme styles","position":{"start":{"line":15,"column":3,"offset":463},"end":{"line":15,"column":25,"offset":485},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":463},"end":{"line":15,"column":25,"offset":485},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":461},"end":{"line":15,"column":25,"offset":485},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":303},"end":{"line":15,"column":25,"offset":485},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"</AccentBox>","position":{"start":{"line":17,"column":1,"offset":489},"end":{"line":17,"column":13,"offset":501},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Backend support","position":{"start":{"line":19,"column":5,"offset":509},"end":{"line":19,"column":20,"offset":524},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":505},"end":{"line":19,"column":20,"offset":524},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Having a website that looks sweet is all well and good but we are going to need somewhere to store and our products data. We could do it from the filesystem but thats not very user friendly. What if we could not only store our products data somewhere, but we could also give the user of our theme a nice UI from which to enter their data..... Enter ","position":{"start":{"line":21,"column":1,"offset":528},"end":{"line":21,"column":350,"offset":877},"indent":[]}},{"type":"link","title":null,"url":"https://www.sanity.io/","children":[{"type":"text","value":"Sanity.io","position":{"start":{"line":21,"column":351,"offset":878},"end":{"line":21,"column":360,"offset":887},"indent":[]}}],"position":{"start":{"line":21,"column":350,"offset":877},"end":{"line":21,"column":385,"offset":912},"indent":[]}},{"type":"text","value":" 💃","position":{"start":{"line":21,"column":385,"offset":912},"end":{"line":21,"column":388,"offset":915},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":528},"end":{"line":21,"column":388,"offset":915},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sanity will allow us easily (and i really mean easily 😉) set up our backend with a React based dashboard. The schema is super easy to get the hang of. Lets get started!","position":{"start":{"line":23,"column":1,"offset":919},"end":{"line":23,"column":170,"offset":1088},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":919},"end":{"line":23,"column":170,"offset":1088},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At our project root create a new folder called studio. Navigate into that folder and install the sanity CLI then initialize the sanity project.","position":{"start":{"line":25,"column":1,"offset":1092},"end":{"line":25,"column":144,"offset":1235},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1092},"end":{"line":25,"column":144,"offset":1235},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn global add @sanity/cli\nsanity init","position":{"start":{"line":27,"column":1,"offset":1239},"end":{"line":30,"column":4,"offset":1293},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will globally install the CLI and create a new project for us. You can follow the step provided by the CLI, choose the ecommerce template and for the rest you can accept the defaults.","position":{"start":{"line":31,"column":1,"offset":1295},"end":{"line":31,"column":189,"offset":1483},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1295},"end":{"line":31,"column":189,"offset":1483},"indent":[]}},{"type":"jsx","value":"<AccentBox>\nI have noticed some lag when running sanity init via the in built vscode terminal, it can hang. If it does i recommend quitting and running the command from another terminal. I use Cmder.\n</AccentBox>","position":{"start":{"line":33,"column":1,"offset":1487},"end":{"line":35,"column":13,"offset":1701},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Once installed open the studio folder and you will see some schema definition files. Open the product.js file. It should look like this: ","position":{"start":{"line":37,"column":1,"offset":1705},"end":{"line":37,"column":138,"offset":1842},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1705},"end":{"line":37,"column":138,"offset":1842},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Product Schema","position":{"start":{"line":39,"column":5,"offset":1850},"end":{"line":39,"column":19,"offset":1864},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1846},"end":{"line":39,"column":19,"offset":1864},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export default {\n  name: 'product',\n  title: 'Product',\n  type: 'document',\n  fields: [\n    {\n      name: 'title',\n      title: 'Title',\n      type: 'string'\n    },\n    {\n      name: 'slug',\n      title: 'Slug',\n      type: 'slug',\n      options: {\n        source: 'title',\n        maxLength: 96\n      }\n    },\n    {\n      title: 'Default variant',\n      name: 'defaultProductVariant',\n      type: 'productVariant'\n    },\n    {\n      title: 'Variants',\n      name: 'variants',\n      type: 'array',\n      of: [\n        {\n          title: 'Variant',\n          type: 'productVariant'\n        }\n      ]\n    },\n    {\n      title: 'Tags',\n      name: 'tags',\n      type: 'array',\n      of: [\n        {\n          type: 'string'\n        }\n      ],\n      options: {\n        layout: 'tags'\n      }\n    },\n    {\n      name: 'vendor',\n      title: 'Vendor',\n      type: 'reference',\n      to: {type: 'vendor'}\n    },\n    {\n      name: 'blurb',\n      title: 'Blurb',\n      type: 'localeString'\n    },\n    {\n      name: 'body',\n      title: 'Body',\n      type: 'localeBlockContent'\n    }\n  ],\n\n  preview: {\n    select: {\n      title: 'title',\n      manufactor: 'manufactor.title',\n      media: 'defaultProductVariant.images[0]'\n    }\n  }\n}\n","position":{"start":{"line":41,"column":1,"offset":1868},"end":{"line":117,"column":4,"offset":3180},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Each object in the fields array corresponds to an input field in the studio, you can see the type the field expects with the type key. For some they refer to other objects which themselves define their own input fields. For example the Default variant object field. For more information of the inner workings of sanity i highly suggest you go over their docs. They are really exceptional. For now we can leave this file as is.","position":{"start":{"line":119,"column":1,"offset":3184},"end":{"line":119,"column":427,"offset":3610},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3184},"end":{"line":119,"column":427,"offset":3610},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After you have had a little explore of the different schema files and read the docs on the sanity site create a new file in the schemas folder and call it home.js. We will use this to allow the theme user to add a hero image to the home page of our theme. Add the following to the new home.js schema file: ","position":{"start":{"line":121,"column":1,"offset":3614},"end":{"line":121,"column":307,"offset":3920},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3614},"end":{"line":121,"column":307,"offset":3920},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Home Schema","position":{"start":{"line":123,"column":5,"offset":3928},"end":{"line":123,"column":16,"offset":3939},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3924},"end":{"line":123,"column":16,"offset":3939},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export default {\n    title: 'Home Page Image',\n    name: 'home',\n    type: 'document',\n    fields: [\n      {\n        name: 'title',\n        title: 'Title',\n        type: 'string'\n      },\n      {\n        name: 'slug',\n        title: 'Slug',\n        type: 'slug',\n        options: {\n          source: 'title',\n          maxLength: 96\n        }\n      },\n            {\n        name: 'alt',\n        title: 'Alt text',\n        type: 'string'\n      },\n      {\n        name: 'images',\n        title: 'Home Images',\n        type: 'array',\n        of: [\n          {\n            type: 'image',\n            options: {\n              hotspot: true\n            }\n          }\n        ]\n      },\n    ]\n  }\n  ","position":{"start":{"line":125,"column":1,"offset":3943},"end":{"line":166,"column":4,"offset":4686},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The title field will be the name of our website. You can auto generate the slug in the studio. The images array will allow us to add multiple images which we will be able to access via a graphql query on our home page, page. Wait till you check out the image handling in the studio 👯‍♀️","position":{"start":{"line":168,"column":1,"offset":4690},"end":{"line":168,"column":288,"offset":4977},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":4690},"end":{"line":168,"column":288,"offset":4977},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can also create our blog post schema. You'll notice that this time we have added a description to each field object. This will show in the studio as helper text to explain to the user what they should do or what the input expects. Its a small but important feature when thinking about studio handover, in our case, the end user of our theme.","position":{"start":{"line":170,"column":1,"offset":4981},"end":{"line":170,"column":345,"offset":5325},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":4981},"end":{"line":170,"column":345,"offset":5325},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Blog Post Schema","position":{"start":{"line":172,"column":5,"offset":5333},"end":{"line":172,"column":21,"offset":5349},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":5329},"end":{"line":172,"column":21,"offset":5349},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export default {\n  name: 'post',\n  type: 'document',\n  title: 'Blog Post',\n  fields: [\n    {\n      name: 'title',\n      type: 'string',\n      title: 'Title',\n      description: 'Titles should be catchy, descriptive, and not too long'\n    },\n    {\n      name: 'slug',\n      type: 'slug',\n      title: 'Slug',\n      description: 'Some frontends will require a slug to be set to be able to show the post',\n      options: {\n        source: 'title',\n        maxLength: 96\n      }\n    },\n    {\n      name: 'publishedAt',\n      type: 'datetime',\n      title: 'Published at',\n      description: 'This can be used to schedule post for publishing'\n    },\n    {\n      name: 'mainImage',\n      type: 'mainImage',\n      title: 'Main image'\n    },\n    {\n      name: 'excerpt',\n      type: 'excerptPortableText',\n      title: 'Excerpt',\n      description:\n        'This ends up on summary pages, on Google, when people share your post in social media.'\n    },\n    {\n      name: 'authors',\n      title: 'Authors',\n      type: 'array',\n      of: [\n        {\n          type: 'authorReference'\n        }\n      ]\n    },\n    {\n      name: 'categories',\n      type: 'array',\n      title: 'Categories',\n      of: [\n        {\n          type: 'reference',\n          to: {\n            type: 'category'\n          }\n        }\n      ]\n    },\n    {\n      name: 'body',\n      type: 'bodyPortableText',\n      title: 'Body'\n    }\n  ],\n  orderings: [\n    {\n      name: 'publishingDateAsc',\n      title: 'Publishing date new–>old',\n      by: [\n        {\n          field: 'publishedAt',\n          direction: 'asc'\n        },\n        {\n          field: 'title',\n          direction: 'asc'\n        }\n      ]\n    },\n    {\n      name: 'publishingDateDesc',\n      title: 'Publishing date old->new',\n      by: [\n        {\n          field: 'publishedAt',\n          direction: 'desc'\n        },\n        {\n          field: 'title',\n          direction: 'asc'\n        }\n      ]\n    }\n  ]\n}","position":{"start":{"line":174,"column":1,"offset":5353},"end":{"line":274,"column":4,"offset":7406},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next open the schema.js file located in the same folder and inside the createSchema builder we can add our home and blog schemas, make sure you import it if vscode doesn't automatically do this for you. By default the function is well commented.","position":{"start":{"line":276,"column":1,"offset":7410},"end":{"line":276,"column":246,"offset":7655},"indent":[]}}],"position":{"start":{"line":276,"column":1,"offset":7410},"end":{"line":276,"column":246,"offset":7655},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have created our new home page and blog schemas and exported them in the builder function we can deploy and start our studio! ","position":{"start":{"line":278,"column":1,"offset":7659},"end":{"line":278,"column":139,"offset":7797},"indent":[]}}],"position":{"start":{"line":278,"column":1,"offset":7659},"end":{"line":278,"column":139,"offset":7797},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"sanity graphql deploy\nsanity deploy","position":{"start":{"line":280,"column":1,"offset":7801},"end":{"line":283,"column":4,"offset":7851},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When deploying we can host our studio anywhere we like but sanity can also handle this for us. If we make a change to our schema we have to remember to run sanity graphql deploy for the changes to take affect. You should now be able to view the studio at gatsby-theme-fashion.sanity.studio. On the left of the studio you will see all of our content, the stuff created from the schema definitions. Click on the product and then click to create a new product. Now you should be able to see how each of the field type are represented in the studio. The default variant box is where we will be getting most of our data from. Feel free add some products, filling in the necessary information. As we chose the ecommerce template there will already be some products you can use for reference. I would suggest looking over them and adding your own. Once done remove the default template products.","position":{"start":{"line":285,"column":1,"offset":7855},"end":{"line":285,"column":889,"offset":8743},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":7855},"end":{"line":285,"column":889,"offset":8743},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Open the home content tab on the left and add an image to be displayed on the home page of our theme. Make sure you remember to hit publish every time you add or change something in the studio otherwise nothing will happen 😆. If you open the blog content tab and scroll down you will see what looks like a wysiwyg editor. This is sanities rich text editor. In order to properly display its contents in our theme we will need to install another package.","position":{"start":{"line":287,"column":1,"offset":8747},"end":{"line":287,"column":454,"offset":9200},"indent":[]}}],"position":{"start":{"line":287,"column":1,"offset":8747},"end":{"line":287,"column":454,"offset":9200},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn add @sanity/block-content-to-react","position":{"start":{"line":289,"column":1,"offset":9204},"end":{"line":291,"column":4,"offset":9257},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will render an array of block text from the rich text editor in our studio. Each paragraph will be an index in the array. Now in order to use this component and display our rich text properly we will have to create some serializers. This concept was hard for me to understand at first and i did do some hacky stuff to get it working. The actual way of doing it, once you get it right is very simple. There is a handy blog post about it by Eric Howey - ","position":{"start":{"line":293,"column":1,"offset":9261},"end":{"line":293,"column":458,"offset":9718},"indent":[]}},{"type":"link","title":null,"url":"https://www.erichowey.dev/writing/using-theme-ui-with-sanity/","children":[{"type":"text","value":"using-theme-ui-with-sanity","position":{"start":{"line":293,"column":459,"offset":9719},"end":{"line":293,"column":485,"offset":9745},"indent":[]}}],"position":{"start":{"line":293,"column":458,"offset":9718},"end":{"line":293,"column":549,"offset":9809},"indent":[]}},{"type":"text","value":"\nthat gives an example of using the serializers with theme-ui, we'll be using the sx prop directly instead of importing the theme-ui Styled component but it will work much the same way. Lets create a folder under components and name it common. Inside create a file called index.js and add the following:","position":{"start":{"line":293,"column":549,"offset":9809},"end":{"line":294,"column":303,"offset":10113},"indent":[1]}}],"position":{"start":{"line":293,"column":1,"offset":9261},"end":{"line":294,"column":303,"offset":10113},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Serializers","position":{"start":{"line":296,"column":6,"offset":10122},"end":{"line":296,"column":17,"offset":10133},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":10117},"end":{"line":296,"column":17,"offset":10133},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nexport const serializers = {\n types: {\n   block(props) {\n     switch (props.node.style) {\n       case \"h1\":\n         return <h1 sx={{\n           fontFamily: 'heading',\n           fontWeight: 'bold'\n         }}>{props.children}</h1>;\n       case \"h2\":\n         return <h2 sx={{\n           fontFamily: 'heading'\n         }}>{props.children}</h2>;\n       default:\n         return <p sx={{\n           fontFamily: 'body'\n         }}>{props.children}</p>;\n     }\n   }\n }\n};","position":{"start":{"line":298,"column":1,"offset":10137},"end":{"line":323,"column":5,"offset":10710},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We are styling the html elements that are specified in the rich text editor in our studio with the theme-ui sx prop, getting the values from our theme file. Pretty nifty. For a more in depth look into how it works check out the sanity.io ","position":{"start":{"line":325,"column":1,"offset":10714},"end":{"line":325,"column":239,"offset":10952},"indent":[]}},{"type":"link","title":null,"url":"https://www.sanity.io/docs/block-content","children":[{"type":"text","value":"docs","position":{"start":{"line":325,"column":240,"offset":10953},"end":{"line":325,"column":244,"offset":10957},"indent":[]}}],"position":{"start":{"line":325,"column":239,"offset":10952},"end":{"line":325,"column":287,"offset":11000},"indent":[]}},{"type":"text","value":". Of course you can add all the html elements your heart desires so long as they are already defined in the schema for block content. In fact, lets take a peek at that file so that you know what i mean:","position":{"start":{"line":325,"column":287,"offset":11000},"end":{"line":325,"column":489,"offset":11202},"indent":[]}}],"position":{"start":{"line":325,"column":1,"offset":10714},"end":{"line":325,"column":489,"offset":11202},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Block Content","position":{"start":{"line":327,"column":5,"offset":11210},"end":{"line":327,"column":18,"offset":11223},"indent":[]}}],"position":{"start":{"line":327,"column":1,"offset":11206},"end":{"line":327,"column":18,"offset":11223},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/**\n * This is the schema definition for the rich text fields used for\n * for this blog studio. When you import it in schemas.js it can be\n * reused in other parts of the studio with:\n *  {\n *    name: 'someName',\n *    title: 'Some title',\n *    type: 'blockContent'\n *  }\n */\nexport default {\n  title: 'Block Content',\n  name: 'blockContent',\n  type: 'array',\n  of: [\n    {\n      title: 'Block',\n      type: 'block',\n      // Styles let you set what your user can mark up blocks with. These\n      // corresponds with HTML tags, but you can set any title or value\n      // you want and decide how you want to deal with it where you want to\n      // use your content.\n      styles: [\n        {title: 'Normal', value: 'normal'},\n        {title: 'H1', value: 'h1'},\n        {title: 'H2', value: 'h2'},\n        {title: 'H3', value: 'h3'},\n        {title: 'H4', value: 'h4'},\n        {title: 'Quote', value: 'blockquote'}\n      ],\n      lists: [{title: 'Bullet', value: 'bullet'}],\n      // Marks let you mark up inline text in the block editor.\n      marks: {\n        // Decorators usually describe a single property – e.g. a typographic\n        // preference or highlighting by editors.\n        decorators: [{title: 'Strong', value: 'strong'}, {title: 'Emphasis', value: 'em'}],\n        // Annotations can be any object structure – e.g. a link or a footnote.\n        annotations: [\n          {\n            title: 'URL',\n            name: 'link',\n            type: 'object',\n            fields: [\n              {\n                title: 'URL',\n                name: 'href',\n                type: 'url'\n              }\n            ]\n          }\n        ]\n      }\n    },\n    // You can add additional types here. Note that you can't use\n    // primitive types such as 'string' and 'number' in the same array\n    // as a block type.\n    {\n      type: 'image',\n      options: {hotspot: true}\n    }\n  ]\n}\n","position":{"start":{"line":329,"column":1,"offset":11227},"end":{"line":393,"column":4,"offset":13197},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is taken directly from the template project output. You should have the same in your sanity project under the schemas folder. As you can see the blocks array defines the markup we want to use in our rich text editor, these are the defaults, you can add or remove as many as you wish. Again, see the docs for more info 😊","position":{"start":{"line":395,"column":1,"offset":13201},"end":{"line":395,"column":326,"offset":13526},"indent":[]}}],"position":{"start":{"line":395,"column":1,"offset":13201},"end":{"line":395,"column":326,"offset":13526},"indent":[]}},{"type":"jsx","value":"<AccentBox>\nSo lets recap what we have done so far:","position":{"start":{"line":397,"column":1,"offset":13530},"end":{"line":398,"column":40,"offset":13582},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added sanity to our project","position":{"start":{"line":400,"column":3,"offset":13588},"end":{"line":400,"column":30,"offset":13615},"indent":[]}}],"position":{"start":{"line":400,"column":3,"offset":13588},"end":{"line":400,"column":30,"offset":13615},"indent":[]}}],"position":{"start":{"line":400,"column":1,"offset":13586},"end":{"line":400,"column":30,"offset":13615},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Looked at the schemas","position":{"start":{"line":401,"column":3,"offset":13619},"end":{"line":401,"column":24,"offset":13640},"indent":[]}}],"position":{"start":{"line":401,"column":3,"offset":13619},"end":{"line":401,"column":24,"offset":13640},"indent":[]}}],"position":{"start":{"line":401,"column":1,"offset":13617},"end":{"line":401,"column":24,"offset":13640},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added our own home and blog post schemas","position":{"start":{"line":402,"column":3,"offset":13644},"end":{"line":402,"column":43,"offset":13684},"indent":[]}}],"position":{"start":{"line":402,"column":3,"offset":13644},"end":{"line":402,"column":43,"offset":13684},"indent":[]}}],"position":{"start":{"line":402,"column":1,"offset":13642},"end":{"line":402,"column":43,"offset":13684},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Deployed our studio and added some products and a home page image","position":{"start":{"line":403,"column":3,"offset":13688},"end":{"line":403,"column":68,"offset":13753},"indent":[]}}],"position":{"start":{"line":403,"column":3,"offset":13688},"end":{"line":403,"column":68,"offset":13753},"indent":[]}}],"position":{"start":{"line":403,"column":1,"offset":13686},"end":{"line":403,"column":68,"offset":13753},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Looked at serializers and added our own to handle the rich text input for our blog posts","position":{"start":{"line":404,"column":3,"offset":13757},"end":{"line":404,"column":91,"offset":13845},"indent":[]}}],"position":{"start":{"line":404,"column":3,"offset":13757},"end":{"line":404,"column":91,"offset":13845},"indent":[]}}],"position":{"start":{"line":404,"column":1,"offset":13755},"end":{"line":404,"column":91,"offset":13845},"indent":[]}}],"position":{"start":{"line":400,"column":1,"offset":13586},"end":{"line":404,"column":91,"offset":13845},"indent":[1,1,1,1]}},{"type":"jsx","value":"</AccentBox>","position":{"start":{"line":406,"column":1,"offset":13849},"end":{"line":406,"column":13,"offset":13861},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We're making great headway! Now that we have our sanity backend up and running we need to hook it up to our theme. Head over to the theme projects root and install the gatsby-source-sanity plugin.","position":{"start":{"line":408,"column":1,"offset":13865},"end":{"line":408,"column":197,"offset":14061},"indent":[]}}],"position":{"start":{"line":408,"column":1,"offset":13865},"end":{"line":408,"column":197,"offset":14061},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn add gatsby-source-sanity","position":{"start":{"line":410,"column":1,"offset":14065},"end":{"line":412,"column":4,"offset":14108},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now create two .env files at the demo sites root. .env.development and .env.production. In these files add the following: ","position":{"start":{"line":414,"column":1,"offset":14112},"end":{"line":414,"column":123,"offset":14234},"indent":[]}}],"position":{"start":{"line":414,"column":1,"offset":14112},"end":{"line":414,"column":123,"offset":14234},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Env Files","position":{"start":{"line":416,"column":5,"offset":14242},"end":{"line":416,"column":14,"offset":14251},"indent":[]}}],"position":{"start":{"line":416,"column":1,"offset":14238},"end":{"line":416,"column":14,"offset":14251},"indent":[]}},{"type":"code","lang":"text","meta":null,"value":"SANITY_PROJECT_ID=<your-sanity-project-id>\nSANITY_PROJECT_DATASET=<your-sanity-dataset>","position":{"start":{"line":418,"column":1,"offset":14255},"end":{"line":421,"column":4,"offset":14357},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you go to ","position":{"start":{"line":423,"column":1,"offset":14361},"end":{"line":423,"column":14,"offset":14374},"indent":[]}},{"type":"link","title":null,"url":"https://manage.sanity.io/","children":[{"type":"text","value":"https://manage.sanity.io/","position":{"start":{"line":423,"column":15,"offset":14375},"end":{"line":423,"column":40,"offset":14400},"indent":[]}}],"position":{"start":{"line":423,"column":14,"offset":14374},"end":{"line":423,"column":68,"offset":14428},"indent":[]}},{"type":"text","value":" and click on your project, gatsby-theme-fashion, or whatever you chose to name it you will find your project id below the project name. You can find the dataset name if you have forgotten what you called it (it will be production if you went with the defaults) under the datasets tab directly under the project id and studio link.","position":{"start":{"line":423,"column":68,"offset":14428},"end":{"line":423,"column":399,"offset":14759},"indent":[]}}],"position":{"start":{"line":423,"column":1,"offset":14361},"end":{"line":423,"column":399,"offset":14759},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets tell our theme to expect these variables form the consumer. Open the themes gatsby-config.js file and add the following: ","position":{"start":{"line":425,"column":1,"offset":14763},"end":{"line":425,"column":127,"offset":14889},"indent":[]}}],"position":{"start":{"line":425,"column":1,"offset":14763},"end":{"line":425,"column":127,"offset":14889},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Theme - gatsby-config.js","position":{"start":{"line":427,"column":5,"offset":14897},"end":{"line":427,"column":29,"offset":14921},"indent":[]}}],"position":{"start":{"line":427,"column":1,"offset":14893},"end":{"line":427,"column":29,"offset":14921},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"module.exports = (options) => {\n  const {SANITY_PROJECT_ID, SANITY_PROJECT_DATASET} = options;\n\n  return {\n    plugins: [\n        {\n            resolve: 'gatsby-plugin-google-fonts',\n            options: {\n              fonts: [\n                'Muli',\n                'Open Sans',\n                'source sans pro\\:300,400,400i,700' \n              ]\n            }\n        },\n              {\n        resolve: 'gatsby-source-sanity',\n        options: {\n          projectId: SANITY_PROJECT_ID,\n          dataset: SANITY_PROJECT_DATASET,\n          watchMode: false\n        }\n      },\n          'gatsby-plugin-theme-ui'\n    ]\n  }\n}","position":{"start":{"line":429,"column":1,"offset":14925},"end":{"line":457,"column":4,"offset":15590},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we want to navigate to our gatsby-config.js file in our demo sites folder and add the following: ","position":{"start":{"line":459,"column":1,"offset":15594},"end":{"line":459,"column":102,"offset":15695},"indent":[]}}],"position":{"start":{"line":459,"column":1,"offset":15594},"end":{"line":459,"column":102,"offset":15695},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Demo- gatsby-config.js","position":{"start":{"line":461,"column":5,"offset":15703},"end":{"line":461,"column":27,"offset":15725},"indent":[]}}],"position":{"start":{"line":461,"column":1,"offset":15699},"end":{"line":461,"column":27,"offset":15725},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"let activeEnv =\n  process.env.GATSBY_ACTIVE_ENV || process.env.NODE_ENV || \"development\" || \"production\"\n\nrequire(\"dotenv\").config({\n  path: `.env.${activeEnv}`,\n})\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: 'gatsby-theme-fashion',\n      options: {\n        SANITY_PROJECT_ID: process.env.SANITY_PROJECT_ID,\n        SANITY_PROJECT_DATASET: process.env.SANITY_PROJECT_DATASET\n      }\n    }\n  ]\n};","position":{"start":{"line":463,"column":1,"offset":15729},"end":{"line":482,"column":4,"offset":16163},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are checking what environment we are in and getting the env variables dependant on that. We will just add the same data to both the development and production env files but you can create different ones dependant on your needs. Its important to always keep your API keys and other sensitive information hidden so the go to thing to do is use env variables.","position":{"start":{"line":484,"column":1,"offset":16167},"end":{"line":484,"column":365,"offset":16531},"indent":[]}}],"position":{"start":{"line":484,"column":1,"offset":16167},"end":{"line":484,"column":365,"offset":16531},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have configured our theme to use our sanity backend we can start creating some components to fetch the data and display it. We'll start with the home page. As of now all we have to display is our hero image we added to our home content in the studio. Create a folder under components and call it home. Inside create a new file and call it hero.js.","position":{"start":{"line":486,"column":1,"offset":16535},"end":{"line":486,"column":360,"offset":16894},"indent":[]}}],"position":{"start":{"line":486,"column":1,"offset":16535},"end":{"line":486,"column":360,"offset":16894},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Hero Image","position":{"start":{"line":488,"column":5,"offset":16902},"end":{"line":488,"column":15,"offset":16912},"indent":[]}}],"position":{"start":{"line":488,"column":1,"offset":16898},"end":{"line":488,"column":15,"offset":16912},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport GatsbyImage from \"gatsby-image\";\n\nconst Hero = () => {\n  const home = useStaticQuery(query);\n  const { images, title, alt } = home.sanityHome;\n\n  return (\n    <section sx={{\n      margin: '2em'\n    }}>\n      <GatsbyImage sx={{\n        width: 'auto',\n        height: 'auto',\n        maxWidth: '80%',\n        maxHeight: '90%',\n        margin: '0 auto'\n      }} fluid={images[0].asset.fluid} alt={alt} />\n    </section>\n  );\n};\n\nexport default Hero;\n\nexport const query = graphql`\n  query HeroQuery {\n    sanityHome {\n      title\n      alt\n      images {\n        asset {\n          fluid(maxHeight: 865) {\n            ...GatsbySanityImageFluid\n          }\n        }\n      }\n    }\n  }\n`;","position":{"start":{"line":490,"column":1,"offset":16916},"end":{"line":532,"column":4,"offset":17756},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lets break it down. ","position":{"start":{"line":533,"column":1,"offset":17758},"end":{"line":533,"column":21,"offset":17778},"indent":[]}}],"position":{"start":{"line":533,"column":1,"offset":17758},"end":{"line":533,"column":21,"offset":17778},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We have created a new component that fetches the hero image via a graphql query. ","position":{"start":{"line":534,"column":3,"offset":17782},"end":{"line":534,"column":84,"offset":17863},"indent":[]}}],"position":{"start":{"line":534,"column":3,"offset":17782},"end":{"line":534,"column":84,"offset":17863},"indent":[]}}],"position":{"start":{"line":534,"column":1,"offset":17780},"end":{"line":534,"column":84,"offset":17863},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We access that query using gatsbys nifty hook useStaticQuery. ","position":{"start":{"line":535,"column":3,"offset":17867},"end":{"line":535,"column":65,"offset":17929},"indent":[]}}],"position":{"start":{"line":535,"column":3,"offset":17867},"end":{"line":535,"column":65,"offset":17929},"indent":[]}}],"position":{"start":{"line":535,"column":1,"offset":17865},"end":{"line":535,"column":65,"offset":17929},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We have destructured the resulting content and passed it to a gatsby image component. ","position":{"start":{"line":536,"column":3,"offset":17933},"end":{"line":536,"column":89,"offset":18019},"indent":[]}}],"position":{"start":{"line":536,"column":3,"offset":17933},"end":{"line":536,"column":89,"offset":18019},"indent":[]}}],"position":{"start":{"line":536,"column":1,"offset":17931},"end":{"line":536,"column":89,"offset":18019},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We have added some styling using the sx prop. ","position":{"start":{"line":537,"column":3,"offset":18023},"end":{"line":537,"column":49,"offset":18069},"indent":[]}}],"position":{"start":{"line":537,"column":3,"offset":18023},"end":{"line":537,"column":49,"offset":18069},"indent":[]}}],"position":{"start":{"line":537,"column":1,"offset":18021},"end":{"line":537,"column":49,"offset":18069},"indent":[]}}],"position":{"start":{"line":534,"column":1,"offset":17780},"end":{"line":537,"column":49,"offset":18069},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This component is now ready to be imported into our index.js file that is waiting for us all lonley in the pages folder of our theme. Right now it looks like this:","position":{"start":{"line":539,"column":1,"offset":18073},"end":{"line":539,"column":164,"offset":18236},"indent":[]}}],"position":{"start":{"line":539,"column":1,"offset":18073},"end":{"line":539,"column":164,"offset":18236},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Home Page","position":{"start":{"line":541,"column":5,"offset":18244},"end":{"line":541,"column":14,"offset":18253},"indent":[]}}],"position":{"start":{"line":541,"column":1,"offset":18240},"end":{"line":541,"column":14,"offset":18253},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"import React from 'react'\n\nexport default () => <h1>Hello im coming at you from the theme!!<h1>","position":{"start":{"line":543,"column":1,"offset":18257},"end":{"line":547,"column":4,"offset":18367},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lets remove all that and add our hero image!","position":{"start":{"line":549,"column":1,"offset":18371},"end":{"line":549,"column":45,"offset":18415},"indent":[]}}],"position":{"start":{"line":549,"column":1,"offset":18371},"end":{"line":549,"column":45,"offset":18415},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Home Page","position":{"start":{"line":551,"column":5,"offset":18423},"end":{"line":551,"column":14,"offset":18432},"indent":[]}}],"position":{"start":{"line":551,"column":1,"offset":18419},"end":{"line":551,"column":14,"offset":18432},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <Hero/>\n    </Main>\n  )\n}","position":{"start":{"line":553,"column":1,"offset":18436},"end":{"line":567,"column":4,"offset":18679},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"By importing the Main component and using it as the parent to all others in this component we have told gatsby that anything inside this component will live in the grid area main. This will be the pattern moving forward for all of our pages.","position":{"start":{"line":569,"column":1,"offset":18683},"end":{"line":569,"column":242,"offset":18924},"indent":[]}}],"position":{"start":{"line":569,"column":1,"offset":18683},"end":{"line":569,"column":242,"offset":18924},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Go to the demo project and run yarn dev to see your image displayed. Lets take a look at our content plan again and check off what we have done:","position":{"start":{"line":571,"column":1,"offset":18928},"end":{"line":571,"column":145,"offset":19072},"indent":[]}}],"position":{"start":{"line":571,"column":1,"offset":18928},"end":{"line":571,"column":145,"offset":19072},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Navbar","position":{"start":{"line":573,"column":3,"offset":19078},"end":{"line":573,"column":9,"offset":19084},"indent":[]}}],"position":{"start":{"line":573,"column":3,"offset":19078},"end":{"line":573,"column":9,"offset":19084},"indent":[]}}],"position":{"start":{"line":573,"column":1,"offset":19076},"end":{"line":573,"column":9,"offset":19084},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Landing/home page ✅","position":{"start":{"line":574,"column":3,"offset":19088},"end":{"line":574,"column":22,"offset":19107},"indent":[]}}],"position":{"start":{"line":574,"column":3,"offset":19088},"end":{"line":574,"column":22,"offset":19107},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Hero image ✅","position":{"start":{"line":575,"column":5,"offset":19113},"end":{"line":575,"column":17,"offset":19125},"indent":[]}}],"position":{"start":{"line":575,"column":5,"offset":19113},"end":{"line":575,"column":17,"offset":19125},"indent":[]}}],"position":{"start":{"line":575,"column":3,"offset":19111},"end":{"line":575,"column":17,"offset":19125},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Showcase of products","position":{"start":{"line":576,"column":5,"offset":19131},"end":{"line":576,"column":25,"offset":19151},"indent":[]}}],"position":{"start":{"line":576,"column":5,"offset":19131},"end":{"line":576,"column":25,"offset":19151},"indent":[]}}],"position":{"start":{"line":576,"column":3,"offset":19129},"end":{"line":576,"column":25,"offset":19151},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Blog snippets","position":{"start":{"line":577,"column":5,"offset":19157},"end":{"line":577,"column":18,"offset":19170},"indent":[]}}],"position":{"start":{"line":577,"column":5,"offset":19157},"end":{"line":577,"column":18,"offset":19170},"indent":[]}}],"position":{"start":{"line":577,"column":3,"offset":19155},"end":{"line":577,"column":18,"offset":19170},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Instagram feed","position":{"start":{"line":578,"column":5,"offset":19176},"end":{"line":578,"column":19,"offset":19190},"indent":[]}}],"position":{"start":{"line":578,"column":5,"offset":19176},"end":{"line":578,"column":19,"offset":19190},"indent":[]}}],"position":{"start":{"line":578,"column":3,"offset":19174},"end":{"line":578,"column":19,"offset":19190},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Contact section","position":{"start":{"line":579,"column":5,"offset":19196},"end":{"line":579,"column":20,"offset":19211},"indent":[]}}],"position":{"start":{"line":579,"column":5,"offset":19196},"end":{"line":579,"column":20,"offset":19211},"indent":[]}}],"position":{"start":{"line":579,"column":3,"offset":19194},"end":{"line":579,"column":20,"offset":19211},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"About section","position":{"start":{"line":580,"column":5,"offset":19217},"end":{"line":580,"column":18,"offset":19230},"indent":[]}}],"position":{"start":{"line":580,"column":5,"offset":19217},"end":{"line":580,"column":18,"offset":19230},"indent":[]}}],"position":{"start":{"line":580,"column":3,"offset":19215},"end":{"line":580,"column":18,"offset":19230},"indent":[]}}],"position":{"start":{"line":575,"column":3,"offset":19111},"end":{"line":580,"column":18,"offset":19230},"indent":[3,3,3,3,3]}}],"position":{"start":{"line":574,"column":1,"offset":19086},"end":{"line":580,"column":18,"offset":19230},"indent":[1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Products page","position":{"start":{"line":581,"column":3,"offset":19234},"end":{"line":581,"column":16,"offset":19247},"indent":[]}}],"position":{"start":{"line":581,"column":3,"offset":19234},"end":{"line":581,"column":16,"offset":19247},"indent":[]}}],"position":{"start":{"line":581,"column":1,"offset":19232},"end":{"line":581,"column":16,"offset":19247},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Blog page","position":{"start":{"line":582,"column":3,"offset":19251},"end":{"line":582,"column":12,"offset":19260},"indent":[]}}],"position":{"start":{"line":582,"column":3,"offset":19251},"end":{"line":582,"column":12,"offset":19260},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Blog posts page","position":{"start":{"line":583,"column":5,"offset":19266},"end":{"line":583,"column":20,"offset":19281},"indent":[]}}],"position":{"start":{"line":583,"column":5,"offset":19266},"end":{"line":583,"column":20,"offset":19281},"indent":[]}}],"position":{"start":{"line":583,"column":3,"offset":19264},"end":{"line":583,"column":20,"offset":19281},"indent":[]}}],"position":{"start":{"line":583,"column":3,"offset":19264},"end":{"line":583,"column":20,"offset":19281},"indent":[]}}],"position":{"start":{"line":582,"column":1,"offset":19249},"end":{"line":583,"column":20,"offset":19281},"indent":[1]}}],"position":{"start":{"line":573,"column":1,"offset":19076},"end":{"line":583,"column":20,"offset":19281},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We've still got some way to go 😅 The showcase and blog post snippets both require us to do some setup before we can add them to the home page. So lets go ahead and create the about, contact and instagram feed sections!","position":{"start":{"line":585,"column":1,"offset":19285},"end":{"line":585,"column":220,"offset":19504},"indent":[]}}],"position":{"start":{"line":585,"column":1,"offset":19285},"end":{"line":585,"column":220,"offset":19504},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can begin by adding a container div to our home page component (index.js) and styling it with our trusty friend the grid.","position":{"start":{"line":587,"column":1,"offset":19508},"end":{"line":587,"column":125,"offset":19632},"indent":[]}}],"position":{"start":{"line":587,"column":1,"offset":19508},"end":{"line":587,"column":125,"offset":19632},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Home Page","position":{"start":{"line":589,"column":5,"offset":19640},"end":{"line":589,"column":14,"offset":19649},"indent":[]}}],"position":{"start":{"line":589,"column":1,"offset":19636},"end":{"line":589,"column":14,"offset":19649},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <div sx={{\n        display: 'grid',\n        gridTemplateRows: \"auto\",\n      }}>\n        <Hero/>\n        <section>About Section</section>\n        <section>Showcase Section</section>\n        <section>Blog Snippet Section</section>\n        <section>Instagram Feed</section>\n      </div>\n    </Main>\n  )\n}","position":{"start":{"line":591,"column":1,"offset":19653},"end":{"line":614,"column":4,"offset":20181},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Seeing as our home page sections are all going to be the same we can extract that to a new component. Create a new home-section.js file under the components/home folder.","position":{"start":{"line":616,"column":1,"offset":20185},"end":{"line":616,"column":170,"offset":20354},"indent":[]}}],"position":{"start":{"line":616,"column":1,"offset":20185},"end":{"line":616,"column":170,"offset":20354},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Home Section","position":{"start":{"line":618,"column":5,"offset":20362},"end":{"line":618,"column":17,"offset":20374},"indent":[]}}],"position":{"start":{"line":618,"column":1,"offset":20358},"end":{"line":618,"column":17,"offset":20374},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst HomeSection = ({children}) => (\n  <section\n    sx={{\n      height: 'max-content',\n      padding: '1em'\n    }}\n  >\n    {children}\n  </section>\n);\n\nexport default HomeSection;","position":{"start":{"line":620,"column":1,"offset":20378},"end":{"line":636,"column":4,"offset":20633},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can now import and use that component to wrap our placeholder sections in our home page.","position":{"start":{"line":638,"column":1,"offset":20637},"end":{"line":638,"column":92,"offset":20728},"indent":[]}}],"position":{"start":{"line":638,"column":1,"offset":20637},"end":{"line":638,"column":92,"offset":20728},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\nimport HomeSection from \"../components/home/home-section\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <div sx={{\n        display: 'grid',\n        gridTemplateRows: \"auto\",\n      }}>\n        <Hero/>\n        <HomeSection>About Section</HomeSection>\n        <HomeSection>Showcase Section</HomeSection>\n        <HomeSection>Blog Snippet Section</HomeSection>\n        <HomeSection>Instagram Feed</HomeSection>\n      </div>\n    </Main>\n  )\n}","position":{"start":{"line":640,"column":1,"offset":20732},"end":{"line":664,"column":4,"offset":21352},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our about section will simply display some text that we will import via a graphql query form our sanity backend. First we need to create the schema for that. Head into the sanity project and create a new schema file under the schema folder and call it about.js","position":{"start":{"line":666,"column":1,"offset":21356},"end":{"line":666,"column":261,"offset":21616},"indent":[]}}],"position":{"start":{"line":666,"column":1,"offset":21356},"end":{"line":666,"column":261,"offset":21616},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"About Schema","position":{"start":{"line":668,"column":5,"offset":21624},"end":{"line":668,"column":17,"offset":21636},"indent":[]}}],"position":{"start":{"line":668,"column":1,"offset":21620},"end":{"line":668,"column":17,"offset":21636},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export default {\n    name: 'about',\n    title: 'About',\n    type: 'document',\n    fields: [\n        {\n            name: 'title',\n            title: 'About Title',\n            type: 'string',\n            description: 'The title of the page',\n          },\n          {\n            name: 'slug',\n            title: 'Slug',\n            type: 'slug',\n            description: 'The slug for the page',\n            options: {\n              source: 'title',\n              maxLength: 96\n            }\n          },\n          {\n            title: 'About Us',\n            name: 'aboutUs',\n            type: 'array',\n            of: [\n                    {\n                        type: 'block'\n                    },\n                    {\n                        type: 'image'\n                    }\n                ]\n        }\n    ]\n}","position":{"start":{"line":670,"column":1,"offset":21640},"end":{"line":707,"column":4,"offset":22508},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Import it into the schema file and deploy. Then add some content.","position":{"start":{"line":709,"column":1,"offset":22512},"end":{"line":709,"column":66,"offset":22577},"indent":[]}}],"position":{"start":{"line":709,"column":1,"offset":22512},"end":{"line":709,"column":66,"offset":22577},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"sanity graphql deploy\nsanity deploy","position":{"start":{"line":711,"column":1,"offset":22581},"end":{"line":714,"column":4,"offset":22631},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we can use the sanity block-content-to-react package and our sanitizers. Create an about-section.js file under components/home","position":{"start":{"line":716,"column":1,"offset":22635},"end":{"line":716,"column":131,"offset":22765},"indent":[]}}],"position":{"start":{"line":716,"column":1,"offset":22635},"end":{"line":716,"column":131,"offset":22765},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"About Section","position":{"start":{"line":718,"column":5,"offset":22773},"end":{"line":718,"column":18,"offset":22786},"indent":[]}}],"position":{"start":{"line":718,"column":1,"offset":22769},"end":{"line":718,"column":18,"offset":22786},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport PortableText from \"@sanity/block-content-to-react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport {serializers} from \"../components/common\";\n\nconst AboutSection = () => {\n    const about = useStaticQuery(query);\n    const info = about.allSanityAbout.nodes;\n\n    return (\n      <div sx={{\n        width: '100%'\n      }}>\n        {info.map((node, index) => (\n          <PortableText\n            key={node.title + index}\n            blocks={node._rawAboutUs}\n            serializers={serializers}\n          />\n        ))}\n      </div>\n  );\n}\n\nexport default AboutSection;\n\nexport const query = graphql`\n  query AboutQuery {\n    allSanityAbout {\n      nodes {\n        title\n        _rawAboutUs(resolveReferences: { maxDepth: 10 })\n      }\n    }\n  }\n`;","position":{"start":{"line":720,"column":1,"offset":22790},"end":{"line":758,"column":4,"offset":23652},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lets add our new about component to our home page:","position":{"start":{"line":760,"column":1,"offset":23656},"end":{"line":760,"column":51,"offset":23706},"indent":[]}}],"position":{"start":{"line":760,"column":1,"offset":23656},"end":{"line":760,"column":51,"offset":23706},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Home Page","position":{"start":{"line":762,"column":5,"offset":23714},"end":{"line":762,"column":14,"offset":23723},"indent":[]}}],"position":{"start":{"line":762,"column":1,"offset":23710},"end":{"line":762,"column":14,"offset":23723},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\nimport HomeSection from \"../components/home/home-section\";\nimport AboutSection from \"../components/home/about-section\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <div sx={{\n        display: 'grid',\n        gridTemplateRows: \"auto\",\n      }}>\n        <Hero/>\n        <AboutSection/>\n        <HomeSection>Showcase Section</HomeSection>\n        <HomeSection>Blog Snippet Section</HomeSection>\n        <HomeSection>Instagram Feed</HomeSection>\n      </div>\n    </Main>\n  )\n}","position":{"start":{"line":764,"column":1,"offset":23727},"end":{"line":789,"column":4,"offset":24384},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next up is our instagram feed. For this we will be using a great theme by ","position":{"start":{"line":791,"column":1,"offset":24388},"end":{"line":791,"column":75,"offset":24462},"indent":[]}},{"type":"link","title":null,"url":"https://twitter.com/hhg2288","children":[{"type":"text","value":"Horacio Herrera","position":{"start":{"line":791,"column":76,"offset":24463},"end":{"line":791,"column":91,"offset":24478},"indent":[]}}],"position":{"start":{"line":791,"column":75,"offset":24462},"end":{"line":791,"column":121,"offset":24508},"indent":[]}},{"type":"text","value":" called @horacioh/gatsby-theme-instagram. Its super simple to use and gives great results. Just what we need! From our themes root run then navigate to the themes gatsby-config.js and add it there.","position":{"start":{"line":791,"column":121,"offset":24508},"end":{"line":791,"column":318,"offset":24705},"indent":[]}}],"position":{"start":{"line":791,"column":1,"offset":24388},"end":{"line":791,"column":318,"offset":24705},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn add @horacioh/gatsby-theme-instagram","position":{"start":{"line":793,"column":1,"offset":24709},"end":{"line":795,"column":4,"offset":24764},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Theme - gatsby-config.js","position":{"start":{"line":797,"column":5,"offset":24772},"end":{"line":797,"column":29,"offset":24796},"indent":[]}}],"position":{"start":{"line":797,"column":1,"offset":24768},"end":{"line":797,"column":29,"offset":24796},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"module.exports = (options) => {\n  const {SANITY_PROJECT_ID, SANITY_PROJECT_DATASET} = options;\n\n  return {\n    plugins: [\n        {\n            resolve: 'gatsby-plugin-google-fonts',\n            options: {\n              fonts: [\n                'Muli',\n                'Open Sans',\n                'source sans pro\\:300,400,400i,700' \n              ]\n            }\n        },\n        {\n          resolve: 'gatsby-source-sanity',\n          options: {\n            projectId: SANITY_PROJECT_ID,\n            dataset: SANITY_PROJECT_DATASET,\n            watchMode: false\n          }\n        },\n        {\n          resolve: \"@horacioh/gatsby-theme-instagram\",\n          options: {\n            username: \"your-instagram-username-here\",\n          },\n        },\n          'gatsby-plugin-theme-ui'\n    ]\n  }\n}","position":{"start":{"line":799,"column":1,"offset":24800},"end":{"line":833,"column":4,"offset":25643},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we can add it to our home page. There are number of options for how to display the data, i suggest checking out the package ","position":{"start":{"line":835,"column":1,"offset":25647},"end":{"line":835,"column":129,"offset":25775},"indent":[]}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/@horacioh/gatsby-theme-instagram","children":[{"type":"text","value":"docs","position":{"start":{"line":835,"column":130,"offset":25776},"end":{"line":835,"column":134,"offset":25780},"indent":[]}}],"position":{"start":{"line":835,"column":129,"offset":25775},"end":{"line":835,"column":199,"offset":25845},"indent":[]}},{"type":"text","value":", we will be using the grid with that standard styling.","position":{"start":{"line":835,"column":199,"offset":25845},"end":{"line":835,"column":254,"offset":25900},"indent":[]}}],"position":{"start":{"line":835,"column":1,"offset":25647},"end":{"line":835,"column":254,"offset":25900},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Home Page","position":{"start":{"line":837,"column":5,"offset":25908},"end":{"line":837,"column":14,"offset":25917},"indent":[]}}],"position":{"start":{"line":837,"column":1,"offset":25904},"end":{"line":837,"column":14,"offset":25917},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\nimport HomeSection from \"../components/home/home-section\";\nimport AboutSection from \"../components/home/about-section\";\nimport { Grid } from \"@horacioh/gatsby-theme-instagram\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <div sx={{\n        display: 'grid',\n        gridTemplateRows: \"auto\",\n      }}>\n        <Hero/>\n        <AboutSection/>\n        <HomeSection>Showcase Section</HomeSection>\n        <HomeSection>Blog Snippet Section</HomeSection>\n        <HomeSection>\n          <Grid />\n        </HomeSection>\n      </div>\n    </Main>\n  )\n}","position":{"start":{"line":839,"column":1,"offset":25921},"end":{"line":867,"column":4,"offset":26652},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<AccentBox>\nSo lets recap what we have done so far:","position":{"start":{"line":869,"column":1,"offset":26656},"end":{"line":870,"column":40,"offset":26708},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added env variables and connected our theme to our sanity studio","position":{"start":{"line":872,"column":3,"offset":26714},"end":{"line":872,"column":67,"offset":26778},"indent":[]}}],"position":{"start":{"line":872,"column":3,"offset":26714},"end":{"line":872,"column":67,"offset":26778},"indent":[]}}],"position":{"start":{"line":872,"column":1,"offset":26712},"end":{"line":872,"column":67,"offset":26778},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Created a Hero image component","position":{"start":{"line":873,"column":3,"offset":26782},"end":{"line":873,"column":33,"offset":26812},"indent":[]}}],"position":{"start":{"line":873,"column":3,"offset":26782},"end":{"line":873,"column":33,"offset":26812},"indent":[]}}],"position":{"start":{"line":873,"column":1,"offset":26780},"end":{"line":873,"column":33,"offset":26812},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Created our home page layout","position":{"start":{"line":874,"column":3,"offset":26816},"end":{"line":874,"column":31,"offset":26844},"indent":[]}}],"position":{"start":{"line":874,"column":3,"offset":26816},"end":{"line":874,"column":31,"offset":26844},"indent":[]}}],"position":{"start":{"line":874,"column":1,"offset":26814},"end":{"line":874,"column":31,"offset":26844},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Extracted our home page sections to a component.","position":{"start":{"line":875,"column":3,"offset":26848},"end":{"line":875,"column":51,"offset":26896},"indent":[]}}],"position":{"start":{"line":875,"column":3,"offset":26848},"end":{"line":875,"column":51,"offset":26896},"indent":[]}}],"position":{"start":{"line":875,"column":1,"offset":26846},"end":{"line":875,"column":51,"offset":26896},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Created a new schema for about information","position":{"start":{"line":876,"column":3,"offset":26900},"end":{"line":876,"column":45,"offset":26942},"indent":[]}}],"position":{"start":{"line":876,"column":3,"offset":26900},"end":{"line":876,"column":45,"offset":26942},"indent":[]}}],"position":{"start":{"line":876,"column":1,"offset":26898},"end":{"line":876,"column":45,"offset":26942},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Created a new AboutSection component and fetched our about information from the studio via graphql query","position":{"start":{"line":877,"column":3,"offset":26946},"end":{"line":877,"column":107,"offset":27050},"indent":[]}}],"position":{"start":{"line":877,"column":3,"offset":26946},"end":{"line":877,"column":107,"offset":27050},"indent":[]}}],"position":{"start":{"line":877,"column":1,"offset":26944},"end":{"line":877,"column":107,"offset":27050},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Used the blockContent package to render our about information","position":{"start":{"line":878,"column":3,"offset":27054},"end":{"line":878,"column":64,"offset":27115},"indent":[]}}],"position":{"start":{"line":878,"column":3,"offset":27054},"end":{"line":878,"column":64,"offset":27115},"indent":[]}}],"position":{"start":{"line":878,"column":1,"offset":27052},"end":{"line":878,"column":64,"offset":27115},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Installed and added our Instagram feed to our home page","position":{"start":{"line":879,"column":3,"offset":27119},"end":{"line":879,"column":58,"offset":27174},"indent":[]}}],"position":{"start":{"line":879,"column":3,"offset":27119},"end":{"line":879,"column":58,"offset":27174},"indent":[]}}],"position":{"start":{"line":879,"column":1,"offset":27117},"end":{"line":879,"column":58,"offset":27174},"indent":[]}}],"position":{"start":{"line":872,"column":1,"offset":26712},"end":{"line":879,"column":58,"offset":27174},"indent":[1,1,1,1,1,1,1]}},{"type":"jsx","value":"</AccentBox>","position":{"start":{"line":881,"column":1,"offset":27178},"end":{"line":881,"column":13,"offset":27190},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"😅 Wow, we have accomplished a lot! I think this is a good place to stop and reflect on what we have done so far. In the next part we will be diving into gatsby-node.js and creating pages from queries on the fly using some templates that we will create. 😎","position":{"start":{"line":883,"column":1,"offset":27194},"end":{"line":883,"column":257,"offset":27450},"indent":[]}}],"position":{"start":{"line":883,"column":1,"offset":27194},"end":{"line":883,"column":257,"offset":27450},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to make a gatsby ecommerce theme. Part 2\",\"date\":\"2020-03-11T00:00:00.000Z\",\"published\":true,\"category\":\"Tutorial\",\"author\":\"Richard Haines\",\"keywords\":[\"gatsby\",\"theme-ui\",\"css-in-js\",\"ecommerce\",\"gatsby theme\",\"tutorial\",\"sanity.io\"],\"pin\":false}","position":{"start":{"line":885,"column":1,"offset":27452},"end":{"line":885,"column":291,"offset":27742},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":885,"column":291,"offset":27742}}},"scopeImports":["import AccentBox from '../src/components/site/blog/accent-box.js';","import React from 'react'"],"scopeIdentifiers":["AccentBox","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to make a gatsby ecommerce theme. Part 2\",\n  \"date\": \"2020-03-11T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Tutorial\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"gatsby\", \"theme-ui\", \"css-in-js\", \"ecommerce\", \"gatsby theme\", \"tutorial\", \"sanity.io\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We have setup our project but it doesn't do much right now. Lets add a backend to store our products!\"), mdx(\"p\", null, \"This is part 2 in a series of tutorials. The format is step by step.\"), mdx(AccentBox, {\n    mdxType: \"AccentBox\"\n  }, \"So lets recap what we have done so far:\", mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setup a project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added our demo and theme projects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linked our demo to our theme\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Created a repository and committed our work\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added a site layout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added our theme styles\"))), mdx(\"h3\", {\n    \"id\": \"backend-support\"\n  }, \"Backend support\"), mdx(\"p\", null, \"Having a website that looks sweet is all well and good but we are going to need somewhere to store and our products data. We could do it from the filesystem but thats not very user friendly. What if we could not only store our products data somewhere, but we could also give the user of our theme a nice UI from which to enter their data..... Enter \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.sanity.io/\"\n  }), \"Sanity.io\"), \" \\uD83D\\uDC83\"), mdx(\"p\", null, \"Sanity will allow us easily (and i really mean easily \\uD83D\\uDE09) set up our backend with a React based dashboard. The schema is super easy to get the hang of. Lets get started!\"), mdx(\"p\", null, \"At our project root create a new folder called studio. Navigate into that folder and install the sanity CLI then initialize the sanity project.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn global add @sanity/cli\\nsanity init\\n\")), mdx(\"p\", null, \"This will globally install the CLI and create a new project for us. You can follow the step provided by the CLI, choose the ecommerce template and for the rest you can accept the defaults.\"), mdx(AccentBox, {\n    mdxType: \"AccentBox\"\n  }, \"I have noticed some lag when running sanity init via the in built vscode terminal, it can hang. If it does i recommend quitting and running the command from another terminal. I use Cmder.\"), mdx(\"p\", null, \"Once installed open the studio folder and you will see some schema definition files. Open the product.js file. It should look like this: \"), mdx(\"h3\", {\n    \"id\": \"product-schema\"\n  }, \"Product Schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default {\\n  name: 'product',\\n  title: 'Product',\\n  type: 'document',\\n  fields: [\\n    {\\n      name: 'title',\\n      title: 'Title',\\n      type: 'string'\\n    },\\n    {\\n      name: 'slug',\\n      title: 'Slug',\\n      type: 'slug',\\n      options: {\\n        source: 'title',\\n        maxLength: 96\\n      }\\n    },\\n    {\\n      title: 'Default variant',\\n      name: 'defaultProductVariant',\\n      type: 'productVariant'\\n    },\\n    {\\n      title: 'Variants',\\n      name: 'variants',\\n      type: 'array',\\n      of: [\\n        {\\n          title: 'Variant',\\n          type: 'productVariant'\\n        }\\n      ]\\n    },\\n    {\\n      title: 'Tags',\\n      name: 'tags',\\n      type: 'array',\\n      of: [\\n        {\\n          type: 'string'\\n        }\\n      ],\\n      options: {\\n        layout: 'tags'\\n      }\\n    },\\n    {\\n      name: 'vendor',\\n      title: 'Vendor',\\n      type: 'reference',\\n      to: {type: 'vendor'}\\n    },\\n    {\\n      name: 'blurb',\\n      title: 'Blurb',\\n      type: 'localeString'\\n    },\\n    {\\n      name: 'body',\\n      title: 'Body',\\n      type: 'localeBlockContent'\\n    }\\n  ],\\n\\n  preview: {\\n    select: {\\n      title: 'title',\\n      manufactor: 'manufactor.title',\\n      media: 'defaultProductVariant.images[0]'\\n    }\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"Each object in the fields array corresponds to an input field in the studio, you can see the type the field expects with the type key. For some they refer to other objects which themselves define their own input fields. For example the Default variant object field. For more information of the inner workings of sanity i highly suggest you go over their docs. They are really exceptional. For now we can leave this file as is.\"), mdx(\"p\", null, \"After you have had a little explore of the different schema files and read the docs on the sanity site create a new file in the schemas folder and call it home.js. We will use this to allow the theme user to add a hero image to the home page of our theme. Add the following to the new home.js schema file: \"), mdx(\"h3\", {\n    \"id\": \"home-schema\"\n  }, \"Home Schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default {\\n    title: 'Home Page Image',\\n    name: 'home',\\n    type: 'document',\\n    fields: [\\n      {\\n        name: 'title',\\n        title: 'Title',\\n        type: 'string'\\n      },\\n      {\\n        name: 'slug',\\n        title: 'Slug',\\n        type: 'slug',\\n        options: {\\n          source: 'title',\\n          maxLength: 96\\n        }\\n      },\\n            {\\n        name: 'alt',\\n        title: 'Alt text',\\n        type: 'string'\\n      },\\n      {\\n        name: 'images',\\n        title: 'Home Images',\\n        type: 'array',\\n        of: [\\n          {\\n            type: 'image',\\n            options: {\\n              hotspot: true\\n            }\\n          }\\n        ]\\n      },\\n    ]\\n  }\\n  \\n\")), mdx(\"p\", null, \"The title field will be the name of our website. You can auto generate the slug in the studio. The images array will allow us to add multiple images which we will be able to access via a graphql query on our home page, page. Wait till you check out the image handling in the studio \\uD83D\\uDC6F\\u200D\\u2640\\uFE0F\"), mdx(\"p\", null, \"We can also create our blog post schema. You'll notice that this time we have added a description to each field object. This will show in the studio as helper text to explain to the user what they should do or what the input expects. Its a small but important feature when thinking about studio handover, in our case, the end user of our theme.\"), mdx(\"h3\", {\n    \"id\": \"blog-post-schema\"\n  }, \"Blog Post Schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default {\\n  name: 'post',\\n  type: 'document',\\n  title: 'Blog Post',\\n  fields: [\\n    {\\n      name: 'title',\\n      type: 'string',\\n      title: 'Title',\\n      description: 'Titles should be catchy, descriptive, and not too long'\\n    },\\n    {\\n      name: 'slug',\\n      type: 'slug',\\n      title: 'Slug',\\n      description: 'Some frontends will require a slug to be set to be able to show the post',\\n      options: {\\n        source: 'title',\\n        maxLength: 96\\n      }\\n    },\\n    {\\n      name: 'publishedAt',\\n      type: 'datetime',\\n      title: 'Published at',\\n      description: 'This can be used to schedule post for publishing'\\n    },\\n    {\\n      name: 'mainImage',\\n      type: 'mainImage',\\n      title: 'Main image'\\n    },\\n    {\\n      name: 'excerpt',\\n      type: 'excerptPortableText',\\n      title: 'Excerpt',\\n      description:\\n        'This ends up on summary pages, on Google, when people share your post in social media.'\\n    },\\n    {\\n      name: 'authors',\\n      title: 'Authors',\\n      type: 'array',\\n      of: [\\n        {\\n          type: 'authorReference'\\n        }\\n      ]\\n    },\\n    {\\n      name: 'categories',\\n      type: 'array',\\n      title: 'Categories',\\n      of: [\\n        {\\n          type: 'reference',\\n          to: {\\n            type: 'category'\\n          }\\n        }\\n      ]\\n    },\\n    {\\n      name: 'body',\\n      type: 'bodyPortableText',\\n      title: 'Body'\\n    }\\n  ],\\n  orderings: [\\n    {\\n      name: 'publishingDateAsc',\\n      title: 'Publishing date new\\u2013>old',\\n      by: [\\n        {\\n          field: 'publishedAt',\\n          direction: 'asc'\\n        },\\n        {\\n          field: 'title',\\n          direction: 'asc'\\n        }\\n      ]\\n    },\\n    {\\n      name: 'publishingDateDesc',\\n      title: 'Publishing date old->new',\\n      by: [\\n        {\\n          field: 'publishedAt',\\n          direction: 'desc'\\n        },\\n        {\\n          field: 'title',\\n          direction: 'asc'\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\")), mdx(\"p\", null, \"Next open the schema.js file located in the same folder and inside the createSchema builder we can add our home and blog schemas, make sure you import it if vscode doesn't automatically do this for you. By default the function is well commented.\"), mdx(\"p\", null, \"Now that we have created our new home page and blog schemas and exported them in the builder function we can deploy and start our studio! \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sanity graphql deploy\\nsanity deploy\\n\")), mdx(\"p\", null, \"When deploying we can host our studio anywhere we like but sanity can also handle this for us. If we make a change to our schema we have to remember to run sanity graphql deploy for the changes to take affect. You should now be able to view the studio at gatsby-theme-fashion.sanity.studio. On the left of the studio you will see all of our content, the stuff created from the schema definitions. Click on the product and then click to create a new product. Now you should be able to see how each of the field type are represented in the studio. The default variant box is where we will be getting most of our data from. Feel free add some products, filling in the necessary information. As we chose the ecommerce template there will already be some products you can use for reference. I would suggest looking over them and adding your own. Once done remove the default template products.\"), mdx(\"p\", null, \"Open the home content tab on the left and add an image to be displayed on the home page of our theme. Make sure you remember to hit publish every time you add or change something in the studio otherwise nothing will happen \\uD83D\\uDE06. If you open the blog content tab and scroll down you will see what looks like a wysiwyg editor. This is sanities rich text editor. In order to properly display its contents in our theme we will need to install another package.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add @sanity/block-content-to-react\\n\")), mdx(\"p\", null, \"This will render an array of block text from the rich text editor in our studio. Each paragraph will be an index in the array. Now in order to use this component and display our rich text properly we will have to create some serializers. This concept was hard for me to understand at first and i did do some hacky stuff to get it working. The actual way of doing it, once you get it right is very simple. There is a handy blog post about it by Eric Howey - \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.erichowey.dev/writing/using-theme-ui-with-sanity/\"\n  }), \"using-theme-ui-with-sanity\"), \"\\nthat gives an example of using the serializers with theme-ui, we'll be using the sx prop directly instead of importing the theme-ui Styled component but it will work much the same way. Lets create a folder under components and name it common. Inside create a file called index.js and add the following:\"), mdx(\"h3\", {\n    \"id\": \"serializers\"\n  }, \"Serializers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\n\\nexport const serializers = {\\n types: {\\n   block(props) {\\n     switch (props.node.style) {\\n       case \\\"h1\\\":\\n         return <h1 sx={{\\n           fontFamily: 'heading',\\n           fontWeight: 'bold'\\n         }}>{props.children}</h1>;\\n       case \\\"h2\\\":\\n         return <h2 sx={{\\n           fontFamily: 'heading'\\n         }}>{props.children}</h2>;\\n       default:\\n         return <p sx={{\\n           fontFamily: 'body'\\n         }}>{props.children}</p>;\\n     }\\n   }\\n }\\n};\\n\")), mdx(\"p\", null, \"We are styling the html elements that are specified in the rich text editor in our studio with the theme-ui sx prop, getting the values from our theme file. Pretty nifty. For a more in depth look into how it works check out the sanity.io \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.sanity.io/docs/block-content\"\n  }), \"docs\"), \". Of course you can add all the html elements your heart desires so long as they are already defined in the schema for block content. In fact, lets take a peek at that file so that you know what i mean:\"), mdx(\"h3\", {\n    \"id\": \"block-content\"\n  }, \"Block Content\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"/**\\n * This is the schema definition for the rich text fields used for\\n * for this blog studio. When you import it in schemas.js it can be\\n * reused in other parts of the studio with:\\n *  {\\n *    name: 'someName',\\n *    title: 'Some title',\\n *    type: 'blockContent'\\n *  }\\n */\\nexport default {\\n  title: 'Block Content',\\n  name: 'blockContent',\\n  type: 'array',\\n  of: [\\n    {\\n      title: 'Block',\\n      type: 'block',\\n      // Styles let you set what your user can mark up blocks with. These\\n      // corresponds with HTML tags, but you can set any title or value\\n      // you want and decide how you want to deal with it where you want to\\n      // use your content.\\n      styles: [\\n        {title: 'Normal', value: 'normal'},\\n        {title: 'H1', value: 'h1'},\\n        {title: 'H2', value: 'h2'},\\n        {title: 'H3', value: 'h3'},\\n        {title: 'H4', value: 'h4'},\\n        {title: 'Quote', value: 'blockquote'}\\n      ],\\n      lists: [{title: 'Bullet', value: 'bullet'}],\\n      // Marks let you mark up inline text in the block editor.\\n      marks: {\\n        // Decorators usually describe a single property \\u2013 e.g. a typographic\\n        // preference or highlighting by editors.\\n        decorators: [{title: 'Strong', value: 'strong'}, {title: 'Emphasis', value: 'em'}],\\n        // Annotations can be any object structure \\u2013 e.g. a link or a footnote.\\n        annotations: [\\n          {\\n            title: 'URL',\\n            name: 'link',\\n            type: 'object',\\n            fields: [\\n              {\\n                title: 'URL',\\n                name: 'href',\\n                type: 'url'\\n              }\\n            ]\\n          }\\n        ]\\n      }\\n    },\\n    // You can add additional types here. Note that you can't use\\n    // primitive types such as 'string' and 'number' in the same array\\n    // as a block type.\\n    {\\n      type: 'image',\\n      options: {hotspot: true}\\n    }\\n  ]\\n}\\n\\n\")), mdx(\"p\", null, \"This is taken directly from the template project output. You should have the same in your sanity project under the schemas folder. As you can see the blocks array defines the markup we want to use in our rich text editor, these are the defaults, you can add or remove as many as you wish. Again, see the docs for more info \\uD83D\\uDE0A\"), mdx(AccentBox, {\n    mdxType: \"AccentBox\"\n  }, \"So lets recap what we have done so far:\", mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added sanity to our project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Looked at the schemas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added our own home and blog post schemas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deployed our studio and added some products and a home page image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Looked at serializers and added our own to handle the rich text input for our blog posts\"))), mdx(\"p\", null, \"We're making great headway! Now that we have our sanity backend up and running we need to hook it up to our theme. Head over to the theme projects root and install the gatsby-source-sanity plugin.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add gatsby-source-sanity\\n\")), mdx(\"p\", null, \"Now create two .env files at the demo sites root. .env.development and .env.production. In these files add the following: \"), mdx(\"h3\", {\n    \"id\": \"env-files\"\n  }, \"Env Files\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"SANITY_PROJECT_ID=<your-sanity-project-id>\\nSANITY_PROJECT_DATASET=<your-sanity-dataset>\\n\")), mdx(\"p\", null, \"If you go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://manage.sanity.io/\"\n  }), \"https://manage.sanity.io/\"), \" and click on your project, gatsby-theme-fashion, or whatever you chose to name it you will find your project id below the project name. You can find the dataset name if you have forgotten what you called it (it will be production if you went with the defaults) under the datasets tab directly under the project id and studio link.\"), mdx(\"p\", null, \"Lets tell our theme to expect these variables form the consumer. Open the themes gatsby-config.js file and add the following: \"), mdx(\"h3\", {\n    \"id\": \"theme---gatsby-configjs\"\n  }, \"Theme - gatsby-config.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = (options) => {\\n  const {SANITY_PROJECT_ID, SANITY_PROJECT_DATASET} = options;\\n\\n  return {\\n    plugins: [\\n        {\\n            resolve: 'gatsby-plugin-google-fonts',\\n            options: {\\n              fonts: [\\n                'Muli',\\n                'Open Sans',\\n                'source sans pro\\\\:300,400,400i,700' \\n              ]\\n            }\\n        },\\n              {\\n        resolve: 'gatsby-source-sanity',\\n        options: {\\n          projectId: SANITY_PROJECT_ID,\\n          dataset: SANITY_PROJECT_DATASET,\\n          watchMode: false\\n        }\\n      },\\n          'gatsby-plugin-theme-ui'\\n    ]\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now we want to navigate to our gatsby-config.js file in our demo sites folder and add the following: \"), mdx(\"h3\", {\n    \"id\": \"demo--gatsby-configjs\"\n  }, \"Demo- gatsby-config.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let activeEnv =\\n  process.env.GATSBY_ACTIVE_ENV || process.env.NODE_ENV || \\\"development\\\" || \\\"production\\\"\\n\\nrequire(\\\"dotenv\\\").config({\\n  path: `.env.${activeEnv}`,\\n})\\n\\nmodule.exports = {\\n  plugins: [\\n    {\\n      resolve: 'gatsby-theme-fashion',\\n      options: {\\n        SANITY_PROJECT_ID: process.env.SANITY_PROJECT_ID,\\n        SANITY_PROJECT_DATASET: process.env.SANITY_PROJECT_DATASET\\n      }\\n    }\\n  ]\\n};\\n\")), mdx(\"p\", null, \"Here we are checking what environment we are in and getting the env variables dependant on that. We will just add the same data to both the development and production env files but you can create different ones dependant on your needs. Its important to always keep your API keys and other sensitive information hidden so the go to thing to do is use env variables.\"), mdx(\"p\", null, \"Now that we have configured our theme to use our sanity backend we can start creating some components to fetch the data and display it. We'll start with the home page. As of now all we have to display is our hero image we added to our home content in the studio. Create a folder under components and call it home. Inside create a new file and call it hero.js.\"), mdx(\"h3\", {\n    \"id\": \"hero-image\"\n  }, \"Hero Image\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport { graphql, useStaticQuery } from \\\"gatsby\\\";\\nimport GatsbyImage from \\\"gatsby-image\\\";\\n\\nconst Hero = () => {\\n  const home = useStaticQuery(query);\\n  const { images, title, alt } = home.sanityHome;\\n\\n  return (\\n    <section sx={{\\n      margin: '2em'\\n    }}>\\n      <GatsbyImage sx={{\\n        width: 'auto',\\n        height: 'auto',\\n        maxWidth: '80%',\\n        maxHeight: '90%',\\n        margin: '0 auto'\\n      }} fluid={images[0].asset.fluid} alt={alt} />\\n    </section>\\n  );\\n};\\n\\nexport default Hero;\\n\\nexport const query = graphql`\\n  query HeroQuery {\\n    sanityHome {\\n      title\\n      alt\\n      images {\\n        asset {\\n          fluid(maxHeight: 865) {\\n            ...GatsbySanityImageFluid\\n          }\\n        }\\n      }\\n    }\\n  }\\n`;\\n\")), mdx(\"p\", null, \"Lets break it down. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We have created a new component that fetches the hero image via a graphql query. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We access that query using gatsbys nifty hook useStaticQuery. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We have destructured the resulting content and passed it to a gatsby image component. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We have added some styling using the sx prop. \")), mdx(\"p\", null, \"This component is now ready to be imported into our index.js file that is waiting for us all lonley in the pages folder of our theme. Right now it looks like this:\"), mdx(\"h3\", {\n    \"id\": \"home-page\"\n  }, \"Home Page\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from 'react'\\n\\nexport default () => <h1>Hello im coming at you from the theme!!<h1>\\n\")), mdx(\"p\", null, \"Lets remove all that and add our hero image!\"), mdx(\"h3\", {\n    \"id\": \"home-page-1\"\n  }, \"Home Page\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport Main from \\\"../components/layout/main\\\"; \\nimport Hero from \\\"../components/home/hero\\\";\\n\\nexport default () => { \\n\\n  return (\\n    <Main>\\n      <Hero/>\\n    </Main>\\n  )\\n}\\n\")), mdx(\"p\", null, \"By importing the Main component and using it as the parent to all others in this component we have told gatsby that anything inside this component will live in the grid area main. This will be the pattern moving forward for all of our pages.\"), mdx(\"p\", null, \"Go to the demo project and run yarn dev to see your image displayed. Lets take a look at our content plan again and check off what we have done:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Navbar\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Landing/home page \\u2705\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hero image \\u2705\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Showcase of products\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blog snippets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instagram feed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Contact section\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"About section\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Products page\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blog page\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blog posts page\")))), mdx(\"p\", null, \"We've still got some way to go \\uD83D\\uDE05 The showcase and blog post snippets both require us to do some setup before we can add them to the home page. So lets go ahead and create the about, contact and instagram feed sections!\"), mdx(\"p\", null, \"We can begin by adding a container div to our home page component (index.js) and styling it with our trusty friend the grid.\"), mdx(\"h3\", {\n    \"id\": \"home-page-2\"\n  }, \"Home Page\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport Main from \\\"../components/layout/main\\\"; \\nimport Hero from \\\"../components/home/hero\\\";\\n\\nexport default () => { \\n\\n  return (\\n    <Main>\\n      <div sx={{\\n        display: 'grid',\\n        gridTemplateRows: \\\"auto\\\",\\n      }}>\\n        <Hero/>\\n        <section>About Section</section>\\n        <section>Showcase Section</section>\\n        <section>Blog Snippet Section</section>\\n        <section>Instagram Feed</section>\\n      </div>\\n    </Main>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Seeing as our home page sections are all going to be the same we can extract that to a new component. Create a new home-section.js file under the components/home folder.\"), mdx(\"h3\", {\n    \"id\": \"home-section\"\n  }, \"Home Section\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\n\\nconst HomeSection = ({children}) => (\\n  <section\\n    sx={{\\n      height: 'max-content',\\n      padding: '1em'\\n    }}\\n  >\\n    {children}\\n  </section>\\n);\\n\\nexport default HomeSection;\\n\")), mdx(\"p\", null, \"We can now import and use that component to wrap our placeholder sections in our home page.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport Main from \\\"../components/layout/main\\\"; \\nimport Hero from \\\"../components/home/hero\\\";\\nimport HomeSection from \\\"../components/home/home-section\\\";\\n\\nexport default () => { \\n\\n  return (\\n    <Main>\\n      <div sx={{\\n        display: 'grid',\\n        gridTemplateRows: \\\"auto\\\",\\n      }}>\\n        <Hero/>\\n        <HomeSection>About Section</HomeSection>\\n        <HomeSection>Showcase Section</HomeSection>\\n        <HomeSection>Blog Snippet Section</HomeSection>\\n        <HomeSection>Instagram Feed</HomeSection>\\n      </div>\\n    </Main>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Our about section will simply display some text that we will import via a graphql query form our sanity backend. First we need to create the schema for that. Head into the sanity project and create a new schema file under the schema folder and call it about.js\"), mdx(\"h3\", {\n    \"id\": \"about-schema\"\n  }, \"About Schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default {\\n    name: 'about',\\n    title: 'About',\\n    type: 'document',\\n    fields: [\\n        {\\n            name: 'title',\\n            title: 'About Title',\\n            type: 'string',\\n            description: 'The title of the page',\\n          },\\n          {\\n            name: 'slug',\\n            title: 'Slug',\\n            type: 'slug',\\n            description: 'The slug for the page',\\n            options: {\\n              source: 'title',\\n              maxLength: 96\\n            }\\n          },\\n          {\\n            title: 'About Us',\\n            name: 'aboutUs',\\n            type: 'array',\\n            of: [\\n                    {\\n                        type: 'block'\\n                    },\\n                    {\\n                        type: 'image'\\n                    }\\n                ]\\n        }\\n    ]\\n}\\n\")), mdx(\"p\", null, \"Import it into the schema file and deploy. Then add some content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sanity graphql deploy\\nsanity deploy\\n\")), mdx(\"p\", null, \"Now we can use the sanity block-content-to-react package and our sanitizers. Create an about-section.js file under components/home\"), mdx(\"h3\", {\n    \"id\": \"about-section\"\n  }, \"About Section\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport PortableText from \\\"@sanity/block-content-to-react\\\";\\nimport { graphql, useStaticQuery } from \\\"gatsby\\\";\\nimport {serializers} from \\\"../components/common\\\";\\n\\nconst AboutSection = () => {\\n    const about = useStaticQuery(query);\\n    const info = about.allSanityAbout.nodes;\\n\\n    return (\\n      <div sx={{\\n        width: '100%'\\n      }}>\\n        {info.map((node, index) => (\\n          <PortableText\\n            key={node.title + index}\\n            blocks={node._rawAboutUs}\\n            serializers={serializers}\\n          />\\n        ))}\\n      </div>\\n  );\\n}\\n\\nexport default AboutSection;\\n\\nexport const query = graphql`\\n  query AboutQuery {\\n    allSanityAbout {\\n      nodes {\\n        title\\n        _rawAboutUs(resolveReferences: { maxDepth: 10 })\\n      }\\n    }\\n  }\\n`;\\n\")), mdx(\"p\", null, \"Lets add our new about component to our home page:\"), mdx(\"h3\", {\n    \"id\": \"home-page-3\"\n  }, \"Home Page\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport Main from \\\"../components/layout/main\\\"; \\nimport Hero from \\\"../components/home/hero\\\";\\nimport HomeSection from \\\"../components/home/home-section\\\";\\nimport AboutSection from \\\"../components/home/about-section\\\";\\n\\nexport default () => { \\n\\n  return (\\n    <Main>\\n      <div sx={{\\n        display: 'grid',\\n        gridTemplateRows: \\\"auto\\\",\\n      }}>\\n        <Hero/>\\n        <AboutSection/>\\n        <HomeSection>Showcase Section</HomeSection>\\n        <HomeSection>Blog Snippet Section</HomeSection>\\n        <HomeSection>Instagram Feed</HomeSection>\\n      </div>\\n    </Main>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Next up is our instagram feed. For this we will be using a great theme by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/hhg2288\"\n  }), \"Horacio Herrera\"), \" called @horacioh/gatsby-theme-instagram. Its super simple to use and gives great results. Just what we need! From our themes root run then navigate to the themes gatsby-config.js and add it there.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add @horacioh/gatsby-theme-instagram\\n\")), mdx(\"h3\", {\n    \"id\": \"theme---gatsby-configjs-1\"\n  }, \"Theme - gatsby-config.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = (options) => {\\n  const {SANITY_PROJECT_ID, SANITY_PROJECT_DATASET} = options;\\n\\n  return {\\n    plugins: [\\n        {\\n            resolve: 'gatsby-plugin-google-fonts',\\n            options: {\\n              fonts: [\\n                'Muli',\\n                'Open Sans',\\n                'source sans pro\\\\:300,400,400i,700' \\n              ]\\n            }\\n        },\\n        {\\n          resolve: 'gatsby-source-sanity',\\n          options: {\\n            projectId: SANITY_PROJECT_ID,\\n            dataset: SANITY_PROJECT_DATASET,\\n            watchMode: false\\n          }\\n        },\\n        {\\n          resolve: \\\"@horacioh/gatsby-theme-instagram\\\",\\n          options: {\\n            username: \\\"your-instagram-username-here\\\",\\n          },\\n        },\\n          'gatsby-plugin-theme-ui'\\n    ]\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now we can add it to our home page. There are number of options for how to display the data, i suggest checking out the package \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@horacioh/gatsby-theme-instagram\"\n  }), \"docs\"), \", we will be using the grid with that standard styling.\"), mdx(\"h3\", {\n    \"id\": \"home-page-4\"\n  }, \"Home Page\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport Main from \\\"../components/layout/main\\\"; \\nimport Hero from \\\"../components/home/hero\\\";\\nimport HomeSection from \\\"../components/home/home-section\\\";\\nimport AboutSection from \\\"../components/home/about-section\\\";\\nimport { Grid } from \\\"@horacioh/gatsby-theme-instagram\\\";\\n\\nexport default () => { \\n\\n  return (\\n    <Main>\\n      <div sx={{\\n        display: 'grid',\\n        gridTemplateRows: \\\"auto\\\",\\n      }}>\\n        <Hero/>\\n        <AboutSection/>\\n        <HomeSection>Showcase Section</HomeSection>\\n        <HomeSection>Blog Snippet Section</HomeSection>\\n        <HomeSection>\\n          <Grid />\\n        </HomeSection>\\n      </div>\\n    </Main>\\n  )\\n}\\n\")), mdx(AccentBox, {\n    mdxType: \"AccentBox\"\n  }, \"So lets recap what we have done so far:\", mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added env variables and connected our theme to our sanity studio\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Created a Hero image component\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Created our home page layout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extracted our home page sections to a component.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Created a new schema for about information\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Created a new AboutSection component and fetched our about information from the studio via graphql query\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Used the blockContent package to render our about information\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Installed and added our Instagram feed to our home page\"))), mdx(\"p\", null, \"\\uD83D\\uDE05 Wow, we have accomplished a lot! I think this is a good place to stop and reflect on what we have done so far. In the next part we will be diving into gatsby-node.js and creating pages from queries on the fly using some templates that we will create. \\uD83D\\uDE0E\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport AccentBox from '../src/components/site/blog/accent-box.js';\nexport const _frontmatter = {\n  \"title\": \"How to make a gatsby ecommerce theme. Part 2\",\n  \"date\": \"2020-03-11T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Tutorial\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"gatsby\", \"theme-ui\", \"css-in-js\", \"ecommerce\", \"gatsby theme\", \"tutorial\", \"sanity.io\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`We have setup our project but it doesn't do much right now. Lets add a backend to store our products!`}</p>\n    <p>{`This is part 2 in a series of tutorials. The format is step by step.`}</p>\n    <AccentBox mdxType=\"AccentBox\">\nSo lets recap what we have done so far:\n      <ul>\n        <li parentName=\"ul\">{`Setup a project`}</li>\n        <li parentName=\"ul\">{`Added our demo and theme projects`}</li>\n        <li parentName=\"ul\">{`Linked our demo to our theme`}</li>\n        <li parentName=\"ul\">{`Created a repository and committed our work`}</li>\n        <li parentName=\"ul\">{`Added a site layout`}</li>\n        <li parentName=\"ul\">{`Added our theme styles`}</li>\n      </ul>\n    </AccentBox>\n    <h3 {...{\n      \"id\": \"backend-support\"\n    }}>{`Backend support`}</h3>\n    <p>{`Having a website that looks sweet is all well and good but we are going to need somewhere to store and our products data. We could do it from the filesystem but thats not very user friendly. What if we could not only store our products data somewhere, but we could also give the user of our theme a nice UI from which to enter their data..... Enter `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.sanity.io/\"\n      }}>{`Sanity.io`}</a>{` 💃`}</p>\n    <p>{`Sanity will allow us easily (and i really mean easily 😉) set up our backend with a React based dashboard. The schema is super easy to get the hang of. Lets get started!`}</p>\n    <p>{`At our project root create a new folder called studio. Navigate into that folder and install the sanity CLI then initialize the sanity project.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn global add @sanity/cli\nsanity init\n`}</code></pre>\n    <p>{`This will globally install the CLI and create a new project for us. You can follow the step provided by the CLI, choose the ecommerce template and for the rest you can accept the defaults.`}</p>\n    <AccentBox mdxType=\"AccentBox\">\nI have noticed some lag when running sanity init via the in built vscode terminal, it can hang. If it does i recommend quitting and running the command from another terminal. I use Cmder.\n    </AccentBox>\n    <p>{`Once installed open the studio folder and you will see some schema definition files. Open the product.js file. It should look like this: `}</p>\n    <h3 {...{\n      \"id\": \"product-schema\"\n    }}>{`Product Schema`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n  name: 'product',\n  title: 'Product',\n  type: 'document',\n  fields: [\n    {\n      name: 'title',\n      title: 'Title',\n      type: 'string'\n    },\n    {\n      name: 'slug',\n      title: 'Slug',\n      type: 'slug',\n      options: {\n        source: 'title',\n        maxLength: 96\n      }\n    },\n    {\n      title: 'Default variant',\n      name: 'defaultProductVariant',\n      type: 'productVariant'\n    },\n    {\n      title: 'Variants',\n      name: 'variants',\n      type: 'array',\n      of: [\n        {\n          title: 'Variant',\n          type: 'productVariant'\n        }\n      ]\n    },\n    {\n      title: 'Tags',\n      name: 'tags',\n      type: 'array',\n      of: [\n        {\n          type: 'string'\n        }\n      ],\n      options: {\n        layout: 'tags'\n      }\n    },\n    {\n      name: 'vendor',\n      title: 'Vendor',\n      type: 'reference',\n      to: {type: 'vendor'}\n    },\n    {\n      name: 'blurb',\n      title: 'Blurb',\n      type: 'localeString'\n    },\n    {\n      name: 'body',\n      title: 'Body',\n      type: 'localeBlockContent'\n    }\n  ],\n\n  preview: {\n    select: {\n      title: 'title',\n      manufactor: 'manufactor.title',\n      media: 'defaultProductVariant.images[0]'\n    }\n  }\n}\n\n`}</code></pre>\n    <p>{`Each object in the fields array corresponds to an input field in the studio, you can see the type the field expects with the type key. For some they refer to other objects which themselves define their own input fields. For example the Default variant object field. For more information of the inner workings of sanity i highly suggest you go over their docs. They are really exceptional. For now we can leave this file as is.`}</p>\n    <p>{`After you have had a little explore of the different schema files and read the docs on the sanity site create a new file in the schemas folder and call it home.js. We will use this to allow the theme user to add a hero image to the home page of our theme. Add the following to the new home.js schema file: `}</p>\n    <h3 {...{\n      \"id\": \"home-schema\"\n    }}>{`Home Schema`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n    title: 'Home Page Image',\n    name: 'home',\n    type: 'document',\n    fields: [\n      {\n        name: 'title',\n        title: 'Title',\n        type: 'string'\n      },\n      {\n        name: 'slug',\n        title: 'Slug',\n        type: 'slug',\n        options: {\n          source: 'title',\n          maxLength: 96\n        }\n      },\n            {\n        name: 'alt',\n        title: 'Alt text',\n        type: 'string'\n      },\n      {\n        name: 'images',\n        title: 'Home Images',\n        type: 'array',\n        of: [\n          {\n            type: 'image',\n            options: {\n              hotspot: true\n            }\n          }\n        ]\n      },\n    ]\n  }\n  \n`}</code></pre>\n    <p>{`The title field will be the name of our website. You can auto generate the slug in the studio. The images array will allow us to add multiple images which we will be able to access via a graphql query on our home page, page. Wait till you check out the image handling in the studio 👯‍♀️`}</p>\n    <p>{`We can also create our blog post schema. You'll notice that this time we have added a description to each field object. This will show in the studio as helper text to explain to the user what they should do or what the input expects. Its a small but important feature when thinking about studio handover, in our case, the end user of our theme.`}</p>\n    <h3 {...{\n      \"id\": \"blog-post-schema\"\n    }}>{`Blog Post Schema`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n  name: 'post',\n  type: 'document',\n  title: 'Blog Post',\n  fields: [\n    {\n      name: 'title',\n      type: 'string',\n      title: 'Title',\n      description: 'Titles should be catchy, descriptive, and not too long'\n    },\n    {\n      name: 'slug',\n      type: 'slug',\n      title: 'Slug',\n      description: 'Some frontends will require a slug to be set to be able to show the post',\n      options: {\n        source: 'title',\n        maxLength: 96\n      }\n    },\n    {\n      name: 'publishedAt',\n      type: 'datetime',\n      title: 'Published at',\n      description: 'This can be used to schedule post for publishing'\n    },\n    {\n      name: 'mainImage',\n      type: 'mainImage',\n      title: 'Main image'\n    },\n    {\n      name: 'excerpt',\n      type: 'excerptPortableText',\n      title: 'Excerpt',\n      description:\n        'This ends up on summary pages, on Google, when people share your post in social media.'\n    },\n    {\n      name: 'authors',\n      title: 'Authors',\n      type: 'array',\n      of: [\n        {\n          type: 'authorReference'\n        }\n      ]\n    },\n    {\n      name: 'categories',\n      type: 'array',\n      title: 'Categories',\n      of: [\n        {\n          type: 'reference',\n          to: {\n            type: 'category'\n          }\n        }\n      ]\n    },\n    {\n      name: 'body',\n      type: 'bodyPortableText',\n      title: 'Body'\n    }\n  ],\n  orderings: [\n    {\n      name: 'publishingDateAsc',\n      title: 'Publishing date new–>old',\n      by: [\n        {\n          field: 'publishedAt',\n          direction: 'asc'\n        },\n        {\n          field: 'title',\n          direction: 'asc'\n        }\n      ]\n    },\n    {\n      name: 'publishingDateDesc',\n      title: 'Publishing date old->new',\n      by: [\n        {\n          field: 'publishedAt',\n          direction: 'desc'\n        },\n        {\n          field: 'title',\n          direction: 'asc'\n        }\n      ]\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`Next open the schema.js file located in the same folder and inside the createSchema builder we can add our home and blog schemas, make sure you import it if vscode doesn't automatically do this for you. By default the function is well commented.`}</p>\n    <p>{`Now that we have created our new home page and blog schemas and exported them in the builder function we can deploy and start our studio! `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`sanity graphql deploy\nsanity deploy\n`}</code></pre>\n    <p>{`When deploying we can host our studio anywhere we like but sanity can also handle this for us. If we make a change to our schema we have to remember to run sanity graphql deploy for the changes to take affect. You should now be able to view the studio at gatsby-theme-fashion.sanity.studio. On the left of the studio you will see all of our content, the stuff created from the schema definitions. Click on the product and then click to create a new product. Now you should be able to see how each of the field type are represented in the studio. The default variant box is where we will be getting most of our data from. Feel free add some products, filling in the necessary information. As we chose the ecommerce template there will already be some products you can use for reference. I would suggest looking over them and adding your own. Once done remove the default template products.`}</p>\n    <p>{`Open the home content tab on the left and add an image to be displayed on the home page of our theme. Make sure you remember to hit publish every time you add or change something in the studio otherwise nothing will happen 😆. If you open the blog content tab and scroll down you will see what looks like a wysiwyg editor. This is sanities rich text editor. In order to properly display its contents in our theme we will need to install another package.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @sanity/block-content-to-react\n`}</code></pre>\n    <p>{`This will render an array of block text from the rich text editor in our studio. Each paragraph will be an index in the array. Now in order to use this component and display our rich text properly we will have to create some serializers. This concept was hard for me to understand at first and i did do some hacky stuff to get it working. The actual way of doing it, once you get it right is very simple. There is a handy blog post about it by Eric Howey - `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.erichowey.dev/writing/using-theme-ui-with-sanity/\"\n      }}>{`using-theme-ui-with-sanity`}</a>{`\nthat gives an example of using the serializers with theme-ui, we'll be using the sx prop directly instead of importing the theme-ui Styled component but it will work much the same way. Lets create a folder under components and name it common. Inside create a file called index.js and add the following:`}</p>\n    <h3 {...{\n      \"id\": \"serializers\"\n    }}>{`Serializers`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nexport const serializers = {\n types: {\n   block(props) {\n     switch (props.node.style) {\n       case \"h1\":\n         return <h1 sx={{\n           fontFamily: 'heading',\n           fontWeight: 'bold'\n         }}>{props.children}</h1>;\n       case \"h2\":\n         return <h2 sx={{\n           fontFamily: 'heading'\n         }}>{props.children}</h2>;\n       default:\n         return <p sx={{\n           fontFamily: 'body'\n         }}>{props.children}</p>;\n     }\n   }\n }\n};\n`}</code></pre>\n    <p>{`We are styling the html elements that are specified in the rich text editor in our studio with the theme-ui sx prop, getting the values from our theme file. Pretty nifty. For a more in depth look into how it works check out the sanity.io `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.sanity.io/docs/block-content\"\n      }}>{`docs`}</a>{`. Of course you can add all the html elements your heart desires so long as they are already defined in the schema for block content. In fact, lets take a peek at that file so that you know what i mean:`}</p>\n    <h3 {...{\n      \"id\": \"block-content\"\n    }}>{`Block Content`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/**\n * This is the schema definition for the rich text fields used for\n * for this blog studio. When you import it in schemas.js it can be\n * reused in other parts of the studio with:\n *  {\n *    name: 'someName',\n *    title: 'Some title',\n *    type: 'blockContent'\n *  }\n */\nexport default {\n  title: 'Block Content',\n  name: 'blockContent',\n  type: 'array',\n  of: [\n    {\n      title: 'Block',\n      type: 'block',\n      // Styles let you set what your user can mark up blocks with. These\n      // corresponds with HTML tags, but you can set any title or value\n      // you want and decide how you want to deal with it where you want to\n      // use your content.\n      styles: [\n        {title: 'Normal', value: 'normal'},\n        {title: 'H1', value: 'h1'},\n        {title: 'H2', value: 'h2'},\n        {title: 'H3', value: 'h3'},\n        {title: 'H4', value: 'h4'},\n        {title: 'Quote', value: 'blockquote'}\n      ],\n      lists: [{title: 'Bullet', value: 'bullet'}],\n      // Marks let you mark up inline text in the block editor.\n      marks: {\n        // Decorators usually describe a single property – e.g. a typographic\n        // preference or highlighting by editors.\n        decorators: [{title: 'Strong', value: 'strong'}, {title: 'Emphasis', value: 'em'}],\n        // Annotations can be any object structure – e.g. a link or a footnote.\n        annotations: [\n          {\n            title: 'URL',\n            name: 'link',\n            type: 'object',\n            fields: [\n              {\n                title: 'URL',\n                name: 'href',\n                type: 'url'\n              }\n            ]\n          }\n        ]\n      }\n    },\n    // You can add additional types here. Note that you can't use\n    // primitive types such as 'string' and 'number' in the same array\n    // as a block type.\n    {\n      type: 'image',\n      options: {hotspot: true}\n    }\n  ]\n}\n\n`}</code></pre>\n    <p>{`This is taken directly from the template project output. You should have the same in your sanity project under the schemas folder. As you can see the blocks array defines the markup we want to use in our rich text editor, these are the defaults, you can add or remove as many as you wish. Again, see the docs for more info 😊`}</p>\n    <AccentBox mdxType=\"AccentBox\">\nSo lets recap what we have done so far:\n      <ul>\n        <li parentName=\"ul\">{`Added sanity to our project`}</li>\n        <li parentName=\"ul\">{`Looked at the schemas`}</li>\n        <li parentName=\"ul\">{`Added our own home and blog post schemas`}</li>\n        <li parentName=\"ul\">{`Deployed our studio and added some products and a home page image`}</li>\n        <li parentName=\"ul\">{`Looked at serializers and added our own to handle the rich text input for our blog posts`}</li>\n      </ul>\n    </AccentBox>\n    <p>{`We're making great headway! Now that we have our sanity backend up and running we need to hook it up to our theme. Head over to the theme projects root and install the gatsby-source-sanity plugin.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add gatsby-source-sanity\n`}</code></pre>\n    <p>{`Now create two .env files at the demo sites root. .env.development and .env.production. In these files add the following: `}</p>\n    <h3 {...{\n      \"id\": \"env-files\"\n    }}>{`Env Files`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`SANITY_PROJECT_ID=<your-sanity-project-id>\nSANITY_PROJECT_DATASET=<your-sanity-dataset>\n`}</code></pre>\n    <p>{`If you go to `}<a parentName=\"p\" {...{\n        \"href\": \"https://manage.sanity.io/\"\n      }}>{`https://manage.sanity.io/`}</a>{` and click on your project, gatsby-theme-fashion, or whatever you chose to name it you will find your project id below the project name. You can find the dataset name if you have forgotten what you called it (it will be production if you went with the defaults) under the datasets tab directly under the project id and studio link.`}</p>\n    <p>{`Lets tell our theme to expect these variables form the consumer. Open the themes gatsby-config.js file and add the following: `}</p>\n    <h3 {...{\n      \"id\": \"theme---gatsby-configjs\"\n    }}>{`Theme - gatsby-config.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = (options) => {\n  const {SANITY_PROJECT_ID, SANITY_PROJECT_DATASET} = options;\n\n  return {\n    plugins: [\n        {\n            resolve: 'gatsby-plugin-google-fonts',\n            options: {\n              fonts: [\n                'Muli',\n                'Open Sans',\n                'source sans pro\\\\:300,400,400i,700' \n              ]\n            }\n        },\n              {\n        resolve: 'gatsby-source-sanity',\n        options: {\n          projectId: SANITY_PROJECT_ID,\n          dataset: SANITY_PROJECT_DATASET,\n          watchMode: false\n        }\n      },\n          'gatsby-plugin-theme-ui'\n    ]\n  }\n}\n`}</code></pre>\n    <p>{`Now we want to navigate to our gatsby-config.js file in our demo sites folder and add the following: `}</p>\n    <h3 {...{\n      \"id\": \"demo--gatsby-configjs\"\n    }}>{`Demo- gatsby-config.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let activeEnv =\n  process.env.GATSBY_ACTIVE_ENV || process.env.NODE_ENV || \"development\" || \"production\"\n\nrequire(\"dotenv\").config({\n  path: \\`.env.\\${activeEnv}\\`,\n})\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: 'gatsby-theme-fashion',\n      options: {\n        SANITY_PROJECT_ID: process.env.SANITY_PROJECT_ID,\n        SANITY_PROJECT_DATASET: process.env.SANITY_PROJECT_DATASET\n      }\n    }\n  ]\n};\n`}</code></pre>\n    <p>{`Here we are checking what environment we are in and getting the env variables dependant on that. We will just add the same data to both the development and production env files but you can create different ones dependant on your needs. Its important to always keep your API keys and other sensitive information hidden so the go to thing to do is use env variables.`}</p>\n    <p>{`Now that we have configured our theme to use our sanity backend we can start creating some components to fetch the data and display it. We'll start with the home page. As of now all we have to display is our hero image we added to our home content in the studio. Create a folder under components and call it home. Inside create a new file and call it hero.js.`}</p>\n    <h3 {...{\n      \"id\": \"hero-image\"\n    }}>{`Hero Image`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport GatsbyImage from \"gatsby-image\";\n\nconst Hero = () => {\n  const home = useStaticQuery(query);\n  const { images, title, alt } = home.sanityHome;\n\n  return (\n    <section sx={{\n      margin: '2em'\n    }}>\n      <GatsbyImage sx={{\n        width: 'auto',\n        height: 'auto',\n        maxWidth: '80%',\n        maxHeight: '90%',\n        margin: '0 auto'\n      }} fluid={images[0].asset.fluid} alt={alt} />\n    </section>\n  );\n};\n\nexport default Hero;\n\nexport const query = graphql\\`\n  query HeroQuery {\n    sanityHome {\n      title\n      alt\n      images {\n        asset {\n          fluid(maxHeight: 865) {\n            ...GatsbySanityImageFluid\n          }\n        }\n      }\n    }\n  }\n\\`;\n`}</code></pre>\n    <p>{`Lets break it down. `}</p>\n    <ul>\n      <li parentName=\"ul\">{`We have created a new component that fetches the hero image via a graphql query. `}</li>\n      <li parentName=\"ul\">{`We access that query using gatsbys nifty hook useStaticQuery. `}</li>\n      <li parentName=\"ul\">{`We have destructured the resulting content and passed it to a gatsby image component. `}</li>\n      <li parentName=\"ul\">{`We have added some styling using the sx prop. `}</li>\n    </ul>\n    <p>{`This component is now ready to be imported into our index.js file that is waiting for us all lonley in the pages folder of our theme. Right now it looks like this:`}</p>\n    <h3 {...{\n      \"id\": \"home-page\"\n    }}>{`Home Page`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react'\n\nexport default () => <h1>Hello im coming at you from the theme!!<h1>\n`}</code></pre>\n    <p>{`Lets remove all that and add our hero image!`}</p>\n    <h3 {...{\n      \"id\": \"home-page-1\"\n    }}>{`Home Page`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <Hero/>\n    </Main>\n  )\n}\n`}</code></pre>\n    <p>{`By importing the Main component and using it as the parent to all others in this component we have told gatsby that anything inside this component will live in the grid area main. This will be the pattern moving forward for all of our pages.`}</p>\n    <p>{`Go to the demo project and run yarn dev to see your image displayed. Lets take a look at our content plan again and check off what we have done:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Navbar`}</li>\n      <li parentName=\"ul\">{`Landing/home page ✅`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Hero image ✅`}</li>\n          <li parentName=\"ul\">{`Showcase of products`}</li>\n          <li parentName=\"ul\">{`Blog snippets`}</li>\n          <li parentName=\"ul\">{`Instagram feed`}</li>\n          <li parentName=\"ul\">{`Contact section`}</li>\n          <li parentName=\"ul\">{`About section`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Products page`}</li>\n      <li parentName=\"ul\">{`Blog page`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Blog posts page`}</li>\n        </ul></li>\n    </ul>\n    <p>{`We've still got some way to go 😅 The showcase and blog post snippets both require us to do some setup before we can add them to the home page. So lets go ahead and create the about, contact and instagram feed sections!`}</p>\n    <p>{`We can begin by adding a container div to our home page component (index.js) and styling it with our trusty friend the grid.`}</p>\n    <h3 {...{\n      \"id\": \"home-page-2\"\n    }}>{`Home Page`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <div sx={{\n        display: 'grid',\n        gridTemplateRows: \"auto\",\n      }}>\n        <Hero/>\n        <section>About Section</section>\n        <section>Showcase Section</section>\n        <section>Blog Snippet Section</section>\n        <section>Instagram Feed</section>\n      </div>\n    </Main>\n  )\n}\n`}</code></pre>\n    <p>{`Seeing as our home page sections are all going to be the same we can extract that to a new component. Create a new home-section.js file under the components/home folder.`}</p>\n    <h3 {...{\n      \"id\": \"home-section\"\n    }}>{`Home Section`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst HomeSection = ({children}) => (\n  <section\n    sx={{\n      height: 'max-content',\n      padding: '1em'\n    }}\n  >\n    {children}\n  </section>\n);\n\nexport default HomeSection;\n`}</code></pre>\n    <p>{`We can now import and use that component to wrap our placeholder sections in our home page.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\nimport HomeSection from \"../components/home/home-section\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <div sx={{\n        display: 'grid',\n        gridTemplateRows: \"auto\",\n      }}>\n        <Hero/>\n        <HomeSection>About Section</HomeSection>\n        <HomeSection>Showcase Section</HomeSection>\n        <HomeSection>Blog Snippet Section</HomeSection>\n        <HomeSection>Instagram Feed</HomeSection>\n      </div>\n    </Main>\n  )\n}\n`}</code></pre>\n    <p>{`Our about section will simply display some text that we will import via a graphql query form our sanity backend. First we need to create the schema for that. Head into the sanity project and create a new schema file under the schema folder and call it about.js`}</p>\n    <h3 {...{\n      \"id\": \"about-schema\"\n    }}>{`About Schema`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n    name: 'about',\n    title: 'About',\n    type: 'document',\n    fields: [\n        {\n            name: 'title',\n            title: 'About Title',\n            type: 'string',\n            description: 'The title of the page',\n          },\n          {\n            name: 'slug',\n            title: 'Slug',\n            type: 'slug',\n            description: 'The slug for the page',\n            options: {\n              source: 'title',\n              maxLength: 96\n            }\n          },\n          {\n            title: 'About Us',\n            name: 'aboutUs',\n            type: 'array',\n            of: [\n                    {\n                        type: 'block'\n                    },\n                    {\n                        type: 'image'\n                    }\n                ]\n        }\n    ]\n}\n`}</code></pre>\n    <p>{`Import it into the schema file and deploy. Then add some content.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`sanity graphql deploy\nsanity deploy\n`}</code></pre>\n    <p>{`Now we can use the sanity block-content-to-react package and our sanitizers. Create an about-section.js file under components/home`}</p>\n    <h3 {...{\n      \"id\": \"about-section\"\n    }}>{`About Section`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport PortableText from \"@sanity/block-content-to-react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport {serializers} from \"../components/common\";\n\nconst AboutSection = () => {\n    const about = useStaticQuery(query);\n    const info = about.allSanityAbout.nodes;\n\n    return (\n      <div sx={{\n        width: '100%'\n      }}>\n        {info.map((node, index) => (\n          <PortableText\n            key={node.title + index}\n            blocks={node._rawAboutUs}\n            serializers={serializers}\n          />\n        ))}\n      </div>\n  );\n}\n\nexport default AboutSection;\n\nexport const query = graphql\\`\n  query AboutQuery {\n    allSanityAbout {\n      nodes {\n        title\n        _rawAboutUs(resolveReferences: { maxDepth: 10 })\n      }\n    }\n  }\n\\`;\n`}</code></pre>\n    <p>{`Lets add our new about component to our home page:`}</p>\n    <h3 {...{\n      \"id\": \"home-page-3\"\n    }}>{`Home Page`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\nimport HomeSection from \"../components/home/home-section\";\nimport AboutSection from \"../components/home/about-section\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <div sx={{\n        display: 'grid',\n        gridTemplateRows: \"auto\",\n      }}>\n        <Hero/>\n        <AboutSection/>\n        <HomeSection>Showcase Section</HomeSection>\n        <HomeSection>Blog Snippet Section</HomeSection>\n        <HomeSection>Instagram Feed</HomeSection>\n      </div>\n    </Main>\n  )\n}\n`}</code></pre>\n    <p>{`Next up is our instagram feed. For this we will be using a great theme by `}<a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/hhg2288\"\n      }}>{`Horacio Herrera`}</a>{` called @horacioh/gatsby-theme-instagram. Its super simple to use and gives great results. Just what we need! From our themes root run then navigate to the themes gatsby-config.js and add it there.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @horacioh/gatsby-theme-instagram\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"theme---gatsby-configjs-1\"\n    }}>{`Theme - gatsby-config.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = (options) => {\n  const {SANITY_PROJECT_ID, SANITY_PROJECT_DATASET} = options;\n\n  return {\n    plugins: [\n        {\n            resolve: 'gatsby-plugin-google-fonts',\n            options: {\n              fonts: [\n                'Muli',\n                'Open Sans',\n                'source sans pro\\\\:300,400,400i,700' \n              ]\n            }\n        },\n        {\n          resolve: 'gatsby-source-sanity',\n          options: {\n            projectId: SANITY_PROJECT_ID,\n            dataset: SANITY_PROJECT_DATASET,\n            watchMode: false\n          }\n        },\n        {\n          resolve: \"@horacioh/gatsby-theme-instagram\",\n          options: {\n            username: \"your-instagram-username-here\",\n          },\n        },\n          'gatsby-plugin-theme-ui'\n    ]\n  }\n}\n`}</code></pre>\n    <p>{`Now we can add it to our home page. There are number of options for how to display the data, i suggest checking out the package `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@horacioh/gatsby-theme-instagram\"\n      }}>{`docs`}</a>{`, we will be using the grid with that standard styling.`}</p>\n    <h3 {...{\n      \"id\": \"home-page-4\"\n    }}>{`Home Page`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Main from \"../components/layout/main\"; \nimport Hero from \"../components/home/hero\";\nimport HomeSection from \"../components/home/home-section\";\nimport AboutSection from \"../components/home/about-section\";\nimport { Grid } from \"@horacioh/gatsby-theme-instagram\";\n\nexport default () => { \n\n  return (\n    <Main>\n      <div sx={{\n        display: 'grid',\n        gridTemplateRows: \"auto\",\n      }}>\n        <Hero/>\n        <AboutSection/>\n        <HomeSection>Showcase Section</HomeSection>\n        <HomeSection>Blog Snippet Section</HomeSection>\n        <HomeSection>\n          <Grid />\n        </HomeSection>\n      </div>\n    </Main>\n  )\n}\n`}</code></pre>\n    <AccentBox mdxType=\"AccentBox\">\nSo lets recap what we have done so far:\n      <ul>\n        <li parentName=\"ul\">{`Added env variables and connected our theme to our sanity studio`}</li>\n        <li parentName=\"ul\">{`Created a Hero image component`}</li>\n        <li parentName=\"ul\">{`Created our home page layout`}</li>\n        <li parentName=\"ul\">{`Extracted our home page sections to a component.`}</li>\n        <li parentName=\"ul\">{`Created a new schema for about information`}</li>\n        <li parentName=\"ul\">{`Created a new AboutSection component and fetched our about information from the studio via graphql query`}</li>\n        <li parentName=\"ul\">{`Used the blockContent package to render our about information`}</li>\n        <li parentName=\"ul\">{`Installed and added our Instagram feed to our home page`}</li>\n      </ul>\n    </AccentBox>\n    <p>{`😅 Wow, we have accomplished a lot! I think this is a good place to stop and reflect on what we have done so far. In the next part we will be diving into gatsby-node.js and creating pages from queries on the fly using some templates that we will create. 😎`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}