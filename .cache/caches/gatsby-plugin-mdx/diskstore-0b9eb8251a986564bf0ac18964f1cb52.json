{"expireTime":9007200851906807000,"key":"gatsby-plugin-mdx-entire-payload-d9a4069d3c24e1fcebc54f05e3a3a5f1-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In this article we will create a Jamstack website powered by Gatsby, Netlify Functions, Apollo and FaunaDB. Our site\nwill use the ","position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":3,"column":14,"offset":133},"indent":[1]}},{"type":"link","title":null,"url":"https://www.potterapi.com/","children":[{"type":"text","value":"Harry Potter API","position":{"start":{"line":3,"column":15,"offset":134},"end":{"line":3,"column":31,"offset":150},"indent":[]}}],"position":{"start":{"line":3,"column":14,"offset":133},"end":{"line":3,"column":60,"offset":179},"indent":[]}},{"type":"text","value":" for its data that will be stored in a\n","position":{"start":{"line":3,"column":60,"offset":179},"end":{"line":4,"column":1,"offset":219},"indent":[1]}},{"type":"link","title":null,"url":"https://dashboard.fauna.com/accounts/register?utm_source=RichardHainesDev&utm_medium=referral&utm_campaign=WritewithFauna_Jamstack_RichardHaines","children":[{"type":"text","value":"FaunaDB","position":{"start":{"line":4,"column":2,"offset":220},"end":{"line":4,"column":9,"offset":227},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":219},"end":{"line":4,"column":156,"offset":374},"indent":[]}},{"type":"text","value":"\ndatabase. The data will be accessed using serverless functions and ","position":{"start":{"line":4,"column":156,"offset":374},"end":{"line":5,"column":68,"offset":443},"indent":[1]}},{"type":"link","title":null,"url":"https://www.apollographql.com/docs/","children":[{"type":"text","value":"Apollo","position":{"start":{"line":5,"column":69,"offset":444},"end":{"line":5,"column":75,"offset":450},"indent":[]}}],"position":{"start":{"line":5,"column":68,"offset":443},"end":{"line":5,"column":113,"offset":488},"indent":[]}},{"type":"text","value":".\nFinally we will display our data in a ","position":{"start":{"line":5,"column":113,"offset":488},"end":{"line":6,"column":39,"offset":529},"indent":[1]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":6,"column":40,"offset":530},"end":{"line":6,"column":46,"offset":536},"indent":[]}}],"position":{"start":{"line":6,"column":39,"offset":529},"end":{"line":6,"column":74,"offset":564},"indent":[]}},{"type":"text","value":" site styled using\n","position":{"start":{"line":6,"column":74,"offset":564},"end":{"line":7,"column":1,"offset":584},"indent":[1]}},{"type":"link","title":null,"url":"https://theme-ui.com/","children":[{"type":"text","value":"Theme-ui","position":{"start":{"line":7,"column":2,"offset":585},"end":{"line":7,"column":10,"offset":593},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":584},"end":{"line":7,"column":34,"offset":617},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":7,"column":34,"offset":617},"end":{"line":7,"column":35,"offset":618},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":7,"column":35,"offset":618},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This finished site will look a little something like this:\n","position":{"start":{"line":9,"column":1,"offset":622},"end":{"line":10,"column":1,"offset":682},"indent":[1]}},{"type":"link","title":null,"url":"https://serverless-graphql-potter.netlify.app/","children":[{"type":"text","value":"serverless-graphql-potter.netlify.app/","position":{"start":{"line":10,"column":2,"offset":683},"end":{"line":10,"column":40,"offset":721},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":682},"end":{"line":10,"column":89,"offset":770},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":622},"end":{"line":10,"column":89,"offset":770},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"We will begin by focusing on what these technologies are and why, as frontend developers, we should be leveraging them.\nWe will then begin our project and create our schema.","position":{"start":{"line":12,"column":1,"offset":774},"end":{"line":13,"column":54,"offset":948},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":774},"end":{"line":13,"column":54,"offset":948},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Jamstack","position":{"start":{"line":15,"column":4,"offset":955},"end":{"line":15,"column":16,"offset":967},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":952},"end":{"line":15,"column":16,"offset":967},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Jamstack is a term often used to describe sites that are served as static assets to a\n","position":{"start":{"line":17,"column":1,"offset":971},"end":{"line":18,"column":1,"offset":1058},"indent":[1]}},{"type":"link","title":null,"url":"https://www.cloudflare.com/learning/cdn/what-is-a-cdn/","children":[{"type":"text","value":"CDN","position":{"start":{"line":18,"column":2,"offset":1059},"end":{"line":18,"column":5,"offset":1062},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1058},"end":{"line":18,"column":62,"offset":1119},"indent":[]}},{"type":"text","value":", of course this is nothing new, anyone who has made a\nsimple site with HTML and CSS and published it has served a static site. To walk away thinking that the only purpose of\nJamstack sites are to serve static files would be doing it a great injustice and miss some of the awesome things this\n\"new\" way of building web apps provides.","position":{"start":{"line":18,"column":62,"offset":1119},"end":{"line":21,"column":41,"offset":1455},"indent":[1,1,1]}}],"position":{"start":{"line":17,"column":1,"offset":971},"end":{"line":21,"column":41,"offset":1455},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A few of the benefits of going Jamstack","position":{"start":{"line":23,"column":1,"offset":1459},"end":{"line":23,"column":40,"offset":1498},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1459},"end":{"line":23,"column":40,"offset":1498},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"High security and more secure. Fewer points of attack due to static files and external APIs served over CDN","position":{"start":{"line":25,"column":3,"offset":1504},"end":{"line":25,"column":110,"offset":1611},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":1504},"end":{"line":25,"column":110,"offset":1611},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1502},"end":{"line":25,"column":110,"offset":1611},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cheaper hosting and easier scalability with serverless functions","position":{"start":{"line":26,"column":3,"offset":1615},"end":{"line":26,"column":67,"offset":1679},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1615},"end":{"line":26,"column":67,"offset":1679},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1613},"end":{"line":26,"column":67,"offset":1679},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fast! Pre-built assets served from a CDN instead of a server","position":{"start":{"line":27,"column":3,"offset":1683},"end":{"line":27,"column":63,"offset":1743},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1683},"end":{"line":27,"column":63,"offset":1743},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1681},"end":{"line":27,"column":63,"offset":1743},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1502},"end":{"line":27,"column":63,"offset":1743},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A popular way of storing the data your site requires, apart from as markdown files, is the use of a headless CMS\n(Content Management System). These CMSs have adopted the term headless as they don't come with their own frontend that\ndisplays the data stored, like Wordpress for example. Instead they are headless, they have no frontend.","position":{"start":{"line":29,"column":1,"offset":1747},"end":{"line":31,"column":104,"offset":2084},"indent":[1,1]}}],"position":{"start":{"line":29,"column":1,"offset":1747},"end":{"line":31,"column":104,"offset":2084},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A headless CMS can be set up so that once a change to the data is made in the CMS a new build is triggered via a webhook\n(just one way of doing it, you could trigger rebuilds other ways) and the site will be deployed again with the new data.","position":{"start":{"line":33,"column":1,"offset":2088},"end":{"line":34,"column":121,"offset":2330},"indent":[1]}}],"position":{"start":{"line":33,"column":1,"offset":2088},"end":{"line":34,"column":121,"offset":2330},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"As an example we could have some images stored in our CMS that are pulled into our site via a graphql query and shown on\nour site. If we wanted to change one of our images we could do so via our CMS which would then trigger a new build on\npublish and the new image would then be visible on our site.","position":{"start":{"line":36,"column":1,"offset":2334},"end":{"line":38,"column":61,"offset":2635},"indent":[1,1]}}],"position":{"start":{"line":36,"column":1,"offset":2334},"end":{"line":38,"column":61,"offset":2635},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are many great options to choose from when considering which CMS to use:","position":{"start":{"line":40,"column":1,"offset":2639},"end":{"line":40,"column":79,"offset":2717},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2639},"end":{"line":40,"column":79,"offset":2717},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Netlify CMS","position":{"start":{"line":42,"column":3,"offset":2723},"end":{"line":42,"column":14,"offset":2734},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":2723},"end":{"line":42,"column":14,"offset":2734},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2721},"end":{"line":42,"column":14,"offset":2734},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Contenful","position":{"start":{"line":43,"column":3,"offset":2738},"end":{"line":43,"column":12,"offset":2747},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":2738},"end":{"line":43,"column":12,"offset":2747},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2736},"end":{"line":43,"column":12,"offset":2747},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Sanity.io","position":{"start":{"line":44,"column":3,"offset":2751},"end":{"line":44,"column":12,"offset":2760},"indent":[]}}],"position":{"start":{"line":44,"column":3,"offset":2751},"end":{"line":44,"column":12,"offset":2760},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2749},"end":{"line":44,"column":12,"offset":2760},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Tina CMS","position":{"start":{"line":45,"column":3,"offset":2764},"end":{"line":45,"column":11,"offset":2772},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":2764},"end":{"line":45,"column":11,"offset":2772},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2762},"end":{"line":45,"column":11,"offset":2772},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Butter CMS","position":{"start":{"line":46,"column":3,"offset":2776},"end":{"line":46,"column":13,"offset":2786},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":2776},"end":{"line":46,"column":13,"offset":2786},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2774},"end":{"line":46,"column":13,"offset":2786},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2721},"end":{"line":46,"column":13,"offset":2786},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The potential list is so long i will point you in the direction of a great site that lists most of them\n","position":{"start":{"line":48,"column":1,"offset":2790},"end":{"line":49,"column":1,"offset":2895},"indent":[1]}},{"type":"link","title":null,"url":"https://headlesscms.org/","children":[{"type":"text","value":"headlesscms.org","position":{"start":{"line":49,"column":2,"offset":2896},"end":{"line":49,"column":17,"offset":2911},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2895},"end":{"line":49,"column":44,"offset":2938},"indent":[]}},{"type":"text","value":"!","position":{"start":{"line":49,"column":44,"offset":2938},"end":{"line":49,"column":45,"offset":2939},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2790},"end":{"line":49,"column":45,"offset":2939},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"For more information and a great overview of what the Jamstack is and some more of its benefits i recommend checking out\n","position":{"start":{"line":51,"column":1,"offset":2943},"end":{"line":52,"column":1,"offset":3065},"indent":[1]}},{"type":"link","title":null,"url":"https://jamstack.org/","children":[{"type":"text","value":"jamstack.org","position":{"start":{"line":52,"column":2,"offset":3066},"end":{"line":52,"column":14,"offset":3078},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":3065},"end":{"line":52,"column":38,"offset":3102},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":52,"column":38,"offset":3102},"end":{"line":52,"column":39,"offset":3103},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2943},"end":{"line":52,"column":39,"offset":3103},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Just because our site is served as static assets, that doesn't mean we cant work in a dynamic way and have the benefits\nof dynamic data! We wont be diving deep into all of its benefits, but we will be looking at how we can take our static\nsite and make it dynamic by way of taking a serverless approach to handling our data through AWS Lambda functions, which\nwe will use via Netlify and FaunaDB.","position":{"start":{"line":54,"column":1,"offset":3107},"end":{"line":57,"column":37,"offset":3506},"indent":[1,1,1]}}],"position":{"start":{"line":54,"column":1,"offset":3107},"end":{"line":57,"column":37,"offset":3506},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Serverless","position":{"start":{"line":59,"column":4,"offset":3513},"end":{"line":59,"column":14,"offset":3523},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":3510},"end":{"line":59,"column":14,"offset":3523},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Back in the old days, long long ago before we spread our stack with jam, we had a website that was a combination of HTML\nmarkup, CSS styling and JavaScript. Our website gave our user data to access and manipulate and our data was stored in a\ndatabase which was hosted on a server. If we hosted this database ourselves we were responsible for keeping it going and\nmaintaining it and all of its stored data. Our database could hold only a certain amount of data which meant that if we\nwere lucky enough to get a lot of traffic it would soon struggle to handle all of the requests coming its way and so our\nend users might experience some downtime or no data at all.","position":{"start":{"line":61,"column":1,"offset":3527},"end":{"line":66,"column":60,"offset":4195},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":61,"column":1,"offset":3527},"end":{"line":66,"column":60,"offset":4195},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we paid for a hosted server then we were paying for the up time even when no requests were being sent.","position":{"start":{"line":68,"column":1,"offset":4199},"end":{"line":68,"column":106,"offset":4304},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4199},"end":{"line":68,"column":106,"offset":4304},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To counter these issues serverless computing was introduced. Now, lets cut through all the magic this might imply and\nsimply state that serverless still involves servers, the big difference is that they are hosted in the cloud and execute\nsome code for us.","position":{"start":{"line":70,"column":1,"offset":4308},"end":{"line":72,"column":18,"offset":4566},"indent":[1,1]}}],"position":{"start":{"line":70,"column":1,"offset":4308},"end":{"line":72,"column":18,"offset":4566},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Providing the requested resources as a simple function they only run when that request is made. This means that we are\nonly charged for the resources and time the code is running for. With this approach we have done away with the need to\npay a server provider for constant up time, which is one of the big plus points of going serverless.","position":{"start":{"line":74,"column":1,"offset":4570},"end":{"line":76,"column":101,"offset":4910},"indent":[1,1]}}],"position":{"start":{"line":74,"column":1,"offset":4570},"end":{"line":76,"column":101,"offset":4910},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Being able to scale up and down is also a major benefit of using serverless functions to interact with our data stores.\nIn a nutshell this means that as multiple requests come in via our serverless functions, our cloud provider can create\nmultiple instances of the same function to handle those requests and run them in parallel. One downside to this is the\nconcept of cold starts where because our functions are spun up on demand they need a small amount of time to start up\nwhich can delay our response. However, once up if multiple requests are received our serverless functions will stay open\nto requests and handle them before closing down again.","position":{"start":{"line":78,"column":1,"offset":4914},"end":{"line":83,"column":55,"offset":5570},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":78,"column":1,"offset":4914},"end":{"line":83,"column":55,"offset":5570},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"FaunaDB","position":{"start":{"line":85,"column":4,"offset":5577},"end":{"line":85,"column":11,"offset":5584},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":5574},"end":{"line":85,"column":11,"offset":5584},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"FaunaDB is a global serverless database that has native graphql support, is multi tenancy which allows us to have nested\ndatabases and is low latency from any location. Its also one of the only serverless databases to follow the\n","position":{"start":{"line":87,"column":1,"offset":5588},"end":{"line":89,"column":1,"offset":5819},"indent":[1,1]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/ACID","children":[{"type":"text","value":"ACID transactions","position":{"start":{"line":89,"column":2,"offset":5820},"end":{"line":89,"column":19,"offset":5837},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5819},"end":{"line":89,"column":56,"offset":5874},"indent":[]}},{"type":"text","value":" which guarantee consistent reads and writes to the database.","position":{"start":{"line":89,"column":56,"offset":5874},"end":{"line":89,"column":117,"offset":5935},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":5588},"end":{"line":89,"column":117,"offset":5935},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Fauna also provides us with a High Availability solution with each server globally located containing a partition of our\ndatabase, replicating our data asynchronously with each request with a copy of our database or the transaction made.","position":{"start":{"line":91,"column":1,"offset":5939},"end":{"line":92,"column":117,"offset":6177},"indent":[1]}}],"position":{"start":{"line":91,"column":1,"offset":5939},"end":{"line":92,"column":117,"offset":6177},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Some of the benefits to using Fauna can be summarized as:","position":{"start":{"line":94,"column":1,"offset":6181},"end":{"line":94,"column":58,"offset":6238},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":6181},"end":{"line":94,"column":58,"offset":6238},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Transactional","position":{"start":{"line":96,"column":3,"offset":6244},"end":{"line":96,"column":16,"offset":6257},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":6244},"end":{"line":96,"column":16,"offset":6257},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":6242},"end":{"line":96,"column":16,"offset":6257},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Multi-document","position":{"start":{"line":97,"column":3,"offset":6261},"end":{"line":97,"column":17,"offset":6275},"indent":[]}}],"position":{"start":{"line":97,"column":3,"offset":6261},"end":{"line":97,"column":17,"offset":6275},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":6259},"end":{"line":97,"column":17,"offset":6275},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Geo-distributed","position":{"start":{"line":98,"column":3,"offset":6279},"end":{"line":98,"column":18,"offset":6294},"indent":[]}}],"position":{"start":{"line":98,"column":3,"offset":6279},"end":{"line":98,"column":18,"offset":6294},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":6277},"end":{"line":98,"column":18,"offset":6294},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":6242},"end":{"line":98,"column":18,"offset":6294},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In short, Fauna frees the developer from worry about single or multi-document solutions. Guarantees consistent data\nwithout burdening the developer on how to model their system to avoid consistency issues. To get a good overview of how\nFauna does this see this ","position":{"start":{"line":100,"column":1,"offset":6298},"end":{"line":102,"column":26,"offset":6561},"indent":[1,1]}},{"type":"link","title":null,"url":"https://fauna.com/blog/consistency-without-clocks-faunadb-transaction-protocol","children":[{"type":"text","value":"blog post","position":{"start":{"line":102,"column":27,"offset":6562},"end":{"line":102,"column":36,"offset":6571},"indent":[]}}],"position":{"start":{"line":102,"column":26,"offset":6561},"end":{"line":102,"column":117,"offset":6652},"indent":[]}},{"type":"text","value":"\nabout the FaunaDB distributed transaction protocol.","position":{"start":{"line":102,"column":117,"offset":6652},"end":{"line":103,"column":52,"offset":6705},"indent":[1]}}],"position":{"start":{"line":100,"column":1,"offset":6298},"end":{"line":103,"column":52,"offset":6705},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are a few other alternatives that one could choose instead of using Fauna such as:","position":{"start":{"line":105,"column":1,"offset":6709},"end":{"line":105,"column":89,"offset":6797},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":6709},"end":{"line":105,"column":89,"offset":6797},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Firebase","position":{"start":{"line":107,"column":3,"offset":6803},"end":{"line":107,"column":11,"offset":6811},"indent":[]}}],"position":{"start":{"line":107,"column":3,"offset":6803},"end":{"line":107,"column":11,"offset":6811},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":6801},"end":{"line":107,"column":11,"offset":6811},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cassandra","position":{"start":{"line":108,"column":3,"offset":6815},"end":{"line":108,"column":12,"offset":6824},"indent":[]}}],"position":{"start":{"line":108,"column":3,"offset":6815},"end":{"line":108,"column":12,"offset":6824},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":6813},"end":{"line":108,"column":12,"offset":6824},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"MongoDB","position":{"start":{"line":109,"column":3,"offset":6828},"end":{"line":109,"column":10,"offset":6835},"indent":[]}}],"position":{"start":{"line":109,"column":3,"offset":6828},"end":{"line":109,"column":10,"offset":6835},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":6826},"end":{"line":109,"column":10,"offset":6835},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":6801},"end":{"line":109,"column":10,"offset":6835},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"But these options don't give us the ACID guarantees that Fauna does, compromising scaling.","position":{"start":{"line":111,"column":1,"offset":6839},"end":{"line":111,"column":91,"offset":6929},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":6839},"end":{"line":111,"column":91,"offset":6929},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"ACID","position":{"start":{"line":113,"column":4,"offset":6936},"end":{"line":113,"column":8,"offset":6940},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":6933},"end":{"line":113,"column":8,"offset":6940},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Atomic","position":{"start":{"line":115,"column":5,"offset":6948},"end":{"line":115,"column":11,"offset":6954},"indent":[]}}],"position":{"start":{"line":115,"column":3,"offset":6946},"end":{"line":115,"column":13,"offset":6956},"indent":[]}},{"type":"text","value":" - all transactions are a single unit of truth, either they all pass or none. If we have multiple\ntransactions in the same request then either both are good or neither are, one cannot fail and the other succeed.","position":{"start":{"line":115,"column":13,"offset":6956},"end":{"line":116,"column":116,"offset":7170},"indent":[3]}}],"position":{"start":{"line":115,"column":3,"offset":6946},"end":{"line":116,"column":116,"offset":7170},"indent":[3]}}],"position":{"start":{"line":115,"column":1,"offset":6944},"end":{"line":116,"column":116,"offset":7170},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Consistent","position":{"start":{"line":117,"column":5,"offset":7176},"end":{"line":117,"column":15,"offset":7186},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":7174},"end":{"line":117,"column":17,"offset":7188},"indent":[]}},{"type":"text","value":" - A transaction can only bring the database from one valid state to another, that is, any data written\nto the database must follow the rules set out by the database, this ensures that all transactions are legal.","position":{"start":{"line":117,"column":17,"offset":7188},"end":{"line":118,"column":111,"offset":7403},"indent":[3]}}],"position":{"start":{"line":117,"column":3,"offset":7174},"end":{"line":118,"column":111,"offset":7403},"indent":[3]}}],"position":{"start":{"line":117,"column":1,"offset":7172},"end":{"line":118,"column":111,"offset":7403},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Isolation","position":{"start":{"line":119,"column":5,"offset":7409},"end":{"line":119,"column":14,"offset":7418},"indent":[]}}],"position":{"start":{"line":119,"column":3,"offset":7407},"end":{"line":119,"column":16,"offset":7420},"indent":[]}},{"type":"text","value":" - When a transaction is made or created, concurrent transactions leave the state of the database the\nsame as is they would be if each request was made sequentially.","position":{"start":{"line":119,"column":16,"offset":7420},"end":{"line":120,"column":66,"offset":7588},"indent":[3]}}],"position":{"start":{"line":119,"column":3,"offset":7407},"end":{"line":120,"column":66,"offset":7588},"indent":[3]}}],"position":{"start":{"line":119,"column":1,"offset":7405},"end":{"line":120,"column":66,"offset":7588},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Durability","position":{"start":{"line":121,"column":5,"offset":7594},"end":{"line":121,"column":15,"offset":7604},"indent":[]}}],"position":{"start":{"line":121,"column":3,"offset":7592},"end":{"line":121,"column":17,"offset":7606},"indent":[]}},{"type":"text","value":" - Any transaction that is made and committed to the database is persisted in the the database,\nregardless of down time of the system or failure.","position":{"start":{"line":121,"column":17,"offset":7606},"end":{"line":122,"column":52,"offset":7754},"indent":[3]}}],"position":{"start":{"line":121,"column":3,"offset":7592},"end":{"line":122,"column":52,"offset":7754},"indent":[3]}}],"position":{"start":{"line":121,"column":1,"offset":7590},"end":{"line":122,"column":52,"offset":7754},"indent":[1]}}],"position":{"start":{"line":115,"column":1,"offset":6944},"end":{"line":122,"column":52,"offset":7754},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have a good overview of the stack we will be using lets get to the code!","position":{"start":{"line":124,"column":1,"offset":7758},"end":{"line":124,"column":85,"offset":7842},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":7758},"end":{"line":124,"column":85,"offset":7842},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setup project","position":{"start":{"line":126,"column":4,"offset":7849},"end":{"line":126,"column":17,"offset":7862},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":7846},"end":{"line":126,"column":17,"offset":7862},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We'll create a new folder to house our project, initialize it with yarn and add some files and folders to that we will\nbe working with throughout.","position":{"start":{"line":128,"column":1,"offset":7866},"end":{"line":129,"column":28,"offset":8013},"indent":[1]}}],"position":{"start":{"line":128,"column":1,"offset":7866},"end":{"line":129,"column":28,"offset":8013},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"At the projects root create a functions folder with a nested graphql folder. In that folder we will create three files,\nour graphql schema which we will import into Fauna, our serverless function which will live in graphql.js and create the\nlink to and use the schema from Fauna and our database connection to Fauna.","position":{"start":{"line":131,"column":1,"offset":8017},"end":{"line":133,"column":76,"offset":8335},"indent":[1,1]}}],"position":{"start":{"line":131,"column":1,"offset":8017},"end":{"line":133,"column":76,"offset":8335},"indent":[1,1]}},{"type":"code","lang":"bash","meta":null,"value":"mkdir harry-potter\ncd harry-potter\nyarn init- y\nmkdir src/pages/\ncd src/pages && touch index.js\nmkdir src/components\ntouch gatsby-config.js\ntouch gatsby-browser.js\ntouch gatsby-ssr.js\ntouch .gitignore\n\nmkdir functions/graphql\ncd functions/graphql && touch schema.gql graphql.js db-connection.js","position":{"start":{"line":135,"column":1,"offset":8339},"end":{"line":149,"column":4,"offset":8659},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We'll also need to add some packages.","position":{"start":{"line":151,"column":1,"offset":8663},"end":{"line":151,"column":38,"offset":8700},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":8663},"end":{"line":151,"column":38,"offset":8700},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn add gatsby react react-dom theme-ui gatsby-plugin-theme-ui faunadb isomorphic-fetch dotenv","position":{"start":{"line":153,"column":1,"offset":8704},"end":{"line":155,"column":4,"offset":8813},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Add the following to your newly created .gitignore file:","position":{"start":{"line":157,"column":1,"offset":8817},"end":{"line":157,"column":57,"offset":8873},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":8817},"end":{"line":157,"column":57,"offset":8873},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":".netlify\nnode_modules\n.cache\npublic","position":{"start":{"line":159,"column":1,"offset":8877},"end":{"line":164,"column":4,"offset":8929},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Serverless setup","position":{"start":{"line":166,"column":4,"offset":8936},"end":{"line":166,"column":20,"offset":8952},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":8933},"end":{"line":166,"column":20,"offset":8952},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets begin with our schema. We are going to take advantage of an awesome feature of Fauna. By creating our schema and\nimporting it into Fauna we are letting it take care of a lot of code for us by auto creating all the classes, indexes\nand possible resolvers.","position":{"start":{"line":168,"column":1,"offset":8956},"end":{"line":170,"column":24,"offset":9217},"indent":[1,1]}}],"position":{"start":{"line":168,"column":1,"offset":8956},"end":{"line":170,"column":24,"offset":9217},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"schema.gql","position":{"start":{"line":172,"column":3,"offset":9223},"end":{"line":172,"column":13,"offset":9233},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":9221},"end":{"line":172,"column":15,"offset":9235},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":9221},"end":{"line":172,"column":15,"offset":9235},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"    type Query {\n        allCharacters: [Character]!\n        allSpells: [Spell]!\n    }\n\n    type Character {\n        name: String!\n        house: String\n        patronus: String\n        bloodStatus: String\n        role: String\n        school: String\n        deathEater: Boolean\n        dumbledoresArmy: Boolean\n        orderOfThePheonix: Boolean\n        ministryOfMagic: Boolean\n        alias: String\n        wand: String\n        boggart: String\n        animagus: String\n    }\n\n    type Spell {\n        effect: String\n        spell: String\n        type: String\n    }","position":{"start":{"line":174,"column":1,"offset":9239},"end":{"line":202,"column":4,"offset":9843},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our schema is defining the shape of the data that we will soon be seeding into the data from the Potter API. Our top\nlevel query will return two things, an array of Characters and an array of Spells. We have then defined our Character\nand Spell types. We don't need to specify an id here as when we seed the data from the Potter API we will attach it\nthen.","position":{"start":{"line":204,"column":1,"offset":9847},"end":{"line":207,"column":6,"offset":10206},"indent":[1,1,1]}}],"position":{"start":{"line":204,"column":1,"offset":9847},"end":{"line":207,"column":6,"offset":10206},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have our schema we can import it into Fauna. Head to your fauna console and navigate to the graphql tab on\nthe left, click import schema and find the file we just created, click import and prepare to be amazed!","position":{"start":{"line":209,"column":1,"offset":10210},"end":{"line":210,"column":104,"offset":10433},"indent":[1]}}],"position":{"start":{"line":209,"column":1,"offset":10210},"end":{"line":210,"column":104,"offset":10433},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Once the import is complete we will be presented with a graphql playground where we can run queries against our newly\ncreated database using its schema. Alas, we have yet to add any data, but you can check the collections and indexes tabs\non the left of the console and see that fauna has created two new collections for us, Character and Spell.","position":{"start":{"line":212,"column":1,"offset":10437},"end":{"line":214,"column":107,"offset":10784},"indent":[1,1]}}],"position":{"start":{"line":212,"column":1,"offset":10437},"end":{"line":214,"column":107,"offset":10784},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A collection is a grouping of our data with each piece of data being a document. Or a table with rows if you are coming\nfrom an SQL background. Click the indexes tab to see our two new query indexes that we specified in our schema,\nallCharacters and allSpells. db-connection.js","position":{"start":{"line":216,"column":1,"offset":10788},"end":{"line":218,"column":46,"offset":11067},"indent":[1,1]}}],"position":{"start":{"line":216,"column":1,"offset":10788},"end":{"line":218,"column":46,"offset":11067},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Inside db-connection.js we will create the Fauna client connection, we will use this connection to seed data into our\ndatabase.","position":{"start":{"line":220,"column":1,"offset":11071},"end":{"line":221,"column":10,"offset":11199},"indent":[1]}}],"position":{"start":{"line":220,"column":1,"offset":11071},"end":{"line":221,"column":10,"offset":11199},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"require(\"dotenv\").config();\nconst faunadb = require(\"faunadb\");\nconst query = faunadb.query;\n\nfunction createClient() {\n  if (!process.env.FAUNA_ADMIN) {\n    throw new Error(`No FAUNA_ADMIN key in found, please check your fauna dashboard or create a new key.`);\n  }\n  const client = new faunadb.Client({\n    secret: process.env.FAUNA_ADMIN\n  });\n  return client;\n}\nexports.client = createClient();\nexports.query = query;","position":{"start":{"line":223,"column":1,"offset":11203},"end":{"line":239,"column":4,"offset":11649},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are creating a function which will check to see if we have an admin key from our Fauna database, if none is\nfound we are returning a helpful error message to the console. If the key is found we are creating a connection to our\nFauna database and exporting that connection from file. We are also exporting the query variable from Fauna as that will\nallow us to use some ","position":{"start":{"line":241,"column":1,"offset":11653},"end":{"line":244,"column":22,"offset":12033},"indent":[1,1,1]}},{"type":"link","title":null,"url":"https://docs.fauna.com/fauna/current/api/fql/","children":[{"type":"text","value":"FQL","position":{"start":{"line":244,"column":23,"offset":12034},"end":{"line":244,"column":26,"offset":12037},"indent":[]}}],"position":{"start":{"line":244,"column":22,"offset":12033},"end":{"line":244,"column":74,"offset":12085},"indent":[]}},{"type":"text","value":" (Fauna Query Language) when seeding our data.","position":{"start":{"line":244,"column":74,"offset":12085},"end":{"line":244,"column":120,"offset":12131},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":11653},"end":{"line":244,"column":120,"offset":12131},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Head over to your Fauna console and click the security tab, click new key and select admin from the role dropdown. The\nadmin role will allow us to manage the database, in our case, seed data into it. Choose the name FAUNA_ADMIN and hit\nsave. We will need to create another key for use in using our stored schema from Fauna. Select server for the role of\nthis key and name it SERVER_KEY. Don't forget to make a note of the keys before you close the windows as you wont be\nable to view them again!","position":{"start":{"line":246,"column":1,"offset":12135},"end":{"line":250,"column":25,"offset":12634},"indent":[1,1,1,1]}}],"position":{"start":{"line":246,"column":1,"offset":12135},"end":{"line":250,"column":25,"offset":12634},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That’s a great start. Next up we will seed our data and begin implementing our frontend!","position":{"start":{"line":252,"column":1,"offset":12638},"end":{"line":252,"column":89,"offset":12726},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":12638},"end":{"line":252,"column":89,"offset":12726},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have our keys its time to grab one more, from the ","position":{"start":{"line":254,"column":1,"offset":12730},"end":{"line":254,"column":63,"offset":12792},"indent":[]}},{"type":"link","title":null,"url":"https://www.potterapi.com/","children":[{"type":"text","value":"Potter API","position":{"start":{"line":254,"column":64,"offset":12793},"end":{"line":254,"column":74,"offset":12803},"indent":[]}}],"position":{"start":{"line":254,"column":63,"offset":12792},"end":{"line":254,"column":103,"offset":12832},"indent":[]}},{"type":"text","value":", it's as simple\nas hitting the get key button in the top right hand corner of the page, make a note of it and head back to your code\neditor.","position":{"start":{"line":254,"column":103,"offset":12832},"end":{"line":256,"column":8,"offset":12975},"indent":[1,1]}}],"position":{"start":{"line":254,"column":1,"offset":12730},"end":{"line":256,"column":8,"offset":12975},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We don't want our keys getting into the wrong wizards hands so lets store them as environment variables. Create a .env\nfile at the projects root and add add them. Also add the .env path to the .gitignore file.","position":{"start":{"line":258,"column":1,"offset":12979},"end":{"line":259,"column":91,"offset":13189},"indent":[1]}}],"position":{"start":{"line":258,"column":1,"offset":12979},"end":{"line":259,"column":91,"offset":13189},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":".gitignore","position":{"start":{"line":261,"column":3,"offset":13195},"end":{"line":261,"column":13,"offset":13205},"indent":[]}}],"position":{"start":{"line":261,"column":1,"offset":13193},"end":{"line":261,"column":15,"offset":13207},"indent":[]}}],"position":{"start":{"line":261,"column":1,"offset":13193},"end":{"line":261,"column":15,"offset":13207},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"// ...other stuff\n.env.*","position":{"start":{"line":263,"column":1,"offset":13211},"end":{"line":266,"column":4,"offset":13250},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":".env","position":{"start":{"line":268,"column":3,"offset":13256},"end":{"line":268,"column":7,"offset":13260},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":13254},"end":{"line":268,"column":9,"offset":13262},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":13254},"end":{"line":268,"column":9,"offset":13262},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"FAUNA_ADMIN=xxxxxxxxxxxxxxxxxxxxxxxxxxx\nSERVER_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxx\nPOTTER_KEY=xxxxxxxxxxxxxxxxxxxxxxxx","position":{"start":{"line":270,"column":1,"offset":13266},"end":{"line":274,"column":4,"offset":13396},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our database isn't much good if it doesn't have any data in it, lets change that! Create a file at the projects root and\nname it seed.js","position":{"start":{"line":276,"column":1,"offset":13400},"end":{"line":277,"column":16,"offset":13537},"indent":[1]}}],"position":{"start":{"line":276,"column":1,"offset":13400},"end":{"line":277,"column":16,"offset":13537},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"const fetch = require(\"isomorphic-fetch\");\nconst { client, query } = require(\"./functions/graphql/db\");\nconst q = query;\nconst potterEndPoint = `https://www.potterapi.com/v1/characters/?key=${process.env.POTTER_KEY}`;\n\nfetch(potterEndPoint)\n  .then(res => res.json())\n  .then(res => {\n    console.log({ res });\n    const characterArray = res.map((char, index) => ({\n      _id: char._id,\n      name: char.name,\n      house: char.house,\n      patronus: char.patronus,\n      bloodStatus: char.blood,\n      role: char.role,\n      school: char.school,\n      deathEater: char.deathEater,\n      dumbledoresArmy: char.dumbledoresArmy,\n      orderOfThePheonix: char.orderOfThePheonix,\n      ministryOfMagic: char.ministryOfMagic,\n      alias: char.alias,\n      wand: char.wand,\n      boggart: char.boggart,\n      animagus: char.animagus\n    }));\n\n    client\n      .query(\n        q.Map(characterArray, q.Lambda(\"character\", q.Create(q.Collection(\"Character\"), { data: q.Var(\"character\") })))\n      )\n      .then(console.log(\"Wrote potter characters to FaunaDB\"))\n      .catch(err => console.log(\"Failed to add characters to FaunaDB\", err));\n  });","position":{"start":{"line":279,"column":1,"offset":13541},"end":{"line":314,"column":4,"offset":14723},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There is quite a lot going on here so lets break it down.","position":{"start":{"line":316,"column":1,"offset":14727},"end":{"line":316,"column":58,"offset":14784},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":14727},"end":{"line":316,"column":58,"offset":14784},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We are importing fetch to do a post against the potter endpoint","position":{"start":{"line":318,"column":3,"offset":14790},"end":{"line":318,"column":66,"offset":14853},"indent":[]}}],"position":{"start":{"line":318,"column":3,"offset":14790},"end":{"line":318,"column":66,"offset":14853},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":14788},"end":{"line":318,"column":66,"offset":14853},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We import our Fauna client connection and the query variable which holds the functions need to create the documents in\nour collection.","position":{"start":{"line":319,"column":3,"offset":14857},"end":{"line":320,"column":18,"offset":14994},"indent":[3]}}],"position":{"start":{"line":319,"column":3,"offset":14857},"end":{"line":320,"column":18,"offset":14994},"indent":[3]}}],"position":{"start":{"line":319,"column":1,"offset":14855},"end":{"line":320,"column":18,"offset":14994},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We call the potter endpoint and map over the result, adding all the data we require (which also corresponds to the\nschema we create earlier).","position":{"start":{"line":321,"column":3,"offset":14998},"end":{"line":322,"column":29,"offset":15142},"indent":[3]}}],"position":{"start":{"line":321,"column":3,"offset":14998},"end":{"line":322,"column":29,"offset":15142},"indent":[3]}}],"position":{"start":{"line":321,"column":1,"offset":14996},"end":{"line":322,"column":29,"offset":15142},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using our Fauna client we use FQL to first map over the new array of characters, we then call a lambda function (an\nanonymous function) and choose a variable name for each row instance and create a new document in our Character\ncollection.","position":{"start":{"line":323,"column":3,"offset":15146},"end":{"line":325,"column":14,"offset":15391},"indent":[3,3]}}],"position":{"start":{"line":323,"column":3,"offset":15146},"end":{"line":325,"column":14,"offset":15391},"indent":[3,3]}}],"position":{"start":{"line":323,"column":1,"offset":15144},"end":{"line":325,"column":14,"offset":15391},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If all was successful we return a message to the console, if unsuccessful we return the error.","position":{"start":{"line":326,"column":3,"offset":15395},"end":{"line":326,"column":97,"offset":15489},"indent":[]}}],"position":{"start":{"line":326,"column":3,"offset":15395},"end":{"line":326,"column":97,"offset":15489},"indent":[]}}],"position":{"start":{"line":326,"column":1,"offset":15393},"end":{"line":326,"column":97,"offset":15489},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":14788},"end":{"line":326,"column":97,"offset":15489},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"From the projects root run our new script.","position":{"start":{"line":328,"column":1,"offset":15493},"end":{"line":328,"column":43,"offset":15535},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":15493},"end":{"line":328,"column":43,"offset":15535},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"    node seed.js","position":{"start":{"line":330,"column":1,"offset":15539},"end":{"line":332,"column":4,"offset":15569},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you now take a look inside the collections tab in the Fauna console you will see that the database has populated with\nall the characters from the potterverse! Click on one of the rows (documents) and you can see the data.","position":{"start":{"line":334,"column":1,"offset":15573},"end":{"line":335,"column":104,"offset":15798},"indent":[1]}}],"position":{"start":{"line":334,"column":1,"offset":15573},"end":{"line":335,"column":104,"offset":15798},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"We will create another seed script to get our spells data into our database. Run the script and check out the Spell\ncollections tab to view all the spells.","position":{"start":{"line":337,"column":1,"offset":15802},"end":{"line":338,"column":40,"offset":15958},"indent":[1]}}],"position":{"start":{"line":337,"column":1,"offset":15802},"end":{"line":338,"column":40,"offset":15958},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"const fetch = require(\"isomorphic-fetch\");\nconst { client, query } = require(\"./functions/graphql/db\");\nconst q = query;\nconst potterEndPoint = `https://www.potterapi.com/v1/spells/?key=${process.env.POTTER_KEY}`;\n\nfetch(potterEndPoint)\n  .then(res => res.json())\n  .then(res => {\n    console.log({ res });\n    const spellsArray = res.map((char, index) => ({\n      _id: char._id,\n      effect: char.effect,\n      spell: char.spell,\n      type: char.type\n    }));\n\n    client\n      .query(q.Map(spellsArray, q.Lambda(\"spell\", q.Create(q.Collection(\"Spell\"), { data: q.Var(\"spell\") }))))\n      .then(console.log(\"Wrote potter spells to FaunaDB\"))\n      .catch(err => console.log(\"Failed to add spells to FaunaDB\", err));\n  });","position":{"start":{"line":340,"column":1,"offset":15962},"end":{"line":362,"column":4,"offset":16718},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"bash","meta":null,"value":"    node seed-spells.js","position":{"start":{"line":364,"column":1,"offset":16722},"end":{"line":366,"column":4,"offset":16759},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have data in our database its time to create our serverless function which will pull in our schema from\nFauna.","position":{"start":{"line":368,"column":1,"offset":16763},"end":{"line":369,"column":7,"offset":16886},"indent":[1]}}],"position":{"start":{"line":368,"column":1,"offset":16763},"end":{"line":369,"column":7,"offset":16886},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"graphql.js","position":{"start":{"line":371,"column":3,"offset":16892},"end":{"line":371,"column":13,"offset":16902},"indent":[]}}],"position":{"start":{"line":371,"column":1,"offset":16890},"end":{"line":371,"column":15,"offset":16904},"indent":[]}}],"position":{"start":{"line":371,"column":1,"offset":16890},"end":{"line":371,"column":15,"offset":16904},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"require(\"dotenv\").config();\nconst { createHttpLink } = require(\"apollo-link-http\");\nconst { ApolloServer, makeRemoteExecutableSchema, introspectSchema } = require(\"apollo-server-micro\");\nconst fetch = require(\"isomorphic-fetch\");\n\nconst link = createHttpLink({\n  uri: \"https://graphql.fauna.com/graphql\",\n  fetch,\n  headers: {\n    Authorization: `Bearer ${process.env.SERVER_KEY}`\n  }\n});\n\nconst schema = makeRemoteExecutableSchema({\n  schema: introspectSchema(link),\n  link\n});\n\nconst server = new ApolloServer({\n  schema,\n  introspection: true\n});\n\nexports.handler = server.createHandler({\n  cors: {\n    origin: \"*\",\n    credentials: true\n  }\n});","position":{"start":{"line":373,"column":1,"offset":16908},"end":{"line":403,"column":4,"offset":17596},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lets go through what we just did.","position":{"start":{"line":405,"column":1,"offset":17600},"end":{"line":405,"column":34,"offset":17633},"indent":[]}}],"position":{"start":{"line":405,"column":1,"offset":17600},"end":{"line":405,"column":34,"offset":17633},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We created a link to Fauna using the createHttpLink function which takes our Fauna graphql endpoint and attaches our\nserver key to the header. This will fetch the graphql results from the endpoint over an http connection.","position":{"start":{"line":407,"column":3,"offset":17639},"end":{"line":408,"column":107,"offset":17863},"indent":[3]}}],"position":{"start":{"line":407,"column":3,"offset":17639},"end":{"line":408,"column":107,"offset":17863},"indent":[3]}}],"position":{"start":{"line":407,"column":1,"offset":17637},"end":{"line":408,"column":107,"offset":17863},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We then grab our schema from Fauna using the makeRemoteExecutableSchema function by passing the link to the\nintrospectSchema function, we also provide the link.","position":{"start":{"line":409,"column":3,"offset":17867},"end":{"line":410,"column":55,"offset":18030},"indent":[3]}}],"position":{"start":{"line":409,"column":3,"offset":17867},"end":{"line":410,"column":55,"offset":18030},"indent":[3]}}],"position":{"start":{"line":409,"column":1,"offset":17865},"end":{"line":410,"column":55,"offset":18030},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A new ApolloServer instance is then created and our schema passed in.","position":{"start":{"line":411,"column":3,"offset":18034},"end":{"line":411,"column":72,"offset":18103},"indent":[]}}],"position":{"start":{"line":411,"column":3,"offset":18034},"end":{"line":411,"column":72,"offset":18103},"indent":[]}}],"position":{"start":{"line":411,"column":1,"offset":18032},"end":{"line":411,"column":72,"offset":18103},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Finally we export our handler as Netlify requires us to do when writing serverless functions.","position":{"start":{"line":412,"column":3,"offset":18107},"end":{"line":412,"column":96,"offset":18200},"indent":[]}}],"position":{"start":{"line":412,"column":3,"offset":18107},"end":{"line":412,"column":96,"offset":18200},"indent":[]}}],"position":{"start":{"line":412,"column":1,"offset":18105},"end":{"line":412,"column":96,"offset":18200},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Note that we might, and most probably will, run into ","position":{"start":{"line":413,"column":3,"offset":18204},"end":{"line":413,"column":56,"offset":18257},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS","children":[{"type":"text","value":"CORS","position":{"start":{"line":413,"column":57,"offset":18258},"end":{"line":413,"column":61,"offset":18262},"indent":[]}}],"position":{"start":{"line":413,"column":56,"offset":18257},"end":{"line":413,"column":118,"offset":18319},"indent":[]}},{"type":"text","value":"\nissues when trying to fetch our data so we pass our createHandler function the cors option, setting its origin to\nanything and credentials as true.","position":{"start":{"line":413,"column":118,"offset":18319},"end":{"line":415,"column":36,"offset":18473},"indent":[3,3]}}],"position":{"start":{"line":413,"column":3,"offset":18204},"end":{"line":415,"column":36,"offset":18473},"indent":[3,3]}}],"position":{"start":{"line":413,"column":1,"offset":18202},"end":{"line":415,"column":36,"offset":18473},"indent":[1,1]}}],"position":{"start":{"line":407,"column":1,"offset":17637},"end":{"line":415,"column":36,"offset":18473},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using our data!","position":{"start":{"line":417,"column":4,"offset":18480},"end":{"line":417,"column":19,"offset":18495},"indent":[]}}],"position":{"start":{"line":417,"column":1,"offset":18477},"end":{"line":417,"column":19,"offset":18495},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before we can think about displaying our data we must first do some tinkering. We will be using some handy hooks from\nApollo for querying our (namely ","position":{"start":{"line":419,"column":1,"offset":18499},"end":{"line":420,"column":33,"offset":18650},"indent":[1]}},{"type":"link","title":null,"url":"https://www.apollographql.com/docs/react/data/queries/","children":[{"type":"text","value":"useQuery","position":{"start":{"line":420,"column":34,"offset":18651},"end":{"line":420,"column":42,"offset":18659},"indent":[]}}],"position":{"start":{"line":420,"column":33,"offset":18650},"end":{"line":420,"column":99,"offset":18716},"indent":[]}},{"type":"text","value":") and for that to work\nwe must first set up our provider, which is similar to Reacts context provider. We will wrap our sites root with this\nprovider and pass in our client, thus making it available throughout our site. To wrap the root element in a Gatsby site\nwe must use the gatsby-browser.js and gatsby-ssr.js files. The implementation will be identical in both.","position":{"start":{"line":420,"column":99,"offset":18716},"end":{"line":423,"column":105,"offset":19085},"indent":[1,1,1]}}],"position":{"start":{"line":419,"column":1,"offset":18499},"end":{"line":423,"column":105,"offset":19085},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"gatsby-browser.js && gatsby-ssr.js","position":{"start":{"line":425,"column":3,"offset":19091},"end":{"line":425,"column":37,"offset":19125},"indent":[]}}],"position":{"start":{"line":425,"column":1,"offset":19089},"end":{"line":425,"column":39,"offset":19127},"indent":[]}}],"position":{"start":{"line":425,"column":1,"offset":19089},"end":{"line":425,"column":39,"offset":19127},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will have to add a few more packages at this point:","position":{"start":{"line":427,"column":1,"offset":19131},"end":{"line":427,"column":55,"offset":19185},"indent":[]}}],"position":{"start":{"line":427,"column":1,"offset":19131},"end":{"line":427,"column":55,"offset":19185},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"    yarn add @apollo/client apollo-link-context","position":{"start":{"line":429,"column":1,"offset":19189},"end":{"line":431,"column":4,"offset":19250},"indent":[1,1]}},{"type":"code","lang":"jsx","meta":null,"value":"const React = require(\"react\");\nconst { ApolloProvider, ApolloClient, InMemoryCache } = require(\"@apollo/client\");\nconst { setContext } = require(\"apollo-link-context\");\nconst { createHttpLink } = require(\"apollo-link-http\");\nconst fetch = require(\"isomorphic-fetch\");\n\nconst httpLink = createHttpLink({\n  uri: \"https://graphql.fauna.com/graphql\",\n  fetch\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer ${process.env.SERVER_KEY}`\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nexport const wrapRootElement = ({ element }) => <ApolloProvider client={client}>{element}</ApolloProvider>;","position":{"start":{"line":433,"column":1,"offset":19254},"end":{"line":460,"column":4,"offset":20029},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are other ways of setting this up, i had originally just created an ApolloClient instance and passed in the\nNetlify functions url as a http link then passed that down to the provider but i was encountering authorization issues,\nwith a helpful message stating that the request lacked authorization headers. The solution was to send the authorization\nalong with a header on every http request.","position":{"start":{"line":462,"column":1,"offset":20033},"end":{"line":465,"column":43,"offset":20433},"indent":[1,1,1]}}],"position":{"start":{"line":462,"column":1,"offset":20033},"end":{"line":465,"column":43,"offset":20433},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lets take a look at what we have here:","position":{"start":{"line":467,"column":1,"offset":20437},"end":{"line":467,"column":39,"offset":20475},"indent":[]}}],"position":{"start":{"line":467,"column":1,"offset":20437},"end":{"line":467,"column":39,"offset":20475},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Created a new http link much the same as we did before when creating our server instance.","position":{"start":{"line":469,"column":3,"offset":20481},"end":{"line":469,"column":92,"offset":20570},"indent":[]}}],"position":{"start":{"line":469,"column":3,"offset":20481},"end":{"line":469,"column":92,"offset":20570},"indent":[]}}],"position":{"start":{"line":469,"column":1,"offset":20479},"end":{"line":469,"column":92,"offset":20570},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create an auth link which returns the headers to the context so the http link can read them. Here we pass in our Fauna\nkey with server rights.","position":{"start":{"line":470,"column":3,"offset":20574},"end":{"line":471,"column":26,"offset":20719},"indent":[3]}}],"position":{"start":{"line":470,"column":3,"offset":20574},"end":{"line":471,"column":26,"offset":20719},"indent":[3]}}],"position":{"start":{"line":470,"column":1,"offset":20572},"end":{"line":471,"column":26,"offset":20719},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Then we create the client to be passed to the provider with the link now set as the auth link.","position":{"start":{"line":472,"column":3,"offset":20723},"end":{"line":472,"column":97,"offset":20817},"indent":[]}}],"position":{"start":{"line":472,"column":3,"offset":20723},"end":{"line":472,"column":97,"offset":20817},"indent":[]}}],"position":{"start":{"line":472,"column":1,"offset":20721},"end":{"line":472,"column":97,"offset":20817},"indent":[]}}],"position":{"start":{"line":469,"column":1,"offset":20479},"end":{"line":472,"column":97,"offset":20817},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have the nuts and bolts all setup we can move onto some frontend code!","position":{"start":{"line":474,"column":1,"offset":20821},"end":{"line":474,"column":83,"offset":20903},"indent":[]}}],"position":{"start":{"line":474,"column":1,"offset":20821},"end":{"line":474,"column":83,"offset":20903},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Make it work then make it pretty!","position":{"start":{"line":476,"column":4,"offset":20910},"end":{"line":476,"column":37,"offset":20943},"indent":[]}}],"position":{"start":{"line":476,"column":1,"offset":20907},"end":{"line":476,"column":37,"offset":20943},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We'll also want to create some base components. We'll be using a Gatsby layout plugin to make life easier for us. We'll\nalso utilize some google fonts via a plugin. Stay with me...","position":{"start":{"line":478,"column":1,"offset":20947},"end":{"line":479,"column":61,"offset":21128},"indent":[1]}}],"position":{"start":{"line":478,"column":1,"offset":20947},"end":{"line":479,"column":61,"offset":21128},"indent":[1]}},{"type":"code","lang":"bash","meta":null,"value":"    mkdir -p src/layouts/index.js\n    cd src/components && touch header.js\n    cd src/components && touch main.js\n    cd src/components && touch footer.js\n    yarn add gatsby-plugin-layout\n    yarn add gatsby-plugin-google-fonts","position":{"start":{"line":481,"column":1,"offset":21132},"end":{"line":488,"column":4,"offset":21379},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we need to add the theme-ui, layout and google fonts plugins to our gatsby-config.js file:","position":{"start":{"line":490,"column":1,"offset":21383},"end":{"line":490,"column":95,"offset":21477},"indent":[]}}],"position":{"start":{"line":490,"column":1,"offset":21383},"end":{"line":490,"column":95,"offset":21477},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"module.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-plugin-google-fonts\",\n      options: {\n        fonts: [\"Muli\", \"Open Sans\", \"source sans pro:300,400,400i,700\"]\n      }\n    },\n    {\n      resolve: \"gatsby-plugin-layout\",\n      options: {\n        component: require.resolve(\"./src/layouts/index.js\")\n      }\n    },\n    \"gatsby-plugin-theme-ui\"\n  ]\n};","position":{"start":{"line":492,"column":1,"offset":21481},"end":{"line":510,"column":4,"offset":21870},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We'll begin with our global layout. This will include a css reset and render our header component and any children,\nwhich in our case is the rest of the applications pages/components.","position":{"start":{"line":512,"column":1,"offset":21874},"end":{"line":513,"column":68,"offset":22058},"indent":[1]}}],"position":{"start":{"line":512,"column":1,"offset":21874},"end":{"line":513,"column":68,"offset":22058},"indent":[1]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { Global, css } from \"@emotion/core\";\nimport Header from \"./../components/site/header\";\n\nconst Layout = ({ children, location }) => {\n  return (\n    <>\n      <Global\n        styles={css`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            scroll-behavior: smooth;\n\n            /* width */\n            ::-webkit-scrollbar {\n              width: 10px;\n            }\n\n            /* Track */\n            ::-webkit-scrollbar-track {\n              background: #fff;\n              border-radius: 20px;\n            }\n\n            /* Handle */\n            ::-webkit-scrollbar-thumb {\n              background: #000;\n              border-radius: 20px;\n            }\n\n            /* Handle on hover */\n            ::-webkit-scrollbar-thumb:hover {\n              background: #000;\n            }\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n            height: 100%;\n          }\n        `}\n      />\n      <Header location={location} />\n      {children}\n    </>\n  );\n};\n\nexport default Layout;","position":{"start":{"line":515,"column":1,"offset":22062},"end":{"line":572,"column":4,"offset":23406},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Because we are using gatsby-plugin-layout our layout component will be wrapped around all of our pages so that we can\nskip importing it ourselves. For our site its a trivial step as we could just as easily import it but for more complex\nlayout solutions this can come in real handy.","position":{"start":{"line":574,"column":1,"offset":23410},"end":{"line":576,"column":46,"offset":23694},"indent":[1,1]}}],"position":{"start":{"line":574,"column":1,"offset":23410},"end":{"line":576,"column":46,"offset":23694},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To provide an easy way to style our whole site through changing just a few variables we can utilize\ngatsby-plugin-theme-ui.","position":{"start":{"line":578,"column":1,"offset":23698},"end":{"line":579,"column":24,"offset":23822},"indent":[1]}}],"position":{"start":{"line":578,"column":1,"offset":23698},"end":{"line":579,"column":24,"offset":23822},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"This article wont cover the specifics of how to use theme-ui, for that i suggest going over another tutorial i have\nwritten which covers the hows and whys\n","position":{"start":{"line":581,"column":1,"offset":23826},"end":{"line":583,"column":1,"offset":23983},"indent":[1,1]}},{"type":"link","title":null,"url":"https://richardhaines.dev/how-to-make-a-gatsby-ecommerce-theme-part-1/","children":[{"type":"text","value":"how-to-make-a-gatsby-ecommerce-theme-part-1/","position":{"start":{"line":583,"column":2,"offset":23984},"end":{"line":583,"column":46,"offset":24028},"indent":[]}}],"position":{"start":{"line":583,"column":1,"offset":23983},"end":{"line":583,"column":119,"offset":24101},"indent":[]}}],"position":{"start":{"line":581,"column":1,"offset":23826},"end":{"line":583,"column":119,"offset":24101},"indent":[1,1]}},{"type":"code","lang":"bash","meta":null,"value":"    cd src && mkdir gatsby-plugin-theme-ui && touch index.js","position":{"start":{"line":585,"column":1,"offset":24105},"end":{"line":587,"column":4,"offset":24179},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In this file we will create our sites styles which we will be able to access via the\n","position":{"start":{"line":589,"column":1,"offset":24183},"end":{"line":590,"column":1,"offset":24269},"indent":[1]}},{"type":"link","title":null,"url":"https://theme-ui.com/sx-prop/","children":[{"type":"text","value":"theme-ui sx prop","position":{"start":{"line":590,"column":2,"offset":24270},"end":{"line":590,"column":18,"offset":24286},"indent":[]}}],"position":{"start":{"line":590,"column":1,"offset":24269},"end":{"line":590,"column":50,"offset":24318},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":590,"column":50,"offset":24318},"end":{"line":590,"column":51,"offset":24319},"indent":[]}}],"position":{"start":{"line":589,"column":1,"offset":24183},"end":{"line":590,"column":51,"offset":24319},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"export default {\n  fonts: {\n    body: \"Open Sans\",\n    heading: \"Muli\"\n  },\n  fontWeights: {\n    body: 300,\n    heading: 400,\n    bold: 700\n  },\n  lineHeights: {\n    body: \"110%\",\n    heading: 1.125,\n    tagline: \"100px\"\n  },\n  letterSpacing: {\n    body: \"2px\",\n    text: \"5px\"\n  },\n  colors: {\n    text: \"#FFFfff\",\n    background: \"#121212\",\n    primary: \"#000010\",\n    secondary: \"#E7E7E9\",\n    secondaryDarker: \"#545455\",\n    accent: \"#DE3C4B\"\n  },\n  breakpoints: [\"40em\", \"56em\", \"64em\"]\n};","position":{"start":{"line":592,"column":1,"offset":24323},"end":{"line":622,"column":4,"offset":24857},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Much of this is self explanatory, the breakpoints array is used to allow us to add responsive definitions to our inline\nstyles via the sx prop. For example:","position":{"start":{"line":624,"column":1,"offset":24861},"end":{"line":625,"column":37,"offset":25018},"indent":[1]}}],"position":{"start":{"line":624,"column":1,"offset":24861},"end":{"line":625,"column":37,"offset":25018},"indent":[1]}},{"type":"code","lang":"jsx","meta":null,"value":"<p\n  sx={{\n    fontSize: [\"0.7em\", \"0.8em\", \"1em\"]\n  }}\n>\n  Some text here...\n</p>","position":{"start":{"line":627,"column":1,"offset":25022},"end":{"line":635,"column":4,"offset":25123},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The font size array indexes corresponded to our breakpoints array set in our theme-ui index file. Next we'll create our\nheader component. But before we do we must install another package, i'll explain why once you see the component.","position":{"start":{"line":637,"column":1,"offset":25127},"end":{"line":638,"column":113,"offset":25360},"indent":[1]}}],"position":{"start":{"line":637,"column":1,"offset":25127},"end":{"line":638,"column":113,"offset":25360},"indent":[1]}},{"type":"code","lang":"bash","meta":null,"value":"    yarn add @emotion/styled\n    cd src/components\n    mkdir site && touch header.js","position":{"start":{"line":640,"column":1,"offset":25364},"end":{"line":644,"column":4,"offset":25464},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"header.js","position":{"start":{"line":646,"column":3,"offset":25470},"end":{"line":646,"column":12,"offset":25479},"indent":[]}}],"position":{"start":{"line":646,"column":1,"offset":25468},"end":{"line":646,"column":14,"offset":25481},"indent":[]}}],"position":{"start":{"line":646,"column":1,"offset":25468},"end":{"line":646,"column":14,"offset":25481},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport HarryPotterLogo from \"../../assets/svg-silhouette-harry-potter-4-transparent.svg.svg\";\nimport { Link } from \"gatsby\";\nimport styled from \"@emotion/styled\";\n\nconst PageLink = styled(Link)`\n  color: #fff;\n\n  &:hover {\n    background-image: linear-gradient(\n      90deg,\n      rgba(127, 9, 9, 1) 0%,\n      rgba(255, 197, 0, 1) 12%,\n      rgba(238, 225, 23, 1) 24%\n    );\n    background-size: 100%;\n    background-repeat: repeat;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    font-weight: bold;\n  }\n`;\n\nconst Header = ({ location }) => {\n  return (\n    <section\n      sx={{\n        gridArea: \"header\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        width: \"100%\",\n        height: \"100%\",\n        display: location.pathname === \"/\" ? \"none\" : \"flex\"\n      }}\n    >\n      <Link to=\"/\">\n        <HarryPotterLogo\n          sx={{\n            height: \"100px\",\n            width: \"100px\",\n            padding: \"1em\"\n          }}\n        />\n      </Link>\n\n      <PageLink\n        sx={{\n          fontFamily: \"heading\",\n          fontSize: \"2em\",\n          color: \"white\",\n          marginRight: \"2em\"\n        }}\n        to=\"/houses\"\n      >\n        houses\n      </PageLink>\n      <PageLink\n        sx={{\n          fontFamily: \"heading\",\n          fontSize: \"2em\",\n          color: \"white\"\n        }}\n        to=\"/spells\"\n      >\n        Spells\n      </PageLink>\n    </section>\n  );\n};\n\nexport default Header;","position":{"start":{"line":648,"column":1,"offset":25485},"end":{"line":721,"column":4,"offset":27084},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lets understand our imports first.","position":{"start":{"line":723,"column":1,"offset":27088},"end":{"line":723,"column":35,"offset":27122},"indent":[]}}],"position":{"start":{"line":723,"column":1,"offset":27088},"end":{"line":723,"column":35,"offset":27122},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We have imported and used the jsx pragma from theme-ui to allow to to style our elements and components inline with\nthe object syntax","position":{"start":{"line":725,"column":3,"offset":27128},"end":{"line":726,"column":20,"offset":27264},"indent":[3]}}],"position":{"start":{"line":725,"column":3,"offset":27128},"end":{"line":726,"column":20,"offset":27264},"indent":[3]}}],"position":{"start":{"line":725,"column":1,"offset":27126},"end":{"line":726,"column":20,"offset":27264},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The HarryPotterLogo is a logo i found via google which was placed in a folder named assets inside of our src folder.\nIts an svg which we alter the height and width of using the sx prop.","position":{"start":{"line":727,"column":3,"offset":27268},"end":{"line":728,"column":71,"offset":27456},"indent":[3]}}],"position":{"start":{"line":727,"column":3,"offset":27268},"end":{"line":728,"column":71,"offset":27456},"indent":[3]}}],"position":{"start":{"line":727,"column":1,"offset":27266},"end":{"line":728,"column":71,"offset":27456},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Gatsby link is needed for us to navigate between pages in our site.","position":{"start":{"line":729,"column":3,"offset":27460},"end":{"line":729,"column":70,"offset":27527},"indent":[]}}],"position":{"start":{"line":729,"column":3,"offset":27460},"end":{"line":729,"column":70,"offset":27527},"indent":[]}}],"position":{"start":{"line":729,"column":1,"offset":27458},"end":{"line":729,"column":70,"offset":27527},"indent":[]}}],"position":{"start":{"line":725,"column":1,"offset":27126},"end":{"line":729,"column":70,"offset":27527},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You may be wondering why we have installed emotion/styled when we could just use the sx prop, like we have done else\nwhere... Well the answer lies in the affect we are using on the page links.","position":{"start":{"line":731,"column":1,"offset":27531},"end":{"line":732,"column":76,"offset":27724},"indent":[1]}}],"position":{"start":{"line":731,"column":1,"offset":27531},"end":{"line":732,"column":76,"offset":27724},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The sx prop doesn’t seem to have access to, or i should say perhaps that its doesn't have in its definitions, the\n-webkit-background-clip property which we are using to add a cool linear-gradient affect on hover. For this reason we\nhave pulled the logic our into a new component called PageLink which is a styled Gatsby Link. With styled components we\ncan use regular css syntax and as such have access to the -webkit-background-clip property.","position":{"start":{"line":734,"column":1,"offset":27728},"end":{"line":737,"column":92,"offset":28174},"indent":[1,1,1]}}],"position":{"start":{"line":734,"column":1,"offset":27728},"end":{"line":737,"column":92,"offset":28174},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The header component is taking the location prop provided by @reach/router which Gatsby uses under the hood for its\nrouting. This is used to determine which page we are on. Due to the fact that we have a different layout for our main\nhome page and the rest of the site we simply use the location object to check if we are on the home page, if we are we\nset a display none to hide the header component.","position":{"start":{"line":739,"column":1,"offset":28178},"end":{"line":742,"column":49,"offset":28582},"indent":[1,1,1]}}],"position":{"start":{"line":739,"column":1,"offset":28178},"end":{"line":742,"column":49,"offset":28582},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The last thing we need to do is set our grid areas which we will be using in later pages. This is just my preferred way\nof doing it, but i like the separation. Create a new folder inside of src called window and add an index.js file.","position":{"start":{"line":744,"column":1,"offset":28586},"end":{"line":745,"column":114,"offset":28820},"indent":[1]}}],"position":{"start":{"line":744,"column":1,"offset":28586},"end":{"line":745,"column":114,"offset":28820},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"export const HousesSpellsPhoneTemplateAreas = `\n    'header'\n    'main'\n    'main'\n    `;\n\nexport const HousesSpellsTabletTemplateAreas = `\n    'header    header        header   header'\n    'main    main        main   main'\n    `;\n\nexport const HousesSpellsDesktopTemplateAreas = `\n    'header    header        header   header'\n    'main    main        main   main'\n    `;\n\nexport const HomePhoneTemplateAreas = `\n    'logo'\n    'logo'\n    'logo'\n    'author'\n    'author'\n    'author'\n    'author'\n    `;\n\nexport const HomeTabletTemplateAreas = `\n    'logo       .           .     '\n    'logo       author      author'\n    'logo       author      author'\n    '.          .           .     '\n    `;\n\nexport const HomeDesktopTemplateAreas = `\n    'logo       .           .     '\n    'logo       author      author'\n    'logo       author      author'\n    '.          .           .     '\n    `;","position":{"start":{"line":747,"column":1,"offset":28824},"end":{"line":787,"column":4,"offset":29766},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Cool, now we have our global layout complete, lets move onto our home page. Open up the index.js file inside of\nsrc/pages and add the following:","position":{"start":{"line":789,"column":1,"offset":29770},"end":{"line":790,"column":33,"offset":29915},"indent":[1]}}],"position":{"start":{"line":789,"column":1,"offset":29770},"end":{"line":790,"column":33,"offset":29915},"indent":[1]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { HomePhoneTemplateAreas, HomeTabletTemplateAreas, HomeDesktopTemplateAreas } from \"./../window/index\";\nimport LogoSection from \"./../components/site/logo-section\";\nimport AuthorSection from \"../components/site/author-section\";\n\nexport default () => {\n  return (\n    <div\n      sx={{\n        width: \"100%\",\n        height: \"100%\",\n        maxWidth: \"1200px\",\n        margin: \"1em\"\n      }}\n    >\n      <div\n        sx={{\n          display: \"grid\",\n          gridTemplateColumns: [\"1fr\", \"500px 1fr\", \"500px 1fr\"],\n          gridAutoRows: \"100px 1fr\",\n          gridTemplateAreas: [HomePhoneTemplateAreas, HomeTabletTemplateAreas, HomeDesktopTemplateAreas],\n          width: \"100%\",\n          height: \"100vh\",\n          background: \"#1E2224\",\n          maxWidth: \"1200px\"\n        }}\n      >\n        <LogoSection />\n        <AuthorSection />\n      </div>\n    </div>\n  );\n};","position":{"start":{"line":792,"column":1,"offset":29919},"end":{"line":828,"column":4,"offset":30919},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is the first page our visitors will see. We are using a grid to compose our layout of the page and utilizing the\nresponsive array syntax in our grid-template-columns and areas properties. To recap how this works we can take a closer\nlook at the gridTemplateAreas property and see that the first index is for phone (or mobile if you will) with the second\nbeing tablet and the third desktop. We could add more if we so wished but these will suffice for our needs.","position":{"start":{"line":830,"column":1,"offset":30923},"end":{"line":833,"column":108,"offset":31392},"indent":[1,1,1]}}],"position":{"start":{"line":830,"column":1,"offset":30923},"end":{"line":833,"column":108,"offset":31392},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lets move on to creating our logo section. In src/components/site create two new files called logo.js and\nlogo-section.js","position":{"start":{"line":835,"column":1,"offset":31396},"end":{"line":836,"column":16,"offset":31518},"indent":[1]}}],"position":{"start":{"line":835,"column":1,"offset":31396},"end":{"line":836,"column":16,"offset":31518},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"logo.js","position":{"start":{"line":838,"column":3,"offset":31524},"end":{"line":838,"column":10,"offset":31531},"indent":[]}}],"position":{"start":{"line":838,"column":1,"offset":31522},"end":{"line":838,"column":12,"offset":31533},"indent":[]}}],"position":{"start":{"line":838,"column":1,"offset":31522},"end":{"line":838,"column":12,"offset":31533},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport HarryPotterLogo from \"../assets/svg-silhouette-harry-potter-4-transparent.svg.svg\";\nexport const Logo = () => (\n  <HarryPotterLogo\n    sx={{\n      height: [\"200px\", \"300px\", \"500px\"],\n      width: [\"200px\", \"300px\", \"500px\"],\n      padding: \"1em\",\n      position: \"relative\"\n    }}\n  />\n);","position":{"start":{"line":840,"column":1,"offset":31537},"end":{"line":854,"column":4,"offset":31906},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our logo is the Harry Potter svg mentioned earlier. You can of course choose whatever you like as your sites logo. This\none is merely “HR” in a fancy font.","position":{"start":{"line":856,"column":1,"offset":31910},"end":{"line":857,"column":36,"offset":32066},"indent":[1]}}],"position":{"start":{"line":856,"column":1,"offset":31910},"end":{"line":857,"column":36,"offset":32066},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"logo-section.js","position":{"start":{"line":859,"column":3,"offset":32072},"end":{"line":859,"column":18,"offset":32087},"indent":[]}}],"position":{"start":{"line":859,"column":1,"offset":32070},"end":{"line":859,"column":20,"offset":32089},"indent":[]}}],"position":{"start":{"line":859,"column":1,"offset":32070},"end":{"line":859,"column":20,"offset":32089},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { Logo } from \"../logo\";\nconst LogoSection = () => {\n  return (\n    <section\n      sx={{\n        gridArea: \"logo\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: [\"start\", \"center\", \"center\"],\n        position: \"relative\",\n        width: \"100%\"\n      }}\n    >\n      <Logo />\n    </section>\n  );\n};\nexport default LogoSection;","position":{"start":{"line":861,"column":1,"offset":32093},"end":{"line":882,"column":4,"offset":32537},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next up is our author section which will site next to our logo section Create a new file inside of src/components/site\ncalled author-section.js","position":{"start":{"line":884,"column":1,"offset":32541},"end":{"line":885,"column":25,"offset":32685},"indent":[1]}}],"position":{"start":{"line":884,"column":1,"offset":32541},"end":{"line":885,"column":25,"offset":32685},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"author-section.js","position":{"start":{"line":887,"column":3,"offset":32691},"end":{"line":887,"column":20,"offset":32708},"indent":[]}}],"position":{"start":{"line":887,"column":1,"offset":32689},"end":{"line":887,"column":22,"offset":32710},"indent":[]}}],"position":{"start":{"line":887,"column":1,"offset":32689},"end":{"line":887,"column":22,"offset":32710},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { Link } from \"gatsby\";\nimport { houseEmoji, spellsEmoji } from \"./../../helpers/helpers\";\nimport styled from \"@emotion/styled\";\nimport { wizardEmoji } from \"./../../helpers/helpers\";\n\nconst InternalLink = styled(Link)`\n  color: #fff;\n  &:hover {\n    background-image: linear-gradient(\n      90deg,\n      rgba(127, 9, 9, 1) 0%,\n      rgba(255, 197, 0, 1) 12%,\n      rgba(238, 225, 23, 1) 24%\n    );\n    background-size: 100%;\n    background-repeat: repeat;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    font-weight: bold;\n  }\n`;\n\nconst ExternalLink = styled.a`\n  color: #fff;\n  &:hover {\n    background-image: linear-gradient(\n      90deg,\n      rgba(127, 9, 9, 1) 0%,\n      rgba(255, 197, 0, 1) 12%,\n      rgba(238, 225, 23, 1) 24%,\n      rgba(0, 0, 0, 1) 36%,\n      rgba(13, 98, 23, 1) 48%,\n      rgba(170, 170, 170, 1) 60%,\n      rgba(0, 10, 144, 1) 72%,\n      rgba(148, 119, 45, 1) 84%\n    );\n    background-size: 100%;\n    background-repeat: repeat;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    font-weight: bold;\n  }\n`;\n\nconst AuthorSection = () => {\n  return (\n    <section\n      sx={{\n        gridArea: \"author\",\n        position: \"relative\",\n        margin: \"0 auto\"\n      }}\n    >\n      <h1\n        sx={{\n          fontFamily: \"heading\",\n          color: \"white\",\n          letterSpacing: \"text\",\n          fontSize: [\"3em\", \"3em\", \"5em\"]\n        }}\n      >\n        Serverless Potter\n      </h1>\n      <div\n        sx={{\n          display: \"flex\",\n          justifyContent: \"start\",\n          alignItems: \"flex-start\",\n          width: \"300px\",\n          marginTop: \"3em\"\n        }}\n      >\n        <InternalLink\n          sx={{\n            fontFamily: \"heading\",\n            fontSize: \"2.5em\",\n            // color: 'white',\n            marginRight: \"2em\"\n          }}\n          to=\"/houses\"\n        >\n          Houses\n        </InternalLink>\n        <InternalLink\n          sx={{\n            fontFamily: \"heading\",\n            fontSize: \"2.5em\",\n            color: \"white\"\n          }}\n          to=\"/spells\"\n        >\n          Spells\n        </InternalLink>\n      </div>\n      <p\n        sx={{\n          fontFamily: \"heading\",\n          letterSpacing: \"body\",\n          fontSize: \"2em\",\n          color: \"white\",\n          marginTop: \"2em\",\n          width: [\"300px\", \"500px\", \"900px\"]\n        }}\n      >\n        This is a site that goes with the tutorial on creating a jamstack site with serverless functions and FaunaDB I\n        decided to use the potter api as i love the world of harry potter {wizardEmoji}\n      </p>\n      <p\n        sx={{\n          fontFamily: \"heading\",\n          letterSpacing: \"body\",\n          fontSize: \"2em\",\n          color: \"white\",\n          marginTop: \"1em\",\n          width: [\"300px\", \"500px\", \"900px\"]\n        }}\n      >\n        Built with Gatsby, Netlify functions, Apollo and FaunaDB. Data provided via the Potter API.\n      </p>\n      <p\n        sx={{\n          fontFamily: \"heading\",\n          letterSpacing: \"body\",\n          fontSize: \"2em\",\n          color: \"white\",\n          marginTop: \"1em\",\n          width: [\"300px\", \"500px\", \"900px\"]\n        }}\n      >\n        Select <strong>Houses</strong> or <strong>Spells</strong> to begin exploring potter stats!\n      </p>\n      <div\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\"\n        }}\n      >\n        <ExternalLink\n          sx={{\n            fontFamily: \"heading\",\n            letterSpacing: \"body\",\n            fontSize: \"2em\",\n            color: \"white\",\n            marginTop: \"1em\",\n            width: [\"300px\", \"500px\", \"900px\"]\n          }}\n          href=\"your-personal-website\"\n        >\n          author: your name here!\n        </ExternalLink>\n        <ExternalLink\n          sx={{\n            fontFamily: \"heading\",\n            letterSpacing: \"body\",\n            fontSize: \"2em\",\n            color: \"white\",\n            marginTop: \"1em\",\n            width: \"900px\"\n          }}\n          href=\"your-github-repo-for-this-project\"\n        >\n          github: the name you gave this project\n        </ExternalLink>\n      </div>\n    </section>\n  );\n};\nexport default AuthorSection;","position":{"start":{"line":889,"column":1,"offset":32714},"end":{"line":1060,"column":4,"offset":37149},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This component outlines what the project is, displays links to the other pages and the projects repository. You can\nchange the text I’ve added, this was just for demo purposes. As you can see, we are again using emotion/styled as we are\nmaking use of the -webkit-background-clip property on our cool linear-gradient links. We have two here, one for external\nlinks, which uses the a tag, and another for internal link which uses Gatsby Link. Note that you should always use the\ntraditional HTML a tag for external links and the Gatsby Link to configure your internal routing.","position":{"start":{"line":1062,"column":1,"offset":37153},"end":{"line":1066,"column":98,"offset":37731},"indent":[1,1,1,1]}}],"position":{"start":{"line":1062,"column":1,"offset":37153},"end":{"line":1066,"column":98,"offset":37731},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You may also notice that there is an import from a helper file what exports some emojis. Lets take a look at that.\nCreate a new folder inside of src.","position":{"start":{"line":1068,"column":1,"offset":37735},"end":{"line":1069,"column":35,"offset":37885},"indent":[1]}}],"position":{"start":{"line":1068,"column":1,"offset":37735},"end":{"line":1069,"column":35,"offset":37885},"indent":[1]}},{"type":"code","lang":"bash","meta":null,"value":"    cd src\n    mkdir helpers && touch helpers.js","position":{"start":{"line":1071,"column":1,"offset":37889},"end":{"line":1074,"column":4,"offset":37952},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"helpers.js","position":{"start":{"line":1076,"column":3,"offset":37958},"end":{"line":1076,"column":13,"offset":37968},"indent":[]}}],"position":{"start":{"line":1076,"column":1,"offset":37956},"end":{"line":1076,"column":15,"offset":37970},"indent":[]}}],"position":{"start":{"line":1076,"column":1,"offset":37956},"end":{"line":1076,"column":15,"offset":37970},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export const gryffindorColors = \"linear-gradient(90deg, rgba(127,9,9,1) 27%, rgba(255,197,0,1) 61%)\";\nexport const hufflepuffColors = \"linear-gradient(90deg, rgba(238,225,23,1) 35%, rgba(0,0,0,1) 93%)\";\nexport const slytherinColors = \"linear-gradient(90deg, rgba(13,98,23,1) 32%, rgba(170,170,170,1) 69%)\";\nexport const ravenclawColors = \"linear-gradient(90deg, rgba(0,10,144,1) 32%, rgba(148,107,45,1) 69%)\";\n\nexport const houseEmoji = `🏡`;\nexport const spellsEmoji = `💫`;\nexport const wandEmoji = `💫`;\nexport const patronusEmoji = `✨`;\nexport const deathEaterEmoji = `🐍`;\nexport const dumbledoresArmyEmoji = `⚔️`;\nexport const roleEmoji = `📖`;\nexport const bloodStatusEmoji = `🧙🏾‍♀️ 🤵🏾`;\nexport const orderOfThePheonixEmoji = `🦄`;\nexport const ministryOfMagicEmoji = `📜`;\nexport const boggartEmoji = `🕯`;\nexport const aliasEmoji = `👨🏼‍🎤`;\nexport const wizardEmoji = `🧙🏼‍♂️`;\nexport const gryffindorEmoji = `🦁`;\nexport const hufflepuffEmoji = `🦡`;\nexport const slytherinEmoji = `🐍`;\nexport const ravenclawEmoji = `🦅`;\n\nexport function checkNull(value) {\n  return value !== null ? value : \"unknown\";\n}\nexport function checkDeathEater(value) {\n  if (value === false) {\n    return \"no\";\n  }\n  return \"undoubtedly\";\n}\nexport function checkDumbledoresArmy(value) {\n  if (value === false) {\n    return \"no\";\n  }\n  return `undoubtedly ${wizardEmoji}`;\n}","position":{"start":{"line":1078,"column":1,"offset":37974},"end":{"line":1117,"column":4,"offset":39391},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The emojis were taken from a really cool site called ","position":{"start":{"line":1119,"column":1,"offset":39395},"end":{"line":1119,"column":54,"offset":39448},"indent":[]}},{"type":"link","title":null,"url":"https://beautifuldingbats.com/emoji-clipboard/","children":[{"type":"text","value":"Emoji Clipboard","position":{"start":{"line":1119,"column":55,"offset":39449},"end":{"line":1119,"column":70,"offset":39464},"indent":[]}}],"position":{"start":{"line":1119,"column":54,"offset":39448},"end":{"line":1119,"column":119,"offset":39513},"indent":[]}},{"type":"text","value":",\nit lets you search and literally copy paste the emojis! We’ll be using these emojis in our cards to display the\ncharacters from Harry Potter. As well as the emojis we have some utility functions that will also be used in the cards.\nEach house in Harry Potter has a set of colors that sets them apart form the other houses. These we have exported as\nlinear-gradients for later use.","position":{"start":{"line":1119,"column":119,"offset":39513},"end":{"line":1123,"column":32,"offset":39899},"indent":[1,1,1,1]}}],"position":{"start":{"line":1119,"column":1,"offset":39395},"end":{"line":1123,"column":32,"offset":39899},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Nice! We are nearly there but we haven’t quite finished yet! Next we will use our data and display it to the user of our\nsite!","position":{"start":{"line":1125,"column":1,"offset":39903},"end":{"line":1126,"column":6,"offset":40030},"indent":[1]}}],"position":{"start":{"line":1125,"column":1,"offset":39903},"end":{"line":1126,"column":6,"offset":40030},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"We have done quite a bit of setup but haven’t yet had a chance to use our data that we have saved in our Fauna database.\nNow’s the time to bring in Apollo and put together a page that shows all the characters data for each house. We are also\ngoing to implement a simple searchbar to allow the user to search the characters of each house!","position":{"start":{"line":1128,"column":1,"offset":40034},"end":{"line":1130,"column":96,"offset":40373},"indent":[1,1]}}],"position":{"start":{"line":1128,"column":1,"offset":40034},"end":{"line":1130,"column":96,"offset":40373},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Inside src/pages create a new file called houses.js and add the following:","position":{"start":{"line":1132,"column":1,"offset":40377},"end":{"line":1132,"column":75,"offset":40451},"indent":[]}}],"position":{"start":{"line":1132,"column":1,"offset":40377},"end":{"line":1132,"column":75,"offset":40451},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"houses.js","position":{"start":{"line":1134,"column":3,"offset":40457},"end":{"line":1134,"column":12,"offset":40466},"indent":[]}}],"position":{"start":{"line":1134,"column":1,"offset":40455},"end":{"line":1134,"column":14,"offset":40468},"indent":[]}}],"position":{"start":{"line":1134,"column":1,"offset":40455},"end":{"line":1134,"column":14,"offset":40468},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport MainSection from \"./../components/site/main-section\";\nimport { HousesPhoneTemplateAreas, HousesTabletTemplateAreas, HousesDesktopTemplateAreas } from \"../window\";\n\nconst GET_CHARACTERS = gql`\n  query GetCharacters {\n    allCharacters {\n      data {\n        _id\n        name\n        house\n        patronus\n        bloodStatus\n        role\n        school\n        deathEater\n        dumbledoresArmy\n        orderOfThePheonix\n        ministryOfMagic\n        alias\n        wand\n        boggart\n        animagus\n      }\n    }\n  }\n`;\n\nconst Houses = () => {\n  const { loading: characterLoading, error: characterError, data: characterData } = useQuery(GET_CHARACTERS);\n  const [selectedHouse, setSelectedHouse] = React.useState([]);\n\n  React.useEffect(() => {\n    const gryffindor =\n      !characterLoading &&\n      !characterError &&\n      characterData.allCharacters.data.filter(char => char.house === \"Gryffindor\");\n    setSelectedHouse(gryffindor);\n  }, [characterLoading, characterData]);\n\n  const getHouse = house => {\n    switch (house) {\n      case \"gryffindor\":\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Gryffindor\")\n        );\n        break;\n      case \"hufflepuff\":\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Hufflepuff\")\n        );\n        break;\n      case \"slytherin\":\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Slytherin\")\n        );\n        break;\n      case \"ravenclaw\":\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Ravenclaw\")\n        );\n        break;\n      default:\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Gryffindor\")\n        );\n        break;\n    }\n  };\n  return (\n    <div\n      sx={{\n        gridArea: \"main\",\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(250px, auto))\",\n        gridAutoRows: \"auto\",\n        gridTemplateAreas: [\n          HousesSpellsPhoneTemplateAreas,\n          HousesSpellsTabletTemplateAreas,\n          HousesSpellsDesktopTemplateAreas\n        ],\n        width: \"100%\",\n        height: \"100%\",\n        position: \"relative\"\n      }}\n    >\n      <MainSection house={selectedHouse} getHouse={getHouse} />\n    </div>\n  );\n};\nexport default Houses;","position":{"start":{"line":1136,"column":1,"offset":40472},"end":{"line":1241,"column":4,"offset":43440},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We are using @apollo/client from which we import gql to construct our graphql query and the useQuery hook which will\ntake care of handling the state of the returned data for us. This handy hook returns three states:","position":{"start":{"line":1243,"column":1,"offset":43444},"end":{"line":1244,"column":99,"offset":43660},"indent":[1]}}],"position":{"start":{"line":1243,"column":1,"offset":43444},"end":{"line":1244,"column":99,"offset":43660},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"loading - Is the data currently loading?","position":{"start":{"line":1246,"column":3,"offset":43666},"end":{"line":1246,"column":43,"offset":43706},"indent":[]}}],"position":{"start":{"line":1246,"column":3,"offset":43666},"end":{"line":1246,"column":43,"offset":43706},"indent":[]}}],"position":{"start":{"line":1246,"column":1,"offset":43664},"end":{"line":1246,"column":43,"offset":43706},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"error - If there was an error we will get it here","position":{"start":{"line":1247,"column":3,"offset":43710},"end":{"line":1247,"column":52,"offset":43759},"indent":[]}}],"position":{"start":{"line":1247,"column":3,"offset":43710},"end":{"line":1247,"column":52,"offset":43759},"indent":[]}}],"position":{"start":{"line":1247,"column":1,"offset":43708},"end":{"line":1247,"column":52,"offset":43759},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"data - The requested data","position":{"start":{"line":1248,"column":3,"offset":43763},"end":{"line":1248,"column":28,"offset":43788},"indent":[]}}],"position":{"start":{"line":1248,"column":3,"offset":43763},"end":{"line":1248,"column":28,"offset":43788},"indent":[]}}],"position":{"start":{"line":1248,"column":1,"offset":43761},"end":{"line":1248,"column":28,"offset":43788},"indent":[]}}],"position":{"start":{"line":1246,"column":1,"offset":43664},"end":{"line":1248,"column":28,"offset":43788},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our page will be handling the currently selected house so we use the React useState hook and initialize it with an empty\narray on first render. There after we use the useEffect hook to set the initial house as Gryffindor (because Gryffindor\nis best. Fight me!) The dependency array takes in the loading and data states.","position":{"start":{"line":1250,"column":1,"offset":43792},"end":{"line":1252,"column":79,"offset":44113},"indent":[1,1]}}],"position":{"start":{"line":1250,"column":1,"offset":43792},"end":{"line":1252,"column":79,"offset":44113},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We then have a function which returns a switch statement (I know not everyone likes these but i do and i find that they\nare simple to read and understand). This function checks the currently selected house and if there are no errors in the\nquery it loads the data from that house into the selected house state array. This function is passed down to another\ncomponent which uses that data to display the house characters in a grid of cards.","position":{"start":{"line":1254,"column":1,"offset":44117},"end":{"line":1257,"column":83,"offset":44559},"indent":[1,1,1]}}],"position":{"start":{"line":1254,"column":1,"offset":44117},"end":{"line":1257,"column":83,"offset":44559},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lets create that component now. Inside src/components/site create a new file called main-section.js","position":{"start":{"line":1259,"column":1,"offset":44563},"end":{"line":1259,"column":100,"offset":44662},"indent":[]}}],"position":{"start":{"line":1259,"column":1,"offset":44563},"end":{"line":1259,"column":100,"offset":44662},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"main-section.js","position":{"start":{"line":1261,"column":3,"offset":44668},"end":{"line":1261,"column":18,"offset":44683},"indent":[]}}],"position":{"start":{"line":1261,"column":1,"offset":44666},"end":{"line":1261,"column":20,"offset":44685},"indent":[]}}],"position":{"start":{"line":1261,"column":1,"offset":44666},"end":{"line":1261,"column":20,"offset":44685},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport Card from \"../cards/card\";\nimport SearchBar from \"./searchbar\";\nimport { useSearchBar } from \"./useSearchbar\";\nimport Loading from \"./loading\";\nimport HouseSection from \"./house-section\";\n\nconst MainSection = React.memo(({ house, getHouse }) => {\n  const { members, handleSearchQuery } = useSearchBar(house);\n\n  return house.length ? (\n    <div\n      sx={{\n        gridArea: \"main\",\n        height: \"100%\",\n        position: \"relative\"\n      }}\n    >\n      <div\n        sx={{\n          color: \"white\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          fontFamily: \"heading\",\n          letterSpacing: \"body\",\n          fontSize: \"2em\",\n          position: \"relative\"\n        }}\n      >\n        <h4>\n          {house[0].house} Members - {house.length}\n        </h4>\n        <SearchBar handleSearchQuery={handleSearchQuery} />\n        <HouseSection getHouse={getHouse} />\n      </div>\n      <section\n        sx={{\n          margin: \"0 auto\",\n          width: \"100%\",\n          display: \"grid\",\n          gridAutoRows: \"auto\",\n          gridTemplateColumns: \"repeat(auto-fill, minmax(auto, 500px))\",\n          gap: \"1.5em\",\n          justifyContent: \"space-evenly\",\n          marginTop: \"1em\",\n          position: \"relative\",\n          height: \"100vh\"\n        }}\n      >\n        {members.map((char, index) => (\n          <Card key={char._id} index={index} {...char} />\n        ))}\n      </section>\n    </div>\n  ) : (\n    <Loading />\n  );\n});\nexport default MainSection;","position":{"start":{"line":1263,"column":1,"offset":44689},"end":{"line":1327,"column":4,"offset":46401},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our main section is wrapped in memo, which means that React will render the component and memorize the result. If the\nnext time the props are passed in and they are the same, React will use the memorized result and skip re-rendering the\ncomponent again. This is helpful as our component will be re-rendering a lot as the user changes houses or uses the\nsearchbar, which will will soon create.","position":{"start":{"line":1329,"column":1,"offset":46405},"end":{"line":1332,"column":40,"offset":46800},"indent":[1,1,1]}}],"position":{"start":{"line":1329,"column":1,"offset":46405},"end":{"line":1332,"column":40,"offset":46800},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In fact, lets do do that now. We will be creating a search bar component and a custom hook to handle the search logic.\nInside src/components/site create two new files. searchbar.js and useSearchbar.js","position":{"start":{"line":1334,"column":1,"offset":46804},"end":{"line":1335,"column":82,"offset":47005},"indent":[1]}}],"position":{"start":{"line":1334,"column":1,"offset":46804},"end":{"line":1335,"column":82,"offset":47005},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"searchbar.js","position":{"start":{"line":1337,"column":3,"offset":47011},"end":{"line":1337,"column":15,"offset":47023},"indent":[]}}],"position":{"start":{"line":1337,"column":1,"offset":47009},"end":{"line":1337,"column":17,"offset":47025},"indent":[]}}],"position":{"start":{"line":1337,"column":1,"offset":47009},"end":{"line":1337,"column":17,"offset":47025},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst SearchBar = ({ handleSearchQuery }) => {\n  return (\n    <div\n      sx={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: \"2em\"\n      }}\n    >\n      <input\n        sx={{\n          color: \"greyBlack\",\n          fontFamily: \"heading\",\n          fontSize: \"0.8em\",\n          fontWeight: \"bold\",\n          letterSpacing: \"body\",\n          border: \"1px solid\",\n          borderColor: \"accent\",\n          width: \"300px\",\n          height: \"50px\",\n          padding: \"0.4em\"\n        }}\n        type=\"text\"\n        id=\"members-searchbar\"\n        placeholder=\"Search members..\"\n        onChange={handleSearchQuery}\n      />\n    </div>\n  );\n};\nexport default SearchBar;","position":{"start":{"line":1339,"column":1,"offset":47029},"end":{"line":1375,"column":4,"offset":47846},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our searchbar takes in a search query function which is called when the input is used. The rest is just styling.","position":{"start":{"line":1377,"column":1,"offset":47850},"end":{"line":1377,"column":113,"offset":47962},"indent":[]}}],"position":{"start":{"line":1377,"column":1,"offset":47850},"end":{"line":1377,"column":113,"offset":47962},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"useSearchbar.js","position":{"start":{"line":1379,"column":3,"offset":47968},"end":{"line":1379,"column":18,"offset":47983},"indent":[]}}],"position":{"start":{"line":1379,"column":1,"offset":47966},"end":{"line":1379,"column":20,"offset":47985},"indent":[]}}],"position":{"start":{"line":1379,"column":1,"offset":47966},"end":{"line":1379,"column":20,"offset":47985},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"import React from \"react\";\nexport const useSearchBar = data => {\n  const emptyQuery = \"\";\n  const [searchQuery, setSearchQuery] = React.useState({\n    filteredData: [],\n    query: emptyQuery\n  });\n\n  const handleSearchQuery = e => {\n    const query = e.target.value;\n    const members = data || [];\n\n    const filteredData = members.filter(member => {\n      return member.name.toLowerCase().includes(query.toLowerCase());\n    });\n\n    setSearchQuery({ filteredData, query });\n  };\n\n  const { filteredData, query } = searchQuery;\n  const hasSearchResult = filteredData && query !== emptyQuery;\n  const members = hasSearchResult ? filteredData : data;\n\n  return { members, handleSearchQuery };\n};","position":{"start":{"line":1381,"column":1,"offset":47989},"end":{"line":1407,"column":4,"offset":48720},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our custom hook takes the selected house data as a prop. It has an internal state which holds an emptyQuery variable\nwhich we set to empty string and a filteredData array, set to empty. The function that runs in our searchbar is the\nfollowing function declared in the hook. It takes the query as an event from the input, checks if the data provided to\nthe hook has data or sets it to an empty array as a new variable called members. It then filters over the members array\nand checks if the query matches one of the characters names. Finally it sets the state with the returned filtered data\nand query.","position":{"start":{"line":1409,"column":1,"offset":48724},"end":{"line":1414,"column":11,"offset":49330},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":1409,"column":1,"offset":48724},"end":{"line":1414,"column":11,"offset":49330},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We structure the state and create a new variable which checks if the state had any data or not. Finally returning the\ndata, be that empty or not and the search function.","position":{"start":{"line":1416,"column":1,"offset":49334},"end":{"line":1417,"column":52,"offset":49504},"indent":[1]}}],"position":{"start":{"line":1416,"column":1,"offset":49334},"end":{"line":1417,"column":52,"offset":49504},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Phew! That was a lot to go over. Going back to our main section we can see that we are importing our new hook and\npassing in the selected house data, then destructing the members and search query function. The component checks if the\nhouse array has any length, if it does it returns the page. The page displays the current house, how many members the\nhouse has, the searchbar (which takes the search query function as a prop), a new house section which we will build and\nmaps over the members returned from our custom hook.","position":{"start":{"line":1419,"column":1,"offset":49508},"end":{"line":1423,"column":53,"offset":50036},"indent":[1,1,1,1]}}],"position":{"start":{"line":1419,"column":1,"offset":49508},"end":{"line":1423,"column":53,"offset":50036},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the house section we will make use of a super amazing library called ","position":{"start":{"line":1425,"column":1,"offset":50040},"end":{"line":1425,"column":73,"offset":50112},"indent":[]}},{"type":"link","title":null,"url":"https://www.framer.com/motion/","children":[{"type":"text","value":"Framer Motion","position":{"start":{"line":1425,"column":74,"offset":50113},"end":{"line":1425,"column":87,"offset":50126},"indent":[]}}],"position":{"start":{"line":1425,"column":73,"offset":50112},"end":{"line":1425,"column":120,"offset":50159},"indent":[]}},{"type":"text","value":".\nLets first see how our new component looks and what it does.","position":{"start":{"line":1425,"column":120,"offset":50159},"end":{"line":1426,"column":61,"offset":50222},"indent":[1]}}],"position":{"start":{"line":1425,"column":1,"offset":50040},"end":{"line":1426,"column":61,"offset":50222},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In src/components/site create a new file called house-section.js","position":{"start":{"line":1428,"column":1,"offset":50226},"end":{"line":1428,"column":65,"offset":50290},"indent":[]}}],"position":{"start":{"line":1428,"column":1,"offset":50226},"end":{"line":1428,"column":65,"offset":50290},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"house-section.js","position":{"start":{"line":1430,"column":3,"offset":50296},"end":{"line":1430,"column":19,"offset":50312},"indent":[]}}],"position":{"start":{"line":1430,"column":1,"offset":50294},"end":{"line":1430,"column":21,"offset":50314},"indent":[]}}],"position":{"start":{"line":1430,"column":1,"offset":50294},"end":{"line":1430,"column":21,"offset":50314},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { gryffindorColors, hufflepuffColors, slytherinColors, ravenclawColors } from \"./../../helpers/helpers\";\nimport styled from \"@emotion/styled\";\nimport { motion } from \"framer-motion\";\n\nconst House = styled.a`\n  color: #fff;\n  &:hover {\n    background-image: ${props => props.house};\n    background-size: 100%;\n    background-repeat: repeat;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    font-weight: bold;\n  }\n`;\n\nconst HouseSection = ({ getHouse }) => {\n  return (\n    <section\n      sx={{\n        width: \"100%\",\n        position: \"relative\"\n      }}\n    >\n      <ul\n        sx={{\n          listStyle: \"none\",\n          cursor: \"crosshair\",\n          fontFamily: \"heading\",\n          fontSize: \"1em\",\n          display: \"flex\",\n          flexDirection: [\"column\", \"row\", \"row\"],\n          alignItems: \"center\",\n          justifyContent: \"space-evenly\",\n          position: \"relative\"\n        }}\n      >\n        <motion.li\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{\n            type: \"spring\",\n            stiffness: 200,\n            damping: 20,\n            delay: 0.2\n          }}\n        >\n          <House onClick={() => getHouse(\"gryffindor\")} house={gryffindorColors}>\n            Gryffindor\n          </House>\n        </motion.li>\n        <motion.li\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{\n            type: \"spring\",\n            stiffness: 200,\n            damping: 20,\n            delay: 0.4\n          }}\n        >\n          <House onClick={() => getHouse(\"hufflepuff\")} house={hufflepuffColors}>\n            Hufflepuff\n          </House>\n        </motion.li>\n        <motion.li\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{\n            type: \"spring\",\n            stiffness: 200,\n            damping: 20,\n            delay: 0.6\n          }}\n        >\n          <House onClick={() => getHouse(\"slytherin\")} house={slytherinColors}>\n            Slytherin\n          </House>\n        </motion.li>\n        <motion.li\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{\n            type: \"spring\",\n            stiffness: 200,\n            damping: 20,\n            delay: 0.8\n          }}\n        >\n          <House onClick={() => getHouse(\"ravenclaw\")} house={ravenclawColors}>\n            Ravenclaw\n          </House>\n        </motion.li>\n      </ul>\n    </section>\n  );\n};\nexport default HouseSection;","position":{"start":{"line":1432,"column":1,"offset":50318},"end":{"line":1533,"column":4,"offset":53004},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The purpose of this component is to show the user the four houses of Hogwarts, let them select a house and pass that\nselection back up to the main-section state. The component takes the getHouse function from main-section as a prop. We\nhave created an internal link styled component , which takes each houses colours from our helper file, and returns the\nselected house on click.","position":{"start":{"line":1535,"column":1,"offset":53008},"end":{"line":1538,"column":25,"offset":53390},"indent":[1,1,1]}}],"position":{"start":{"line":1535,"column":1,"offset":53008},"end":{"line":1538,"column":25,"offset":53390},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using framer motion we prepend each li with the motion tag. This allows us to add a simple scale animation by setting\nthe initial value 0 (so it’s not visible), using the animate prop we say that it should animate in to it’s set size. The\ntransition is specifying how the animation will work.","position":{"start":{"line":1540,"column":1,"offset":53394},"end":{"line":1542,"column":54,"offset":53688},"indent":[1,1]}}],"position":{"start":{"line":1540,"column":1,"offset":53394},"end":{"line":1542,"column":54,"offset":53688},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Back to the main-section component, we map over each member in the house and display their data in a Card component by\nspreading all the character data. Lets create that now.","position":{"start":{"line":1544,"column":1,"offset":53692},"end":{"line":1545,"column":56,"offset":53867},"indent":[1]}}],"position":{"start":{"line":1544,"column":1,"offset":53692},"end":{"line":1545,"column":56,"offset":53867},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Inside src/components/site create a new file called card.js","position":{"start":{"line":1547,"column":1,"offset":53871},"end":{"line":1547,"column":60,"offset":53930},"indent":[]}}],"position":{"start":{"line":1547,"column":1,"offset":53871},"end":{"line":1547,"column":60,"offset":53930},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"card.js","position":{"start":{"line":1549,"column":3,"offset":53936},"end":{"line":1549,"column":10,"offset":53943},"indent":[]}}],"position":{"start":{"line":1549,"column":1,"offset":53934},"end":{"line":1549,"column":12,"offset":53945},"indent":[]}}],"position":{"start":{"line":1549,"column":1,"offset":53934},"end":{"line":1549,"column":12,"offset":53945},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport {\n  checkNull,\n  checkDeathEater,\n  checkDumbledoresArmy,\n  hufflepuffColors,\n  ravenclawColors,\n  gryffindorColors,\n  slytherinColors,\n  houseEmoji,\n  wandEmoji,\n  patronusEmoji,\n  bloodStatusEmoji,\n  ministryOfMagicEmoji,\n  boggartEmoji,\n  roleEmoji,\n  orderOfThePheonixEmoji,\n  deathEaterEmoji,\n  dumbledoresArmyEmoji,\n  aliasEmoji\n} from \"./../../helpers/helpers\";\nimport { motion } from \"framer-motion\";\n\nconst container = {\n  hidden: { scale: 0 },\n  show: {\n    scale: 1,\n    transition: {\n      delayChildren: 1\n    }\n  }\n};\n\nconst item = {\n  hidden: { scale: 0 },\n  show: { scale: 1 }\n};\n\nconst Card = ({\n  _id,\n  name,\n  house,\n  patronus,\n  bloodStatus,\n  role,\n  deathEater,\n  dumbledoresArmy,\n  orderOfThePheonix,\n  ministryOfMagic,\n  alias,\n  wand,\n  boggart,\n  animagus,\n  index\n}) => {\n  return (\n    <motion.div variants={container} initial=\"hidden\" animate=\"show\">\n      <motion.div\n        variants={item}\n        sx={{\n          border: \"solid 2px\",\n          borderImageSource:\n            house === \"Gryffindor\"\n              ? gryffindorColors\n              : house === \"Hufflepuff\"\n              ? hufflepuffColors\n              : house === \"Slytherin\"\n              ? slytherinColors\n              : house === \"Ravenclaw\"\n              ? ravenclawColors\n              : null,\n          borderImageSlice: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          padding: \"1em\",\n          margin: \"1em\",\n          minWidth: [\"250px\", \"400px\", \"500px\"]\n        }}\n      >\n        <h2\n          sx={{\n            color: \"white\",\n            fontFamily: \"heading\",\n            letterSpacing: \"body\",\n            fontSize: \"2.5em\",\n            borderBottom: \"solid 2px\",\n            borderColor: \"white\"\n          }}\n        >\n          {name}\n        </h2>\n        <div\n          sx={{\n            display: \"grid\",\n            gridTemplateColumns: \"1fr 1fr\",\n            gridTemplateRows: \"auto\",\n            gap: \"2em\",\n            marginTop: \"2em\"\n          }}\n        >\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>house:</strong> {house} {houseEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>wand:</strong> {checkNull(wand)} {wandEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>patronus:</strong> {checkNull(patronus)} {patronusEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>boggart:</strong> {checkNull(boggart)} {boggartEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>blood:</strong> {checkNull(bloodStatus)} {bloodStatusEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>role:</strong> {checkNull(role)} {roleEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>order of the pheonix:</strong> {checkNull(orderOfThePheonix)} {orderOfThePheonixEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>ministry of magic:</strong> {checkDeathEater(ministryOfMagic)} {ministryOfMagicEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>death eater:</strong> {checkDeathEater(deathEater)} {deathEaterEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>dumbledores army:</strong> {checkDumbledoresArmy(dumbledoresArmy)} {dumbledoresArmyEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>alias:</strong> {checkNull(alias)} {aliasEmoji}\n          </p>\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n};\nexport default Card;","position":{"start":{"line":1551,"column":1,"offset":53949},"end":{"line":1769,"column":4,"offset":59522},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We are importing all of those cool emojis we added earlier in our helper file. The container and item objects are for\nuse in our animations from framer motion. We descructure our props, of which there are many, and return a div which has\nthe framer motion object prepended to it and the item object passed to the variants prop. This is a simpler way of\npassing the object and all of it’s values through. For certain properties we run a null check against them to\ndeterminate what we should show.","position":{"start":{"line":1771,"column":1,"offset":59526},"end":{"line":1775,"column":33,"offset":60025},"indent":[1,1,1,1]}}],"position":{"start":{"line":1771,"column":1,"offset":59526},"end":{"line":1775,"column":33,"offset":60025},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The only thing left to do is implement the Spells page and its associated components then the implementation of this\nsite is done! Given all we have covered I’m sure you can handle the last part!","position":{"start":{"line":1777,"column":1,"offset":60029},"end":{"line":1778,"column":79,"offset":60225},"indent":[1]}}],"position":{"start":{"line":1777,"column":1,"offset":60029},"end":{"line":1778,"column":79,"offset":60225},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Your final result should resemble something like this:\n","position":{"start":{"line":1780,"column":1,"offset":60229},"end":{"line":1781,"column":1,"offset":60285},"indent":[1]}},{"type":"link","title":null,"url":"https://serverless-graphql-potter.netlify.app/","children":[{"type":"text","value":"serverless-graphql-potter","position":{"start":{"line":1781,"column":2,"offset":60286},"end":{"line":1781,"column":27,"offset":60311},"indent":[]}}],"position":{"start":{"line":1781,"column":1,"offset":60285},"end":{"line":1781,"column":76,"offset":60360},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1781,"column":76,"offset":60360},"end":{"line":1781,"column":77,"offset":60361},"indent":[]}}],"position":{"start":{"line":1780,"column":1,"offset":60229},"end":{"line":1781,"column":77,"offset":60361},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Did you notice the cool particles? That’s a nice touch you could add to your site!","position":{"start":{"line":1783,"column":1,"offset":60365},"end":{"line":1783,"column":83,"offset":60447},"indent":[]}}],"position":{"start":{"line":1783,"column":1,"offset":60365},"end":{"line":1783,"column":83,"offset":60447},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Deploy the beast!","position":{"start":{"line":1785,"column":4,"offset":60454},"end":{"line":1785,"column":21,"offset":60471},"indent":[]}}],"position":{"start":{"line":1785,"column":1,"offset":60451},"end":{"line":1785,"column":21,"offset":60471},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That’s a lot of code and we haven’t even checked that it works!! (of course during development you should check how\nthings look and work and make changes accordingly, I didn’t cover running the site as that’s common practice while\ndeveloping). Lets deploy our site to Netlify and check it out!","position":{"start":{"line":1787,"column":1,"offset":60475},"end":{"line":1789,"column":63,"offset":60770},"indent":[1,1]}}],"position":{"start":{"line":1787,"column":1,"offset":60475},"end":{"line":1789,"column":63,"offset":60770},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At the projects root create a new file called netlify.toml","position":{"start":{"line":1791,"column":1,"offset":60774},"end":{"line":1791,"column":59,"offset":60832},"indent":[]}}],"position":{"start":{"line":1791,"column":1,"offset":60774},"end":{"line":1791,"column":59,"offset":60832},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"netlify.toml","position":{"start":{"line":1793,"column":3,"offset":60838},"end":{"line":1793,"column":15,"offset":60850},"indent":[]}}],"position":{"start":{"line":1793,"column":1,"offset":60836},"end":{"line":1793,"column":17,"offset":60852},"indent":[]}}],"position":{"start":{"line":1793,"column":1,"offset":60836},"end":{"line":1793,"column":17,"offset":60852},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"[build]\n    command = \"yarn build\"\n    functions = \"functions\"\n    publish = \"public\"","position":{"start":{"line":1795,"column":1,"offset":60856},"end":{"line":1800,"column":4,"offset":60958},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you don’t already have an account, create a new one at ","position":{"start":{"line":1802,"column":1,"offset":60962},"end":{"line":1802,"column":59,"offset":61020},"indent":[]}},{"type":"link","title":null,"url":"https://www.netlify.com/","children":[{"type":"text","value":"netlify.com","position":{"start":{"line":1802,"column":60,"offset":61021},"end":{"line":1802,"column":71,"offset":61032},"indent":[]}}],"position":{"start":{"line":1802,"column":59,"offset":61020},"end":{"line":1802,"column":98,"offset":61059},"indent":[]}},{"type":"text","value":". To publish your site:","position":{"start":{"line":1802,"column":98,"offset":61059},"end":{"line":1802,"column":121,"offset":61082},"indent":[]}}],"position":{"start":{"line":1802,"column":1,"offset":60962},"end":{"line":1802,"column":121,"offset":61082},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Click create new site, identify yourself and choose your repository","position":{"start":{"line":1804,"column":3,"offset":61088},"end":{"line":1804,"column":70,"offset":61155},"indent":[]}}],"position":{"start":{"line":1804,"column":3,"offset":61088},"end":{"line":1804,"column":70,"offset":61155},"indent":[]}}],"position":{"start":{"line":1804,"column":1,"offset":61086},"end":{"line":1804,"column":70,"offset":61155},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"set your build command as yarn build and publish directory as public","position":{"start":{"line":1805,"column":3,"offset":61159},"end":{"line":1805,"column":71,"offset":61227},"indent":[]}}],"position":{"start":{"line":1805,"column":3,"offset":61159},"end":{"line":1805,"column":71,"offset":61227},"indent":[]}}],"position":{"start":{"line":1805,"column":1,"offset":61157},"end":{"line":1805,"column":71,"offset":61227},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Click site settings and change site name and…. change the name!","position":{"start":{"line":1806,"column":3,"offset":61231},"end":{"line":1806,"column":66,"offset":61294},"indent":[]}}],"position":{"start":{"line":1806,"column":3,"offset":61231},"end":{"line":1806,"column":66,"offset":61294},"indent":[]}}],"position":{"start":{"line":1806,"column":1,"offset":61229},"end":{"line":1806,"column":66,"offset":61294},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"On the left tab menu find build and deploy and click that and scroll down to the environment section and add your\nenvironment variables: SERVER_KEY and FAUNA_ADMIN","position":{"start":{"line":1807,"column":3,"offset":61298},"end":{"line":1808,"column":52,"offset":61464},"indent":[3]}}],"position":{"start":{"line":1807,"column":3,"offset":61298},"end":{"line":1808,"column":52,"offset":61464},"indent":[3]}}],"position":{"start":{"line":1807,"column":1,"offset":61296},"end":{"line":1808,"column":52,"offset":61464},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You can add the functions path under the functions tab but Netlify will also pick this up from the netlify.toml file\nyou created","position":{"start":{"line":1809,"column":3,"offset":61468},"end":{"line":1810,"column":14,"offset":61599},"indent":[3]}}],"position":{"start":{"line":1809,"column":3,"offset":61468},"end":{"line":1810,"column":14,"offset":61599},"indent":[3]}}],"position":{"start":{"line":1809,"column":1,"offset":61466},"end":{"line":1810,"column":14,"offset":61599},"indent":[1]}}],"position":{"start":{"line":1804,"column":1,"offset":61086},"end":{"line":1810,"column":14,"offset":61599},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When you first created this new site Netlify tried to deploy it. It wouldn’t have worked as we hadn’t set the\nenvironment variables yet. Go to the deploys tab at the top of the page and hit the trigger deploy dropdown and deploy\nsite. If you encounter any issues then please drop me an email at hello@richardhaines.dev and we can try and work\nthrough it together.","position":{"start":{"line":1812,"column":1,"offset":61603},"end":{"line":1815,"column":21,"offset":61969},"indent":[1,1,1]}}],"position":{"start":{"line":1812,"column":1,"offset":61603},"end":{"line":1815,"column":21,"offset":61969},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And that’s it! I hope you enjoyed it and learnt something along the way. Thank you for coming to my TED talk 😅","position":{"start":{"line":1817,"column":1,"offset":61973},"end":{"line":1817,"column":112,"offset":62084},"indent":[]}}],"position":{"start":{"line":1817,"column":1,"offset":61973},"end":{"line":1817,"column":112,"offset":62084},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you liked this article feel free to give me a follow on Twitter with the blue button at the top of the page. 😇","position":{"start":{"line":1819,"column":1,"offset":62088},"end":{"line":1819,"column":115,"offset":62202},"indent":[]}}],"position":{"start":{"line":1819,"column":1,"offset":62088},"end":{"line":1819,"column":115,"offset":62202},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Jamstack and the power of serverless with FaunaDB\",\"date\":\"2020-06-16T00:00:00.000Z\",\"published\":true,\"category\":\"Tutorial\",\"author\":\"Richard Haines\",\"keywords\":[\"gatsby\",\"theme-ui\",\"netlify functions\",\"faunadb\",\"serverless\",\"tutorial\"],\"pin\":false}","position":{"start":{"line":1822,"column":1,"offset":62206},"end":{"line":1822,"column":288,"offset":62493},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1822,"column":288,"offset":62493}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jamstack and the power of serverless with FaunaDB\",\n  \"date\": \"2020-06-16T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Tutorial\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"gatsby\", \"theme-ui\", \"netlify functions\", \"faunadb\", \"serverless\", \"tutorial\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this article we will create a Jamstack website powered by Gatsby, Netlify Functions, Apollo and FaunaDB. Our site\\nwill use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.potterapi.com/\"\n  }), \"Harry Potter API\"), \" for its data that will be stored in a\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dashboard.fauna.com/accounts/register?utm_source=RichardHainesDev&utm_medium=referral&utm_campaign=WritewithFauna_Jamstack_RichardHaines\"\n  }), \"FaunaDB\"), \"\\ndatabase. The data will be accessed using serverless functions and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.apollographql.com/docs/\"\n  }), \"Apollo\"), \".\\nFinally we will display our data in a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/\"\n  }), \"Gatsby\"), \" site styled using\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://theme-ui.com/\"\n  }), \"Theme-ui\"), \".\"), mdx(\"p\", null, \"This finished site will look a little something like this:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://serverless-graphql-potter.netlify.app/\"\n  }), \"serverless-graphql-potter.netlify.app/\")), mdx(\"p\", null, \"We will begin by focusing on what these technologies are and why, as frontend developers, we should be leveraging them.\\nWe will then begin our project and create our schema.\"), mdx(\"h2\", {\n    \"id\": \"the-jamstack\"\n  }, \"The Jamstack\"), mdx(\"p\", null, \"Jamstack is a term often used to describe sites that are served as static assets to a\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.cloudflare.com/learning/cdn/what-is-a-cdn/\"\n  }), \"CDN\"), \", of course this is nothing new, anyone who has made a\\nsimple site with HTML and CSS and published it has served a static site. To walk away thinking that the only purpose of\\nJamstack sites are to serve static files would be doing it a great injustice and miss some of the awesome things this\\n\\\"new\\\" way of building web apps provides.\"), mdx(\"p\", null, \"A few of the benefits of going Jamstack\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"High security and more secure. Fewer points of attack due to static files and external APIs served over CDN\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cheaper hosting and easier scalability with serverless functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fast! Pre-built assets served from a CDN instead of a server\")), mdx(\"p\", null, \"A popular way of storing the data your site requires, apart from as markdown files, is the use of a headless CMS\\n(Content Management System). These CMSs have adopted the term headless as they don't come with their own frontend that\\ndisplays the data stored, like Wordpress for example. Instead they are headless, they have no frontend.\"), mdx(\"p\", null, \"A headless CMS can be set up so that once a change to the data is made in the CMS a new build is triggered via a webhook\\n(just one way of doing it, you could trigger rebuilds other ways) and the site will be deployed again with the new data.\"), mdx(\"p\", null, \"As an example we could have some images stored in our CMS that are pulled into our site via a graphql query and shown on\\nour site. If we wanted to change one of our images we could do so via our CMS which would then trigger a new build on\\npublish and the new image would then be visible on our site.\"), mdx(\"p\", null, \"There are many great options to choose from when considering which CMS to use:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Netlify CMS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Contenful\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sanity.io\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tina CMS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Butter CMS\")), mdx(\"p\", null, \"The potential list is so long i will point you in the direction of a great site that lists most of them\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://headlesscms.org/\"\n  }), \"headlesscms.org\"), \"!\"), mdx(\"p\", null, \"For more information and a great overview of what the Jamstack is and some more of its benefits i recommend checking out\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jamstack.org/\"\n  }), \"jamstack.org\"), \".\"), mdx(\"p\", null, \"Just because our site is served as static assets, that doesn't mean we cant work in a dynamic way and have the benefits\\nof dynamic data! We wont be diving deep into all of its benefits, but we will be looking at how we can take our static\\nsite and make it dynamic by way of taking a serverless approach to handling our data through AWS Lambda functions, which\\nwe will use via Netlify and FaunaDB.\"), mdx(\"h2\", {\n    \"id\": \"serverless\"\n  }, \"Serverless\"), mdx(\"p\", null, \"Back in the old days, long long ago before we spread our stack with jam, we had a website that was a combination of HTML\\nmarkup, CSS styling and JavaScript. Our website gave our user data to access and manipulate and our data was stored in a\\ndatabase which was hosted on a server. If we hosted this database ourselves we were responsible for keeping it going and\\nmaintaining it and all of its stored data. Our database could hold only a certain amount of data which meant that if we\\nwere lucky enough to get a lot of traffic it would soon struggle to handle all of the requests coming its way and so our\\nend users might experience some downtime or no data at all.\"), mdx(\"p\", null, \"If we paid for a hosted server then we were paying for the up time even when no requests were being sent.\"), mdx(\"p\", null, \"To counter these issues serverless computing was introduced. Now, lets cut through all the magic this might imply and\\nsimply state that serverless still involves servers, the big difference is that they are hosted in the cloud and execute\\nsome code for us.\"), mdx(\"p\", null, \"Providing the requested resources as a simple function they only run when that request is made. This means that we are\\nonly charged for the resources and time the code is running for. With this approach we have done away with the need to\\npay a server provider for constant up time, which is one of the big plus points of going serverless.\"), mdx(\"p\", null, \"Being able to scale up and down is also a major benefit of using serverless functions to interact with our data stores.\\nIn a nutshell this means that as multiple requests come in via our serverless functions, our cloud provider can create\\nmultiple instances of the same function to handle those requests and run them in parallel. One downside to this is the\\nconcept of cold starts where because our functions are spun up on demand they need a small amount of time to start up\\nwhich can delay our response. However, once up if multiple requests are received our serverless functions will stay open\\nto requests and handle them before closing down again.\"), mdx(\"h2\", {\n    \"id\": \"faunadb\"\n  }, \"FaunaDB\"), mdx(\"p\", null, \"FaunaDB is a global serverless database that has native graphql support, is multi tenancy which allows us to have nested\\ndatabases and is low latency from any location. Its also one of the only serverless databases to follow the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/ACID\"\n  }), \"ACID transactions\"), \" which guarantee consistent reads and writes to the database.\"), mdx(\"p\", null, \"Fauna also provides us with a High Availability solution with each server globally located containing a partition of our\\ndatabase, replicating our data asynchronously with each request with a copy of our database or the transaction made.\"), mdx(\"p\", null, \"Some of the benefits to using Fauna can be summarized as:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transactional\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multi-document\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Geo-distributed\")), mdx(\"p\", null, \"In short, Fauna frees the developer from worry about single or multi-document solutions. Guarantees consistent data\\nwithout burdening the developer on how to model their system to avoid consistency issues. To get a good overview of how\\nFauna does this see this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fauna.com/blog/consistency-without-clocks-faunadb-transaction-protocol\"\n  }), \"blog post\"), \"\\nabout the FaunaDB distributed transaction protocol.\"), mdx(\"p\", null, \"There are a few other alternatives that one could choose instead of using Fauna such as:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Firebase\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cassandra\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MongoDB\")), mdx(\"p\", null, \"But these options don't give us the ACID guarantees that Fauna does, compromising scaling.\"), mdx(\"h2\", {\n    \"id\": \"acid\"\n  }, \"ACID\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Atomic\"), \" - all transactions are a single unit of truth, either they all pass or none. If we have multiple\\ntransactions in the same request then either both are good or neither are, one cannot fail and the other succeed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Consistent\"), \" - A transaction can only bring the database from one valid state to another, that is, any data written\\nto the database must follow the rules set out by the database, this ensures that all transactions are legal.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Isolation\"), \" - When a transaction is made or created, concurrent transactions leave the state of the database the\\nsame as is they would be if each request was made sequentially.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Durability\"), \" - Any transaction that is made and committed to the database is persisted in the the database,\\nregardless of down time of the system or failure.\")), mdx(\"p\", null, \"Now that we have a good overview of the stack we will be using lets get to the code!\"), mdx(\"h2\", {\n    \"id\": \"setup-project\"\n  }, \"Setup project\"), mdx(\"p\", null, \"We'll create a new folder to house our project, initialize it with yarn and add some files and folders to that we will\\nbe working with throughout.\"), mdx(\"p\", null, \"At the projects root create a functions folder with a nested graphql folder. In that folder we will create three files,\\nour graphql schema which we will import into Fauna, our serverless function which will live in graphql.js and create the\\nlink to and use the schema from Fauna and our database connection to Fauna.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir harry-potter\\ncd harry-potter\\nyarn init- y\\nmkdir src/pages/\\ncd src/pages && touch index.js\\nmkdir src/components\\ntouch gatsby-config.js\\ntouch gatsby-browser.js\\ntouch gatsby-ssr.js\\ntouch .gitignore\\n\\nmkdir functions/graphql\\ncd functions/graphql && touch schema.gql graphql.js db-connection.js\\n\")), mdx(\"p\", null, \"We'll also need to add some packages.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add gatsby react react-dom theme-ui gatsby-plugin-theme-ui faunadb isomorphic-fetch dotenv\\n\")), mdx(\"p\", null, \"Add the following to your newly created .gitignore file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \".netlify\\nnode_modules\\n.cache\\npublic\\n\")), mdx(\"h2\", {\n    \"id\": \"serverless-setup\"\n  }, \"Serverless setup\"), mdx(\"p\", null, \"Lets begin with our schema. We are going to take advantage of an awesome feature of Fauna. By creating our schema and\\nimporting it into Fauna we are letting it take care of a lot of code for us by auto creating all the classes, indexes\\nand possible resolvers.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"schema.gql\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"    type Query {\\n        allCharacters: [Character]!\\n        allSpells: [Spell]!\\n    }\\n\\n    type Character {\\n        name: String!\\n        house: String\\n        patronus: String\\n        bloodStatus: String\\n        role: String\\n        school: String\\n        deathEater: Boolean\\n        dumbledoresArmy: Boolean\\n        orderOfThePheonix: Boolean\\n        ministryOfMagic: Boolean\\n        alias: String\\n        wand: String\\n        boggart: String\\n        animagus: String\\n    }\\n\\n    type Spell {\\n        effect: String\\n        spell: String\\n        type: String\\n    }\\n\")), mdx(\"p\", null, \"Our schema is defining the shape of the data that we will soon be seeding into the data from the Potter API. Our top\\nlevel query will return two things, an array of Characters and an array of Spells. We have then defined our Character\\nand Spell types. We don't need to specify an id here as when we seed the data from the Potter API we will attach it\\nthen.\"), mdx(\"p\", null, \"Now that we have our schema we can import it into Fauna. Head to your fauna console and navigate to the graphql tab on\\nthe left, click import schema and find the file we just created, click import and prepare to be amazed!\"), mdx(\"p\", null, \"Once the import is complete we will be presented with a graphql playground where we can run queries against our newly\\ncreated database using its schema. Alas, we have yet to add any data, but you can check the collections and indexes tabs\\non the left of the console and see that fauna has created two new collections for us, Character and Spell.\"), mdx(\"p\", null, \"A collection is a grouping of our data with each piece of data being a document. Or a table with rows if you are coming\\nfrom an SQL background. Click the indexes tab to see our two new query indexes that we specified in our schema,\\nallCharacters and allSpells. db-connection.js\"), mdx(\"p\", null, \"Inside db-connection.js we will create the Fauna client connection, we will use this connection to seed data into our\\ndatabase.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"require(\\\"dotenv\\\").config();\\nconst faunadb = require(\\\"faunadb\\\");\\nconst query = faunadb.query;\\n\\nfunction createClient() {\\n  if (!process.env.FAUNA_ADMIN) {\\n    throw new Error(`No FAUNA_ADMIN key in found, please check your fauna dashboard or create a new key.`);\\n  }\\n  const client = new faunadb.Client({\\n    secret: process.env.FAUNA_ADMIN\\n  });\\n  return client;\\n}\\nexports.client = createClient();\\nexports.query = query;\\n\")), mdx(\"p\", null, \"Here we are creating a function which will check to see if we have an admin key from our Fauna database, if none is\\nfound we are returning a helpful error message to the console. If the key is found we are creating a connection to our\\nFauna database and exporting that connection from file. We are also exporting the query variable from Fauna as that will\\nallow us to use some \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.fauna.com/fauna/current/api/fql/\"\n  }), \"FQL\"), \" (Fauna Query Language) when seeding our data.\"), mdx(\"p\", null, \"Head over to your Fauna console and click the security tab, click new key and select admin from the role dropdown. The\\nadmin role will allow us to manage the database, in our case, seed data into it. Choose the name FAUNA_ADMIN and hit\\nsave. We will need to create another key for use in using our stored schema from Fauna. Select server for the role of\\nthis key and name it SERVER_KEY. Don't forget to make a note of the keys before you close the windows as you wont be\\nable to view them again!\"), mdx(\"p\", null, \"That\\u2019s a great start. Next up we will seed our data and begin implementing our frontend!\"), mdx(\"p\", null, \"Now that we have our keys its time to grab one more, from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.potterapi.com/\"\n  }), \"Potter API\"), \", it's as simple\\nas hitting the get key button in the top right hand corner of the page, make a note of it and head back to your code\\neditor.\"), mdx(\"p\", null, \"We don't want our keys getting into the wrong wizards hands so lets store them as environment variables. Create a .env\\nfile at the projects root and add add them. Also add the .env path to the .gitignore file.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".gitignore\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"// ...other stuff\\n.env.*\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".env\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"FAUNA_ADMIN=xxxxxxxxxxxxxxxxxxxxxxxxxxx\\nSERVER_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxx\\nPOTTER_KEY=xxxxxxxxxxxxxxxxxxxxxxxx\\n\")), mdx(\"p\", null, \"Our database isn't much good if it doesn't have any data in it, lets change that! Create a file at the projects root and\\nname it seed.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const fetch = require(\\\"isomorphic-fetch\\\");\\nconst { client, query } = require(\\\"./functions/graphql/db\\\");\\nconst q = query;\\nconst potterEndPoint = `https://www.potterapi.com/v1/characters/?key=${process.env.POTTER_KEY}`;\\n\\nfetch(potterEndPoint)\\n  .then(res => res.json())\\n  .then(res => {\\n    console.log({ res });\\n    const characterArray = res.map((char, index) => ({\\n      _id: char._id,\\n      name: char.name,\\n      house: char.house,\\n      patronus: char.patronus,\\n      bloodStatus: char.blood,\\n      role: char.role,\\n      school: char.school,\\n      deathEater: char.deathEater,\\n      dumbledoresArmy: char.dumbledoresArmy,\\n      orderOfThePheonix: char.orderOfThePheonix,\\n      ministryOfMagic: char.ministryOfMagic,\\n      alias: char.alias,\\n      wand: char.wand,\\n      boggart: char.boggart,\\n      animagus: char.animagus\\n    }));\\n\\n    client\\n      .query(\\n        q.Map(characterArray, q.Lambda(\\\"character\\\", q.Create(q.Collection(\\\"Character\\\"), { data: q.Var(\\\"character\\\") })))\\n      )\\n      .then(console.log(\\\"Wrote potter characters to FaunaDB\\\"))\\n      .catch(err => console.log(\\\"Failed to add characters to FaunaDB\\\", err));\\n  });\\n\")), mdx(\"p\", null, \"There is quite a lot going on here so lets break it down.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We are importing fetch to do a post against the potter endpoint\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We import our Fauna client connection and the query variable which holds the functions need to create the documents in\\nour collection.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We call the potter endpoint and map over the result, adding all the data we require (which also corresponds to the\\nschema we create earlier).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using our Fauna client we use FQL to first map over the new array of characters, we then call a lambda function (an\\nanonymous function) and choose a variable name for each row instance and create a new document in our Character\\ncollection.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If all was successful we return a message to the console, if unsuccessful we return the error.\")), mdx(\"p\", null, \"From the projects root run our new script.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"    node seed.js\\n\")), mdx(\"p\", null, \"If you now take a look inside the collections tab in the Fauna console you will see that the database has populated with\\nall the characters from the potterverse! Click on one of the rows (documents) and you can see the data.\"), mdx(\"p\", null, \"We will create another seed script to get our spells data into our database. Run the script and check out the Spell\\ncollections tab to view all the spells.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const fetch = require(\\\"isomorphic-fetch\\\");\\nconst { client, query } = require(\\\"./functions/graphql/db\\\");\\nconst q = query;\\nconst potterEndPoint = `https://www.potterapi.com/v1/spells/?key=${process.env.POTTER_KEY}`;\\n\\nfetch(potterEndPoint)\\n  .then(res => res.json())\\n  .then(res => {\\n    console.log({ res });\\n    const spellsArray = res.map((char, index) => ({\\n      _id: char._id,\\n      effect: char.effect,\\n      spell: char.spell,\\n      type: char.type\\n    }));\\n\\n    client\\n      .query(q.Map(spellsArray, q.Lambda(\\\"spell\\\", q.Create(q.Collection(\\\"Spell\\\"), { data: q.Var(\\\"spell\\\") }))))\\n      .then(console.log(\\\"Wrote potter spells to FaunaDB\\\"))\\n      .catch(err => console.log(\\\"Failed to add spells to FaunaDB\\\", err));\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"    node seed-spells.js\\n\")), mdx(\"p\", null, \"Now that we have data in our database its time to create our serverless function which will pull in our schema from\\nFauna.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"graphql.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"require(\\\"dotenv\\\").config();\\nconst { createHttpLink } = require(\\\"apollo-link-http\\\");\\nconst { ApolloServer, makeRemoteExecutableSchema, introspectSchema } = require(\\\"apollo-server-micro\\\");\\nconst fetch = require(\\\"isomorphic-fetch\\\");\\n\\nconst link = createHttpLink({\\n  uri: \\\"https://graphql.fauna.com/graphql\\\",\\n  fetch,\\n  headers: {\\n    Authorization: `Bearer ${process.env.SERVER_KEY}`\\n  }\\n});\\n\\nconst schema = makeRemoteExecutableSchema({\\n  schema: introspectSchema(link),\\n  link\\n});\\n\\nconst server = new ApolloServer({\\n  schema,\\n  introspection: true\\n});\\n\\nexports.handler = server.createHandler({\\n  cors: {\\n    origin: \\\"*\\\",\\n    credentials: true\\n  }\\n});\\n\")), mdx(\"p\", null, \"Lets go through what we just did.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We created a link to Fauna using the createHttpLink function which takes our Fauna graphql endpoint and attaches our\\nserver key to the header. This will fetch the graphql results from the endpoint over an http connection.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We then grab our schema from Fauna using the makeRemoteExecutableSchema function by passing the link to the\\nintrospectSchema function, we also provide the link.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A new ApolloServer instance is then created and our schema passed in.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finally we export our handler as Netlify requires us to do when writing serverless functions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note that we might, and most probably will, run into \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\n  }), \"CORS\"), \"\\nissues when trying to fetch our data so we pass our createHandler function the cors option, setting its origin to\\nanything and credentials as true.\")), mdx(\"h2\", {\n    \"id\": \"using-our-data\"\n  }, \"Using our data!\"), mdx(\"p\", null, \"Before we can think about displaying our data we must first do some tinkering. We will be using some handy hooks from\\nApollo for querying our (namely \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.apollographql.com/docs/react/data/queries/\"\n  }), \"useQuery\"), \") and for that to work\\nwe must first set up our provider, which is similar to Reacts context provider. We will wrap our sites root with this\\nprovider and pass in our client, thus making it available throughout our site. To wrap the root element in a Gatsby site\\nwe must use the gatsby-browser.js and gatsby-ssr.js files. The implementation will be identical in both.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"gatsby-browser.js && gatsby-ssr.js\")), mdx(\"p\", null, \"We will have to add a few more packages at this point:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"    yarn add @apollo/client apollo-link-context\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const React = require(\\\"react\\\");\\nconst { ApolloProvider, ApolloClient, InMemoryCache } = require(\\\"@apollo/client\\\");\\nconst { setContext } = require(\\\"apollo-link-context\\\");\\nconst { createHttpLink } = require(\\\"apollo-link-http\\\");\\nconst fetch = require(\\\"isomorphic-fetch\\\");\\n\\nconst httpLink = createHttpLink({\\n  uri: \\\"https://graphql.fauna.com/graphql\\\",\\n  fetch\\n});\\n\\nconst authLink = setContext((_, { headers }) => {\\n  return {\\n    headers: {\\n      ...headers,\\n      authorization: `Bearer ${process.env.SERVER_KEY}`\\n    }\\n  };\\n});\\n\\nconst client = new ApolloClient({\\n  link: authLink.concat(httpLink),\\n  cache: new InMemoryCache()\\n});\\n\\nexport const wrapRootElement = ({ element }) => <ApolloProvider client={client}>{element}</ApolloProvider>;\\n\")), mdx(\"p\", null, \"There are other ways of setting this up, i had originally just created an ApolloClient instance and passed in the\\nNetlify functions url as a http link then passed that down to the provider but i was encountering authorization issues,\\nwith a helpful message stating that the request lacked authorization headers. The solution was to send the authorization\\nalong with a header on every http request.\"), mdx(\"p\", null, \"Lets take a look at what we have here:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Created a new http link much the same as we did before when creating our server instance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create an auth link which returns the headers to the context so the http link can read them. Here we pass in our Fauna\\nkey with server rights.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Then we create the client to be passed to the provider with the link now set as the auth link.\")), mdx(\"p\", null, \"Now that we have the nuts and bolts all setup we can move onto some frontend code!\"), mdx(\"h2\", {\n    \"id\": \"make-it-work-then-make-it-pretty\"\n  }, \"Make it work then make it pretty!\"), mdx(\"p\", null, \"We'll also want to create some base components. We'll be using a Gatsby layout plugin to make life easier for us. We'll\\nalso utilize some google fonts via a plugin. Stay with me...\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"    mkdir -p src/layouts/index.js\\n    cd src/components && touch header.js\\n    cd src/components && touch main.js\\n    cd src/components && touch footer.js\\n    yarn add gatsby-plugin-layout\\n    yarn add gatsby-plugin-google-fonts\\n\")), mdx(\"p\", null, \"Now we need to add the theme-ui, layout and google fonts plugins to our gatsby-config.js file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n  plugins: [\\n    {\\n      resolve: \\\"gatsby-plugin-google-fonts\\\",\\n      options: {\\n        fonts: [\\\"Muli\\\", \\\"Open Sans\\\", \\\"source sans pro:300,400,400i,700\\\"]\\n      }\\n    },\\n    {\\n      resolve: \\\"gatsby-plugin-layout\\\",\\n      options: {\\n        component: require.resolve(\\\"./src/layouts/index.js\\\")\\n      }\\n    },\\n    \\\"gatsby-plugin-theme-ui\\\"\\n  ]\\n};\\n\")), mdx(\"p\", null, \"We'll begin with our global layout. This will include a css reset and render our header component and any children,\\nwhich in our case is the rest of the applications pages/components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport React from \\\"react\\\";\\nimport { Global, css } from \\\"@emotion/core\\\";\\nimport Header from \\\"./../components/site/header\\\";\\n\\nconst Layout = ({ children, location }) => {\\n  return (\\n    <>\\n      <Global\\n        styles={css`\\n          * {\\n            margin: 0;\\n            padding: 0;\\n            box-sizing: border-box;\\n            scroll-behavior: smooth;\\n\\n            /* width */\\n            ::-webkit-scrollbar {\\n              width: 10px;\\n            }\\n\\n            /* Track */\\n            ::-webkit-scrollbar-track {\\n              background: #fff;\\n              border-radius: 20px;\\n            }\\n\\n            /* Handle */\\n            ::-webkit-scrollbar-thumb {\\n              background: #000;\\n              border-radius: 20px;\\n            }\\n\\n            /* Handle on hover */\\n            ::-webkit-scrollbar-thumb:hover {\\n              background: #000;\\n            }\\n          }\\n          body {\\n            scroll-behavior: smooth;\\n            overflow-y: scroll;\\n            -webkit-overflow-scrolling: touch;\\n            width: 100%;\\n            overflow-x: hidden;\\n            height: 100%;\\n          }\\n        `}\\n      />\\n      <Header location={location} />\\n      {children}\\n    </>\\n  );\\n};\\n\\nexport default Layout;\\n\")), mdx(\"p\", null, \"Because we are using gatsby-plugin-layout our layout component will be wrapped around all of our pages so that we can\\nskip importing it ourselves. For our site its a trivial step as we could just as easily import it but for more complex\\nlayout solutions this can come in real handy.\"), mdx(\"p\", null, \"To provide an easy way to style our whole site through changing just a few variables we can utilize\\ngatsby-plugin-theme-ui.\"), mdx(\"p\", null, \"This article wont cover the specifics of how to use theme-ui, for that i suggest going over another tutorial i have\\nwritten which covers the hows and whys\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://richardhaines.dev/how-to-make-a-gatsby-ecommerce-theme-part-1/\"\n  }), \"how-to-make-a-gatsby-ecommerce-theme-part-1/\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"    cd src && mkdir gatsby-plugin-theme-ui && touch index.js\\n\")), mdx(\"p\", null, \"In this file we will create our sites styles which we will be able to access via the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://theme-ui.com/sx-prop/\"\n  }), \"theme-ui sx prop\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default {\\n  fonts: {\\n    body: \\\"Open Sans\\\",\\n    heading: \\\"Muli\\\"\\n  },\\n  fontWeights: {\\n    body: 300,\\n    heading: 400,\\n    bold: 700\\n  },\\n  lineHeights: {\\n    body: \\\"110%\\\",\\n    heading: 1.125,\\n    tagline: \\\"100px\\\"\\n  },\\n  letterSpacing: {\\n    body: \\\"2px\\\",\\n    text: \\\"5px\\\"\\n  },\\n  colors: {\\n    text: \\\"#FFFfff\\\",\\n    background: \\\"#121212\\\",\\n    primary: \\\"#000010\\\",\\n    secondary: \\\"#E7E7E9\\\",\\n    secondaryDarker: \\\"#545455\\\",\\n    accent: \\\"#DE3C4B\\\"\\n  },\\n  breakpoints: [\\\"40em\\\", \\\"56em\\\", \\\"64em\\\"]\\n};\\n\")), mdx(\"p\", null, \"Much of this is self explanatory, the breakpoints array is used to allow us to add responsive definitions to our inline\\nstyles via the sx prop. For example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<p\\n  sx={{\\n    fontSize: [\\\"0.7em\\\", \\\"0.8em\\\", \\\"1em\\\"]\\n  }}\\n>\\n  Some text here...\\n</p>\\n\")), mdx(\"p\", null, \"The font size array indexes corresponded to our breakpoints array set in our theme-ui index file. Next we'll create our\\nheader component. But before we do we must install another package, i'll explain why once you see the component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"    yarn add @emotion/styled\\n    cd src/components\\n    mkdir site && touch header.js\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"header.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport HarryPotterLogo from \\\"../../assets/svg-silhouette-harry-potter-4-transparent.svg.svg\\\";\\nimport { Link } from \\\"gatsby\\\";\\nimport styled from \\\"@emotion/styled\\\";\\n\\nconst PageLink = styled(Link)`\\n  color: #fff;\\n\\n  &:hover {\\n    background-image: linear-gradient(\\n      90deg,\\n      rgba(127, 9, 9, 1) 0%,\\n      rgba(255, 197, 0, 1) 12%,\\n      rgba(238, 225, 23, 1) 24%\\n    );\\n    background-size: 100%;\\n    background-repeat: repeat;\\n    -webkit-background-clip: text;\\n    -webkit-text-fill-color: transparent;\\n    font-weight: bold;\\n  }\\n`;\\n\\nconst Header = ({ location }) => {\\n  return (\\n    <section\\n      sx={{\\n        gridArea: \\\"header\\\",\\n        justifyContent: \\\"flex-start\\\",\\n        alignItems: \\\"center\\\",\\n        width: \\\"100%\\\",\\n        height: \\\"100%\\\",\\n        display: location.pathname === \\\"/\\\" ? \\\"none\\\" : \\\"flex\\\"\\n      }}\\n    >\\n      <Link to=\\\"/\\\">\\n        <HarryPotterLogo\\n          sx={{\\n            height: \\\"100px\\\",\\n            width: \\\"100px\\\",\\n            padding: \\\"1em\\\"\\n          }}\\n        />\\n      </Link>\\n\\n      <PageLink\\n        sx={{\\n          fontFamily: \\\"heading\\\",\\n          fontSize: \\\"2em\\\",\\n          color: \\\"white\\\",\\n          marginRight: \\\"2em\\\"\\n        }}\\n        to=\\\"/houses\\\"\\n      >\\n        houses\\n      </PageLink>\\n      <PageLink\\n        sx={{\\n          fontFamily: \\\"heading\\\",\\n          fontSize: \\\"2em\\\",\\n          color: \\\"white\\\"\\n        }}\\n        to=\\\"/spells\\\"\\n      >\\n        Spells\\n      </PageLink>\\n    </section>\\n  );\\n};\\n\\nexport default Header;\\n\")), mdx(\"p\", null, \"Lets understand our imports first.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We have imported and used the jsx pragma from theme-ui to allow to to style our elements and components inline with\\nthe object syntax\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The HarryPotterLogo is a logo i found via google which was placed in a folder named assets inside of our src folder.\\nIts an svg which we alter the height and width of using the sx prop.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gatsby link is needed for us to navigate between pages in our site.\")), mdx(\"p\", null, \"You may be wondering why we have installed emotion/styled when we could just use the sx prop, like we have done else\\nwhere... Well the answer lies in the affect we are using on the page links.\"), mdx(\"p\", null, \"The sx prop doesn\\u2019t seem to have access to, or i should say perhaps that its doesn't have in its definitions, the\\n-webkit-background-clip property which we are using to add a cool linear-gradient affect on hover. For this reason we\\nhave pulled the logic our into a new component called PageLink which is a styled Gatsby Link. With styled components we\\ncan use regular css syntax and as such have access to the -webkit-background-clip property.\"), mdx(\"p\", null, \"The header component is taking the location prop provided by @reach/router which Gatsby uses under the hood for its\\nrouting. This is used to determine which page we are on. Due to the fact that we have a different layout for our main\\nhome page and the rest of the site we simply use the location object to check if we are on the home page, if we are we\\nset a display none to hide the header component.\"), mdx(\"p\", null, \"The last thing we need to do is set our grid areas which we will be using in later pages. This is just my preferred way\\nof doing it, but i like the separation. Create a new folder inside of src called window and add an index.js file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export const HousesSpellsPhoneTemplateAreas = `\\n    'header'\\n    'main'\\n    'main'\\n    `;\\n\\nexport const HousesSpellsTabletTemplateAreas = `\\n    'header    header        header   header'\\n    'main    main        main   main'\\n    `;\\n\\nexport const HousesSpellsDesktopTemplateAreas = `\\n    'header    header        header   header'\\n    'main    main        main   main'\\n    `;\\n\\nexport const HomePhoneTemplateAreas = `\\n    'logo'\\n    'logo'\\n    'logo'\\n    'author'\\n    'author'\\n    'author'\\n    'author'\\n    `;\\n\\nexport const HomeTabletTemplateAreas = `\\n    'logo       .           .     '\\n    'logo       author      author'\\n    'logo       author      author'\\n    '.          .           .     '\\n    `;\\n\\nexport const HomeDesktopTemplateAreas = `\\n    'logo       .           .     '\\n    'logo       author      author'\\n    'logo       author      author'\\n    '.          .           .     '\\n    `;\\n\")), mdx(\"p\", null, \"Cool, now we have our global layout complete, lets move onto our home page. Open up the index.js file inside of\\nsrc/pages and add the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport React from \\\"react\\\";\\nimport { HomePhoneTemplateAreas, HomeTabletTemplateAreas, HomeDesktopTemplateAreas } from \\\"./../window/index\\\";\\nimport LogoSection from \\\"./../components/site/logo-section\\\";\\nimport AuthorSection from \\\"../components/site/author-section\\\";\\n\\nexport default () => {\\n  return (\\n    <div\\n      sx={{\\n        width: \\\"100%\\\",\\n        height: \\\"100%\\\",\\n        maxWidth: \\\"1200px\\\",\\n        margin: \\\"1em\\\"\\n      }}\\n    >\\n      <div\\n        sx={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: [\\\"1fr\\\", \\\"500px 1fr\\\", \\\"500px 1fr\\\"],\\n          gridAutoRows: \\\"100px 1fr\\\",\\n          gridTemplateAreas: [HomePhoneTemplateAreas, HomeTabletTemplateAreas, HomeDesktopTemplateAreas],\\n          width: \\\"100%\\\",\\n          height: \\\"100vh\\\",\\n          background: \\\"#1E2224\\\",\\n          maxWidth: \\\"1200px\\\"\\n        }}\\n      >\\n        <LogoSection />\\n        <AuthorSection />\\n      </div>\\n    </div>\\n  );\\n};\\n\")), mdx(\"p\", null, \"This is the first page our visitors will see. We are using a grid to compose our layout of the page and utilizing the\\nresponsive array syntax in our grid-template-columns and areas properties. To recap how this works we can take a closer\\nlook at the gridTemplateAreas property and see that the first index is for phone (or mobile if you will) with the second\\nbeing tablet and the third desktop. We could add more if we so wished but these will suffice for our needs.\"), mdx(\"p\", null, \"Lets move on to creating our logo section. In src/components/site create two new files called logo.js and\\nlogo-section.js\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"logo.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport HarryPotterLogo from \\\"../assets/svg-silhouette-harry-potter-4-transparent.svg.svg\\\";\\nexport const Logo = () => (\\n  <HarryPotterLogo\\n    sx={{\\n      height: [\\\"200px\\\", \\\"300px\\\", \\\"500px\\\"],\\n      width: [\\\"200px\\\", \\\"300px\\\", \\\"500px\\\"],\\n      padding: \\\"1em\\\",\\n      position: \\\"relative\\\"\\n    }}\\n  />\\n);\\n\")), mdx(\"p\", null, \"Our logo is the Harry Potter svg mentioned earlier. You can of course choose whatever you like as your sites logo. This\\none is merely \\u201CHR\\u201D in a fancy font.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"logo-section.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport { Logo } from \\\"../logo\\\";\\nconst LogoSection = () => {\\n  return (\\n    <section\\n      sx={{\\n        gridArea: \\\"logo\\\",\\n        display: \\\"flex\\\",\\n        alignItems: \\\"center\\\",\\n        justifyContent: [\\\"start\\\", \\\"center\\\", \\\"center\\\"],\\n        position: \\\"relative\\\",\\n        width: \\\"100%\\\"\\n      }}\\n    >\\n      <Logo />\\n    </section>\\n  );\\n};\\nexport default LogoSection;\\n\")), mdx(\"p\", null, \"Next up is our author section which will site next to our logo section Create a new file inside of src/components/site\\ncalled author-section.js\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"author-section.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport { Link } from \\\"gatsby\\\";\\nimport { houseEmoji, spellsEmoji } from \\\"./../../helpers/helpers\\\";\\nimport styled from \\\"@emotion/styled\\\";\\nimport { wizardEmoji } from \\\"./../../helpers/helpers\\\";\\n\\nconst InternalLink = styled(Link)`\\n  color: #fff;\\n  &:hover {\\n    background-image: linear-gradient(\\n      90deg,\\n      rgba(127, 9, 9, 1) 0%,\\n      rgba(255, 197, 0, 1) 12%,\\n      rgba(238, 225, 23, 1) 24%\\n    );\\n    background-size: 100%;\\n    background-repeat: repeat;\\n    -webkit-background-clip: text;\\n    -webkit-text-fill-color: transparent;\\n    font-weight: bold;\\n  }\\n`;\\n\\nconst ExternalLink = styled.a`\\n  color: #fff;\\n  &:hover {\\n    background-image: linear-gradient(\\n      90deg,\\n      rgba(127, 9, 9, 1) 0%,\\n      rgba(255, 197, 0, 1) 12%,\\n      rgba(238, 225, 23, 1) 24%,\\n      rgba(0, 0, 0, 1) 36%,\\n      rgba(13, 98, 23, 1) 48%,\\n      rgba(170, 170, 170, 1) 60%,\\n      rgba(0, 10, 144, 1) 72%,\\n      rgba(148, 119, 45, 1) 84%\\n    );\\n    background-size: 100%;\\n    background-repeat: repeat;\\n    -webkit-background-clip: text;\\n    -webkit-text-fill-color: transparent;\\n    font-weight: bold;\\n  }\\n`;\\n\\nconst AuthorSection = () => {\\n  return (\\n    <section\\n      sx={{\\n        gridArea: \\\"author\\\",\\n        position: \\\"relative\\\",\\n        margin: \\\"0 auto\\\"\\n      }}\\n    >\\n      <h1\\n        sx={{\\n          fontFamily: \\\"heading\\\",\\n          color: \\\"white\\\",\\n          letterSpacing: \\\"text\\\",\\n          fontSize: [\\\"3em\\\", \\\"3em\\\", \\\"5em\\\"]\\n        }}\\n      >\\n        Serverless Potter\\n      </h1>\\n      <div\\n        sx={{\\n          display: \\\"flex\\\",\\n          justifyContent: \\\"start\\\",\\n          alignItems: \\\"flex-start\\\",\\n          width: \\\"300px\\\",\\n          marginTop: \\\"3em\\\"\\n        }}\\n      >\\n        <InternalLink\\n          sx={{\\n            fontFamily: \\\"heading\\\",\\n            fontSize: \\\"2.5em\\\",\\n            // color: 'white',\\n            marginRight: \\\"2em\\\"\\n          }}\\n          to=\\\"/houses\\\"\\n        >\\n          Houses\\n        </InternalLink>\\n        <InternalLink\\n          sx={{\\n            fontFamily: \\\"heading\\\",\\n            fontSize: \\\"2.5em\\\",\\n            color: \\\"white\\\"\\n          }}\\n          to=\\\"/spells\\\"\\n        >\\n          Spells\\n        </InternalLink>\\n      </div>\\n      <p\\n        sx={{\\n          fontFamily: \\\"heading\\\",\\n          letterSpacing: \\\"body\\\",\\n          fontSize: \\\"2em\\\",\\n          color: \\\"white\\\",\\n          marginTop: \\\"2em\\\",\\n          width: [\\\"300px\\\", \\\"500px\\\", \\\"900px\\\"]\\n        }}\\n      >\\n        This is a site that goes with the tutorial on creating a jamstack site with serverless functions and FaunaDB I\\n        decided to use the potter api as i love the world of harry potter {wizardEmoji}\\n      </p>\\n      <p\\n        sx={{\\n          fontFamily: \\\"heading\\\",\\n          letterSpacing: \\\"body\\\",\\n          fontSize: \\\"2em\\\",\\n          color: \\\"white\\\",\\n          marginTop: \\\"1em\\\",\\n          width: [\\\"300px\\\", \\\"500px\\\", \\\"900px\\\"]\\n        }}\\n      >\\n        Built with Gatsby, Netlify functions, Apollo and FaunaDB. Data provided via the Potter API.\\n      </p>\\n      <p\\n        sx={{\\n          fontFamily: \\\"heading\\\",\\n          letterSpacing: \\\"body\\\",\\n          fontSize: \\\"2em\\\",\\n          color: \\\"white\\\",\\n          marginTop: \\\"1em\\\",\\n          width: [\\\"300px\\\", \\\"500px\\\", \\\"900px\\\"]\\n        }}\\n      >\\n        Select <strong>Houses</strong> or <strong>Spells</strong> to begin exploring potter stats!\\n      </p>\\n      <div\\n        sx={{\\n          display: \\\"flex\\\",\\n          flexDirection: \\\"column\\\"\\n        }}\\n      >\\n        <ExternalLink\\n          sx={{\\n            fontFamily: \\\"heading\\\",\\n            letterSpacing: \\\"body\\\",\\n            fontSize: \\\"2em\\\",\\n            color: \\\"white\\\",\\n            marginTop: \\\"1em\\\",\\n            width: [\\\"300px\\\", \\\"500px\\\", \\\"900px\\\"]\\n          }}\\n          href=\\\"your-personal-website\\\"\\n        >\\n          author: your name here!\\n        </ExternalLink>\\n        <ExternalLink\\n          sx={{\\n            fontFamily: \\\"heading\\\",\\n            letterSpacing: \\\"body\\\",\\n            fontSize: \\\"2em\\\",\\n            color: \\\"white\\\",\\n            marginTop: \\\"1em\\\",\\n            width: \\\"900px\\\"\\n          }}\\n          href=\\\"your-github-repo-for-this-project\\\"\\n        >\\n          github: the name you gave this project\\n        </ExternalLink>\\n      </div>\\n    </section>\\n  );\\n};\\nexport default AuthorSection;\\n\")), mdx(\"p\", null, \"This component outlines what the project is, displays links to the other pages and the projects repository. You can\\nchange the text I\\u2019ve added, this was just for demo purposes. As you can see, we are again using emotion/styled as we are\\nmaking use of the -webkit-background-clip property on our cool linear-gradient links. We have two here, one for external\\nlinks, which uses the a tag, and another for internal link which uses Gatsby Link. Note that you should always use the\\ntraditional HTML a tag for external links and the Gatsby Link to configure your internal routing.\"), mdx(\"p\", null, \"You may also notice that there is an import from a helper file what exports some emojis. Lets take a look at that.\\nCreate a new folder inside of src.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"    cd src\\n    mkdir helpers && touch helpers.js\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"helpers.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export const gryffindorColors = \\\"linear-gradient(90deg, rgba(127,9,9,1) 27%, rgba(255,197,0,1) 61%)\\\";\\nexport const hufflepuffColors = \\\"linear-gradient(90deg, rgba(238,225,23,1) 35%, rgba(0,0,0,1) 93%)\\\";\\nexport const slytherinColors = \\\"linear-gradient(90deg, rgba(13,98,23,1) 32%, rgba(170,170,170,1) 69%)\\\";\\nexport const ravenclawColors = \\\"linear-gradient(90deg, rgba(0,10,144,1) 32%, rgba(148,107,45,1) 69%)\\\";\\n\\nexport const houseEmoji = `\\uD83C\\uDFE1`;\\nexport const spellsEmoji = `\\uD83D\\uDCAB`;\\nexport const wandEmoji = `\\uD83D\\uDCAB`;\\nexport const patronusEmoji = `\\u2728`;\\nexport const deathEaterEmoji = `\\uD83D\\uDC0D`;\\nexport const dumbledoresArmyEmoji = `\\u2694\\uFE0F`;\\nexport const roleEmoji = `\\uD83D\\uDCD6`;\\nexport const bloodStatusEmoji = `\\uD83E\\uDDD9\\uD83C\\uDFFE\\u200D\\u2640\\uFE0F \\uD83E\\uDD35\\uD83C\\uDFFE`;\\nexport const orderOfThePheonixEmoji = `\\uD83E\\uDD84`;\\nexport const ministryOfMagicEmoji = `\\uD83D\\uDCDC`;\\nexport const boggartEmoji = `\\uD83D\\uDD6F`;\\nexport const aliasEmoji = `\\uD83D\\uDC68\\uD83C\\uDFFC\\u200D\\uD83C\\uDFA4`;\\nexport const wizardEmoji = `\\uD83E\\uDDD9\\uD83C\\uDFFC\\u200D\\u2642\\uFE0F`;\\nexport const gryffindorEmoji = `\\uD83E\\uDD81`;\\nexport const hufflepuffEmoji = `\\uD83E\\uDDA1`;\\nexport const slytherinEmoji = `\\uD83D\\uDC0D`;\\nexport const ravenclawEmoji = `\\uD83E\\uDD85`;\\n\\nexport function checkNull(value) {\\n  return value !== null ? value : \\\"unknown\\\";\\n}\\nexport function checkDeathEater(value) {\\n  if (value === false) {\\n    return \\\"no\\\";\\n  }\\n  return \\\"undoubtedly\\\";\\n}\\nexport function checkDumbledoresArmy(value) {\\n  if (value === false) {\\n    return \\\"no\\\";\\n  }\\n  return `undoubtedly ${wizardEmoji}`;\\n}\\n\")), mdx(\"p\", null, \"The emojis were taken from a really cool site called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://beautifuldingbats.com/emoji-clipboard/\"\n  }), \"Emoji Clipboard\"), \",\\nit lets you search and literally copy paste the emojis! We\\u2019ll be using these emojis in our cards to display the\\ncharacters from Harry Potter. As well as the emojis we have some utility functions that will also be used in the cards.\\nEach house in Harry Potter has a set of colors that sets them apart form the other houses. These we have exported as\\nlinear-gradients for later use.\"), mdx(\"p\", null, \"Nice! We are nearly there but we haven\\u2019t quite finished yet! Next we will use our data and display it to the user of our\\nsite!\"), mdx(\"p\", null, \"We have done quite a bit of setup but haven\\u2019t yet had a chance to use our data that we have saved in our Fauna database.\\nNow\\u2019s the time to bring in Apollo and put together a page that shows all the characters data for each house. We are also\\ngoing to implement a simple searchbar to allow the user to search the characters of each house!\"), mdx(\"p\", null, \"Inside src/pages create a new file called houses.js and add the following:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"houses.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport React from \\\"react\\\";\\nimport { gql, useQuery } from \\\"@apollo/client\\\";\\nimport MainSection from \\\"./../components/site/main-section\\\";\\nimport { HousesPhoneTemplateAreas, HousesTabletTemplateAreas, HousesDesktopTemplateAreas } from \\\"../window\\\";\\n\\nconst GET_CHARACTERS = gql`\\n  query GetCharacters {\\n    allCharacters {\\n      data {\\n        _id\\n        name\\n        house\\n        patronus\\n        bloodStatus\\n        role\\n        school\\n        deathEater\\n        dumbledoresArmy\\n        orderOfThePheonix\\n        ministryOfMagic\\n        alias\\n        wand\\n        boggart\\n        animagus\\n      }\\n    }\\n  }\\n`;\\n\\nconst Houses = () => {\\n  const { loading: characterLoading, error: characterError, data: characterData } = useQuery(GET_CHARACTERS);\\n  const [selectedHouse, setSelectedHouse] = React.useState([]);\\n\\n  React.useEffect(() => {\\n    const gryffindor =\\n      !characterLoading &&\\n      !characterError &&\\n      characterData.allCharacters.data.filter(char => char.house === \\\"Gryffindor\\\");\\n    setSelectedHouse(gryffindor);\\n  }, [characterLoading, characterData]);\\n\\n  const getHouse = house => {\\n    switch (house) {\\n      case \\\"gryffindor\\\":\\n        setSelectedHouse(\\n          !characterLoading &&\\n            !characterError &&\\n            characterData.allCharacters.data.filter(char => char.house === \\\"Gryffindor\\\")\\n        );\\n        break;\\n      case \\\"hufflepuff\\\":\\n        setSelectedHouse(\\n          !characterLoading &&\\n            !characterError &&\\n            characterData.allCharacters.data.filter(char => char.house === \\\"Hufflepuff\\\")\\n        );\\n        break;\\n      case \\\"slytherin\\\":\\n        setSelectedHouse(\\n          !characterLoading &&\\n            !characterError &&\\n            characterData.allCharacters.data.filter(char => char.house === \\\"Slytherin\\\")\\n        );\\n        break;\\n      case \\\"ravenclaw\\\":\\n        setSelectedHouse(\\n          !characterLoading &&\\n            !characterError &&\\n            characterData.allCharacters.data.filter(char => char.house === \\\"Ravenclaw\\\")\\n        );\\n        break;\\n      default:\\n        setSelectedHouse(\\n          !characterLoading &&\\n            !characterError &&\\n            characterData.allCharacters.data.filter(char => char.house === \\\"Gryffindor\\\")\\n        );\\n        break;\\n    }\\n  };\\n  return (\\n    <div\\n      sx={{\\n        gridArea: \\\"main\\\",\\n        display: \\\"grid\\\",\\n        gridTemplateColumns: \\\"repeat(auto-fit, minmax(250px, auto))\\\",\\n        gridAutoRows: \\\"auto\\\",\\n        gridTemplateAreas: [\\n          HousesSpellsPhoneTemplateAreas,\\n          HousesSpellsTabletTemplateAreas,\\n          HousesSpellsDesktopTemplateAreas\\n        ],\\n        width: \\\"100%\\\",\\n        height: \\\"100%\\\",\\n        position: \\\"relative\\\"\\n      }}\\n    >\\n      <MainSection house={selectedHouse} getHouse={getHouse} />\\n    </div>\\n  );\\n};\\nexport default Houses;\\n\")), mdx(\"p\", null, \"We are using @apollo/client from which we import gql to construct our graphql query and the useQuery hook which will\\ntake care of handling the state of the returned data for us. This handy hook returns three states:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"loading - Is the data currently loading?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"error - If there was an error we will get it here\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"data - The requested data\")), mdx(\"p\", null, \"Our page will be handling the currently selected house so we use the React useState hook and initialize it with an empty\\narray on first render. There after we use the useEffect hook to set the initial house as Gryffindor (because Gryffindor\\nis best. Fight me!) The dependency array takes in the loading and data states.\"), mdx(\"p\", null, \"We then have a function which returns a switch statement (I know not everyone likes these but i do and i find that they\\nare simple to read and understand). This function checks the currently selected house and if there are no errors in the\\nquery it loads the data from that house into the selected house state array. This function is passed down to another\\ncomponent which uses that data to display the house characters in a grid of cards.\"), mdx(\"p\", null, \"Lets create that component now. Inside src/components/site create a new file called main-section.js\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main-section.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport React from \\\"react\\\";\\nimport Card from \\\"../cards/card\\\";\\nimport SearchBar from \\\"./searchbar\\\";\\nimport { useSearchBar } from \\\"./useSearchbar\\\";\\nimport Loading from \\\"./loading\\\";\\nimport HouseSection from \\\"./house-section\\\";\\n\\nconst MainSection = React.memo(({ house, getHouse }) => {\\n  const { members, handleSearchQuery } = useSearchBar(house);\\n\\n  return house.length ? (\\n    <div\\n      sx={{\\n        gridArea: \\\"main\\\",\\n        height: \\\"100%\\\",\\n        position: \\\"relative\\\"\\n      }}\\n    >\\n      <div\\n        sx={{\\n          color: \\\"white\\\",\\n          display: \\\"flex\\\",\\n          flexDirection: \\\"column\\\",\\n          justifyContent: \\\"center\\\",\\n          alignItems: \\\"center\\\",\\n          fontFamily: \\\"heading\\\",\\n          letterSpacing: \\\"body\\\",\\n          fontSize: \\\"2em\\\",\\n          position: \\\"relative\\\"\\n        }}\\n      >\\n        <h4>\\n          {house[0].house} Members - {house.length}\\n        </h4>\\n        <SearchBar handleSearchQuery={handleSearchQuery} />\\n        <HouseSection getHouse={getHouse} />\\n      </div>\\n      <section\\n        sx={{\\n          margin: \\\"0 auto\\\",\\n          width: \\\"100%\\\",\\n          display: \\\"grid\\\",\\n          gridAutoRows: \\\"auto\\\",\\n          gridTemplateColumns: \\\"repeat(auto-fill, minmax(auto, 500px))\\\",\\n          gap: \\\"1.5em\\\",\\n          justifyContent: \\\"space-evenly\\\",\\n          marginTop: \\\"1em\\\",\\n          position: \\\"relative\\\",\\n          height: \\\"100vh\\\"\\n        }}\\n      >\\n        {members.map((char, index) => (\\n          <Card key={char._id} index={index} {...char} />\\n        ))}\\n      </section>\\n    </div>\\n  ) : (\\n    <Loading />\\n  );\\n});\\nexport default MainSection;\\n\")), mdx(\"p\", null, \"Our main section is wrapped in memo, which means that React will render the component and memorize the result. If the\\nnext time the props are passed in and they are the same, React will use the memorized result and skip re-rendering the\\ncomponent again. This is helpful as our component will be re-rendering a lot as the user changes houses or uses the\\nsearchbar, which will will soon create.\"), mdx(\"p\", null, \"In fact, lets do do that now. We will be creating a search bar component and a custom hook to handle the search logic.\\nInside src/components/site create two new files. searchbar.js and useSearchbar.js\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"searchbar.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\n\\nconst SearchBar = ({ handleSearchQuery }) => {\\n  return (\\n    <div\\n      sx={{\\n        display: \\\"flex\\\",\\n        justifyContent: \\\"center\\\",\\n        alignItems: \\\"center\\\",\\n        margin: \\\"2em\\\"\\n      }}\\n    >\\n      <input\\n        sx={{\\n          color: \\\"greyBlack\\\",\\n          fontFamily: \\\"heading\\\",\\n          fontSize: \\\"0.8em\\\",\\n          fontWeight: \\\"bold\\\",\\n          letterSpacing: \\\"body\\\",\\n          border: \\\"1px solid\\\",\\n          borderColor: \\\"accent\\\",\\n          width: \\\"300px\\\",\\n          height: \\\"50px\\\",\\n          padding: \\\"0.4em\\\"\\n        }}\\n        type=\\\"text\\\"\\n        id=\\\"members-searchbar\\\"\\n        placeholder=\\\"Search members..\\\"\\n        onChange={handleSearchQuery}\\n      />\\n    </div>\\n  );\\n};\\nexport default SearchBar;\\n\")), mdx(\"p\", null, \"Our searchbar takes in a search query function which is called when the input is used. The rest is just styling.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"useSearchbar.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\";\\nexport const useSearchBar = data => {\\n  const emptyQuery = \\\"\\\";\\n  const [searchQuery, setSearchQuery] = React.useState({\\n    filteredData: [],\\n    query: emptyQuery\\n  });\\n\\n  const handleSearchQuery = e => {\\n    const query = e.target.value;\\n    const members = data || [];\\n\\n    const filteredData = members.filter(member => {\\n      return member.name.toLowerCase().includes(query.toLowerCase());\\n    });\\n\\n    setSearchQuery({ filteredData, query });\\n  };\\n\\n  const { filteredData, query } = searchQuery;\\n  const hasSearchResult = filteredData && query !== emptyQuery;\\n  const members = hasSearchResult ? filteredData : data;\\n\\n  return { members, handleSearchQuery };\\n};\\n\")), mdx(\"p\", null, \"Our custom hook takes the selected house data as a prop. It has an internal state which holds an emptyQuery variable\\nwhich we set to empty string and a filteredData array, set to empty. The function that runs in our searchbar is the\\nfollowing function declared in the hook. It takes the query as an event from the input, checks if the data provided to\\nthe hook has data or sets it to an empty array as a new variable called members. It then filters over the members array\\nand checks if the query matches one of the characters names. Finally it sets the state with the returned filtered data\\nand query.\"), mdx(\"p\", null, \"We structure the state and create a new variable which checks if the state had any data or not. Finally returning the\\ndata, be that empty or not and the search function.\"), mdx(\"p\", null, \"Phew! That was a lot to go over. Going back to our main section we can see that we are importing our new hook and\\npassing in the selected house data, then destructing the members and search query function. The component checks if the\\nhouse array has any length, if it does it returns the page. The page displays the current house, how many members the\\nhouse has, the searchbar (which takes the search query function as a prop), a new house section which we will build and\\nmaps over the members returned from our custom hook.\"), mdx(\"p\", null, \"In the house section we will make use of a super amazing library called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.framer.com/motion/\"\n  }), \"Framer Motion\"), \".\\nLets first see how our new component looks and what it does.\"), mdx(\"p\", null, \"In src/components/site create a new file called house-section.js\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"house-section.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport { gryffindorColors, hufflepuffColors, slytherinColors, ravenclawColors } from \\\"./../../helpers/helpers\\\";\\nimport styled from \\\"@emotion/styled\\\";\\nimport { motion } from \\\"framer-motion\\\";\\n\\nconst House = styled.a`\\n  color: #fff;\\n  &:hover {\\n    background-image: ${props => props.house};\\n    background-size: 100%;\\n    background-repeat: repeat;\\n    -webkit-background-clip: text;\\n    -webkit-text-fill-color: transparent;\\n    font-weight: bold;\\n  }\\n`;\\n\\nconst HouseSection = ({ getHouse }) => {\\n  return (\\n    <section\\n      sx={{\\n        width: \\\"100%\\\",\\n        position: \\\"relative\\\"\\n      }}\\n    >\\n      <ul\\n        sx={{\\n          listStyle: \\\"none\\\",\\n          cursor: \\\"crosshair\\\",\\n          fontFamily: \\\"heading\\\",\\n          fontSize: \\\"1em\\\",\\n          display: \\\"flex\\\",\\n          flexDirection: [\\\"column\\\", \\\"row\\\", \\\"row\\\"],\\n          alignItems: \\\"center\\\",\\n          justifyContent: \\\"space-evenly\\\",\\n          position: \\\"relative\\\"\\n        }}\\n      >\\n        <motion.li\\n          initial={{ scale: 0 }}\\n          animate={{ scale: 1 }}\\n          transition={{\\n            type: \\\"spring\\\",\\n            stiffness: 200,\\n            damping: 20,\\n            delay: 0.2\\n          }}\\n        >\\n          <House onClick={() => getHouse(\\\"gryffindor\\\")} house={gryffindorColors}>\\n            Gryffindor\\n          </House>\\n        </motion.li>\\n        <motion.li\\n          initial={{ scale: 0 }}\\n          animate={{ scale: 1 }}\\n          transition={{\\n            type: \\\"spring\\\",\\n            stiffness: 200,\\n            damping: 20,\\n            delay: 0.4\\n          }}\\n        >\\n          <House onClick={() => getHouse(\\\"hufflepuff\\\")} house={hufflepuffColors}>\\n            Hufflepuff\\n          </House>\\n        </motion.li>\\n        <motion.li\\n          initial={{ scale: 0 }}\\n          animate={{ scale: 1 }}\\n          transition={{\\n            type: \\\"spring\\\",\\n            stiffness: 200,\\n            damping: 20,\\n            delay: 0.6\\n          }}\\n        >\\n          <House onClick={() => getHouse(\\\"slytherin\\\")} house={slytherinColors}>\\n            Slytherin\\n          </House>\\n        </motion.li>\\n        <motion.li\\n          initial={{ scale: 0 }}\\n          animate={{ scale: 1 }}\\n          transition={{\\n            type: \\\"spring\\\",\\n            stiffness: 200,\\n            damping: 20,\\n            delay: 0.8\\n          }}\\n        >\\n          <House onClick={() => getHouse(\\\"ravenclaw\\\")} house={ravenclawColors}>\\n            Ravenclaw\\n          </House>\\n        </motion.li>\\n      </ul>\\n    </section>\\n  );\\n};\\nexport default HouseSection;\\n\")), mdx(\"p\", null, \"The purpose of this component is to show the user the four houses of Hogwarts, let them select a house and pass that\\nselection back up to the main-section state. The component takes the getHouse function from main-section as a prop. We\\nhave created an internal link styled component , which takes each houses colours from our helper file, and returns the\\nselected house on click.\"), mdx(\"p\", null, \"Using framer motion we prepend each li with the motion tag. This allows us to add a simple scale animation by setting\\nthe initial value 0 (so it\\u2019s not visible), using the animate prop we say that it should animate in to it\\u2019s set size. The\\ntransition is specifying how the animation will work.\"), mdx(\"p\", null, \"Back to the main-section component, we map over each member in the house and display their data in a Card component by\\nspreading all the character data. Lets create that now.\"), mdx(\"p\", null, \"Inside src/components/site create a new file called card.js\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"card.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport {\\n  checkNull,\\n  checkDeathEater,\\n  checkDumbledoresArmy,\\n  hufflepuffColors,\\n  ravenclawColors,\\n  gryffindorColors,\\n  slytherinColors,\\n  houseEmoji,\\n  wandEmoji,\\n  patronusEmoji,\\n  bloodStatusEmoji,\\n  ministryOfMagicEmoji,\\n  boggartEmoji,\\n  roleEmoji,\\n  orderOfThePheonixEmoji,\\n  deathEaterEmoji,\\n  dumbledoresArmyEmoji,\\n  aliasEmoji\\n} from \\\"./../../helpers/helpers\\\";\\nimport { motion } from \\\"framer-motion\\\";\\n\\nconst container = {\\n  hidden: { scale: 0 },\\n  show: {\\n    scale: 1,\\n    transition: {\\n      delayChildren: 1\\n    }\\n  }\\n};\\n\\nconst item = {\\n  hidden: { scale: 0 },\\n  show: { scale: 1 }\\n};\\n\\nconst Card = ({\\n  _id,\\n  name,\\n  house,\\n  patronus,\\n  bloodStatus,\\n  role,\\n  deathEater,\\n  dumbledoresArmy,\\n  orderOfThePheonix,\\n  ministryOfMagic,\\n  alias,\\n  wand,\\n  boggart,\\n  animagus,\\n  index\\n}) => {\\n  return (\\n    <motion.div variants={container} initial=\\\"hidden\\\" animate=\\\"show\\\">\\n      <motion.div\\n        variants={item}\\n        sx={{\\n          border: \\\"solid 2px\\\",\\n          borderImageSource:\\n            house === \\\"Gryffindor\\\"\\n              ? gryffindorColors\\n              : house === \\\"Hufflepuff\\\"\\n              ? hufflepuffColors\\n              : house === \\\"Slytherin\\\"\\n              ? slytherinColors\\n              : house === \\\"Ravenclaw\\\"\\n              ? ravenclawColors\\n              : null,\\n          borderImageSlice: 1,\\n          display: \\\"flex\\\",\\n          flexDirection: \\\"column\\\",\\n          padding: \\\"1em\\\",\\n          margin: \\\"1em\\\",\\n          minWidth: [\\\"250px\\\", \\\"400px\\\", \\\"500px\\\"]\\n        }}\\n      >\\n        <h2\\n          sx={{\\n            color: \\\"white\\\",\\n            fontFamily: \\\"heading\\\",\\n            letterSpacing: \\\"body\\\",\\n            fontSize: \\\"2.5em\\\",\\n            borderBottom: \\\"solid 2px\\\",\\n            borderColor: \\\"white\\\"\\n          }}\\n        >\\n          {name}\\n        </h2>\\n        <div\\n          sx={{\\n            display: \\\"grid\\\",\\n            gridTemplateColumns: \\\"1fr 1fr\\\",\\n            gridTemplateRows: \\\"auto\\\",\\n            gap: \\\"2em\\\",\\n            marginTop: \\\"2em\\\"\\n          }}\\n        >\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>house:</strong> {house} {houseEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>wand:</strong> {checkNull(wand)} {wandEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>patronus:</strong> {checkNull(patronus)} {patronusEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>boggart:</strong> {checkNull(boggart)} {boggartEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>blood:</strong> {checkNull(bloodStatus)} {bloodStatusEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>role:</strong> {checkNull(role)} {roleEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>order of the pheonix:</strong> {checkNull(orderOfThePheonix)} {orderOfThePheonixEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>ministry of magic:</strong> {checkDeathEater(ministryOfMagic)} {ministryOfMagicEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>death eater:</strong> {checkDeathEater(deathEater)} {deathEaterEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>dumbledores army:</strong> {checkDumbledoresArmy(dumbledoresArmy)} {dumbledoresArmyEmoji}\\n          </p>\\n          <p\\n            sx={{\\n              color: \\\"white\\\",\\n              fontFamily: \\\"heading\\\",\\n              letterSpacing: \\\"body\\\",\\n              fontSize: \\\"1.5em\\\"\\n            }}\\n          >\\n            <strong>alias:</strong> {checkNull(alias)} {aliasEmoji}\\n          </p>\\n        </div>\\n      </motion.div>\\n    </motion.div>\\n  );\\n};\\nexport default Card;\\n\")), mdx(\"p\", null, \"We are importing all of those cool emojis we added earlier in our helper file. The container and item objects are for\\nuse in our animations from framer motion. We descructure our props, of which there are many, and return a div which has\\nthe framer motion object prepended to it and the item object passed to the variants prop. This is a simpler way of\\npassing the object and all of it\\u2019s values through. For certain properties we run a null check against them to\\ndeterminate what we should show.\"), mdx(\"p\", null, \"The only thing left to do is implement the Spells page and its associated components then the implementation of this\\nsite is done! Given all we have covered I\\u2019m sure you can handle the last part!\"), mdx(\"p\", null, \"Your final result should resemble something like this:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://serverless-graphql-potter.netlify.app/\"\n  }), \"serverless-graphql-potter\"), \".\"), mdx(\"p\", null, \"Did you notice the cool particles? That\\u2019s a nice touch you could add to your site!\"), mdx(\"h2\", {\n    \"id\": \"deploy-the-beast\"\n  }, \"Deploy the beast!\"), mdx(\"p\", null, \"That\\u2019s a lot of code and we haven\\u2019t even checked that it works!! (of course during development you should check how\\nthings look and work and make changes accordingly, I didn\\u2019t cover running the site as that\\u2019s common practice while\\ndeveloping). Lets deploy our site to Netlify and check it out!\"), mdx(\"p\", null, \"At the projects root create a new file called netlify.toml\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"netlify.toml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"[build]\\n    command = \\\"yarn build\\\"\\n    functions = \\\"functions\\\"\\n    publish = \\\"public\\\"\\n\")), mdx(\"p\", null, \"If you don\\u2019t already have an account, create a new one at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.netlify.com/\"\n  }), \"netlify.com\"), \". To publish your site:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click create new site, identify yourself and choose your repository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"set your build command as yarn build and publish directory as public\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click site settings and change site name and\\u2026. change the name!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On the left tab menu find build and deploy and click that and scroll down to the environment section and add your\\nenvironment variables: SERVER_KEY and FAUNA_ADMIN\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can add the functions path under the functions tab but Netlify will also pick this up from the netlify.toml file\\nyou created\")), mdx(\"p\", null, \"When you first created this new site Netlify tried to deploy it. It wouldn\\u2019t have worked as we hadn\\u2019t set the\\nenvironment variables yet. Go to the deploys tab at the top of the page and hit the trigger deploy dropdown and deploy\\nsite. If you encounter any issues then please drop me an email at hello@richardhaines.dev and we can try and work\\nthrough it together.\"), mdx(\"p\", null, \"And that\\u2019s it! I hope you enjoyed it and learnt something along the way. Thank you for coming to my TED talk \\uD83D\\uDE05\"), mdx(\"p\", null, \"If you liked this article feel free to give me a follow on Twitter with the blue button at the top of the page. \\uD83D\\uDE07\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Jamstack and the power of serverless with FaunaDB\",\n  \"date\": \"2020-06-16T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Tutorial\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"gatsby\", \"theme-ui\", \"netlify functions\", \"faunadb\", \"serverless\", \"tutorial\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In this article we will create a Jamstack website powered by Gatsby, Netlify Functions, Apollo and FaunaDB. Our site\nwill use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.potterapi.com/\"\n      }}>{`Harry Potter API`}</a>{` for its data that will be stored in a\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://dashboard.fauna.com/accounts/register?utm_source=RichardHainesDev&utm_medium=referral&utm_campaign=WritewithFauna_Jamstack_RichardHaines\"\n      }}>{`FaunaDB`}</a>{`\ndatabase. The data will be accessed using serverless functions and `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/\"\n      }}>{`Apollo`}</a>{`.\nFinally we will display our data in a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.org/\"\n      }}>{`Gatsby`}</a>{` site styled using\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://theme-ui.com/\"\n      }}>{`Theme-ui`}</a>{`.`}</p>\n    <p>{`This finished site will look a little something like this:\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://serverless-graphql-potter.netlify.app/\"\n      }}>{`serverless-graphql-potter.netlify.app/`}</a></p>\n    <p>{`We will begin by focusing on what these technologies are and why, as frontend developers, we should be leveraging them.\nWe will then begin our project and create our schema.`}</p>\n    <h2 {...{\n      \"id\": \"the-jamstack\"\n    }}>{`The Jamstack`}</h2>\n    <p>{`Jamstack is a term often used to describe sites that are served as static assets to a\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.cloudflare.com/learning/cdn/what-is-a-cdn/\"\n      }}>{`CDN`}</a>{`, of course this is nothing new, anyone who has made a\nsimple site with HTML and CSS and published it has served a static site. To walk away thinking that the only purpose of\nJamstack sites are to serve static files would be doing it a great injustice and miss some of the awesome things this\n\"new\" way of building web apps provides.`}</p>\n    <p>{`A few of the benefits of going Jamstack`}</p>\n    <ul>\n      <li parentName=\"ul\">{`High security and more secure. Fewer points of attack due to static files and external APIs served over CDN`}</li>\n      <li parentName=\"ul\">{`Cheaper hosting and easier scalability with serverless functions`}</li>\n      <li parentName=\"ul\">{`Fast! Pre-built assets served from a CDN instead of a server`}</li>\n    </ul>\n    <p>{`A popular way of storing the data your site requires, apart from as markdown files, is the use of a headless CMS\n(Content Management System). These CMSs have adopted the term headless as they don't come with their own frontend that\ndisplays the data stored, like Wordpress for example. Instead they are headless, they have no frontend.`}</p>\n    <p>{`A headless CMS can be set up so that once a change to the data is made in the CMS a new build is triggered via a webhook\n(just one way of doing it, you could trigger rebuilds other ways) and the site will be deployed again with the new data.`}</p>\n    <p>{`As an example we could have some images stored in our CMS that are pulled into our site via a graphql query and shown on\nour site. If we wanted to change one of our images we could do so via our CMS which would then trigger a new build on\npublish and the new image would then be visible on our site.`}</p>\n    <p>{`There are many great options to choose from when considering which CMS to use:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Netlify CMS`}</li>\n      <li parentName=\"ul\">{`Contenful`}</li>\n      <li parentName=\"ul\">{`Sanity.io`}</li>\n      <li parentName=\"ul\">{`Tina CMS`}</li>\n      <li parentName=\"ul\">{`Butter CMS`}</li>\n    </ul>\n    <p>{`The potential list is so long i will point you in the direction of a great site that lists most of them\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://headlesscms.org/\"\n      }}>{`headlesscms.org`}</a>{`!`}</p>\n    <p>{`For more information and a great overview of what the Jamstack is and some more of its benefits i recommend checking out\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://jamstack.org/\"\n      }}>{`jamstack.org`}</a>{`.`}</p>\n    <p>{`Just because our site is served as static assets, that doesn't mean we cant work in a dynamic way and have the benefits\nof dynamic data! We wont be diving deep into all of its benefits, but we will be looking at how we can take our static\nsite and make it dynamic by way of taking a serverless approach to handling our data through AWS Lambda functions, which\nwe will use via Netlify and FaunaDB.`}</p>\n    <h2 {...{\n      \"id\": \"serverless\"\n    }}>{`Serverless`}</h2>\n    <p>{`Back in the old days, long long ago before we spread our stack with jam, we had a website that was a combination of HTML\nmarkup, CSS styling and JavaScript. Our website gave our user data to access and manipulate and our data was stored in a\ndatabase which was hosted on a server. If we hosted this database ourselves we were responsible for keeping it going and\nmaintaining it and all of its stored data. Our database could hold only a certain amount of data which meant that if we\nwere lucky enough to get a lot of traffic it would soon struggle to handle all of the requests coming its way and so our\nend users might experience some downtime or no data at all.`}</p>\n    <p>{`If we paid for a hosted server then we were paying for the up time even when no requests were being sent.`}</p>\n    <p>{`To counter these issues serverless computing was introduced. Now, lets cut through all the magic this might imply and\nsimply state that serverless still involves servers, the big difference is that they are hosted in the cloud and execute\nsome code for us.`}</p>\n    <p>{`Providing the requested resources as a simple function they only run when that request is made. This means that we are\nonly charged for the resources and time the code is running for. With this approach we have done away with the need to\npay a server provider for constant up time, which is one of the big plus points of going serverless.`}</p>\n    <p>{`Being able to scale up and down is also a major benefit of using serverless functions to interact with our data stores.\nIn a nutshell this means that as multiple requests come in via our serverless functions, our cloud provider can create\nmultiple instances of the same function to handle those requests and run them in parallel. One downside to this is the\nconcept of cold starts where because our functions are spun up on demand they need a small amount of time to start up\nwhich can delay our response. However, once up if multiple requests are received our serverless functions will stay open\nto requests and handle them before closing down again.`}</p>\n    <h2 {...{\n      \"id\": \"faunadb\"\n    }}>{`FaunaDB`}</h2>\n    <p>{`FaunaDB is a global serverless database that has native graphql support, is multi tenancy which allows us to have nested\ndatabases and is low latency from any location. Its also one of the only serverless databases to follow the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/ACID\"\n      }}>{`ACID transactions`}</a>{` which guarantee consistent reads and writes to the database.`}</p>\n    <p>{`Fauna also provides us with a High Availability solution with each server globally located containing a partition of our\ndatabase, replicating our data asynchronously with each request with a copy of our database or the transaction made.`}</p>\n    <p>{`Some of the benefits to using Fauna can be summarized as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Transactional`}</li>\n      <li parentName=\"ul\">{`Multi-document`}</li>\n      <li parentName=\"ul\">{`Geo-distributed`}</li>\n    </ul>\n    <p>{`In short, Fauna frees the developer from worry about single or multi-document solutions. Guarantees consistent data\nwithout burdening the developer on how to model their system to avoid consistency issues. To get a good overview of how\nFauna does this see this `}<a parentName=\"p\" {...{\n        \"href\": \"https://fauna.com/blog/consistency-without-clocks-faunadb-transaction-protocol\"\n      }}>{`blog post`}</a>{`\nabout the FaunaDB distributed transaction protocol.`}</p>\n    <p>{`There are a few other alternatives that one could choose instead of using Fauna such as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Firebase`}</li>\n      <li parentName=\"ul\">{`Cassandra`}</li>\n      <li parentName=\"ul\">{`MongoDB`}</li>\n    </ul>\n    <p>{`But these options don't give us the ACID guarantees that Fauna does, compromising scaling.`}</p>\n    <h2 {...{\n      \"id\": \"acid\"\n    }}>{`ACID`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Atomic`}</strong>{` - all transactions are a single unit of truth, either they all pass or none. If we have multiple\ntransactions in the same request then either both are good or neither are, one cannot fail and the other succeed.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Consistent`}</strong>{` - A transaction can only bring the database from one valid state to another, that is, any data written\nto the database must follow the rules set out by the database, this ensures that all transactions are legal.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Isolation`}</strong>{` - When a transaction is made or created, concurrent transactions leave the state of the database the\nsame as is they would be if each request was made sequentially.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Durability`}</strong>{` - Any transaction that is made and committed to the database is persisted in the the database,\nregardless of down time of the system or failure.`}</li>\n    </ul>\n    <p>{`Now that we have a good overview of the stack we will be using lets get to the code!`}</p>\n    <h2 {...{\n      \"id\": \"setup-project\"\n    }}>{`Setup project`}</h2>\n    <p>{`We'll create a new folder to house our project, initialize it with yarn and add some files and folders to that we will\nbe working with throughout.`}</p>\n    <p>{`At the projects root create a functions folder with a nested graphql folder. In that folder we will create three files,\nour graphql schema which we will import into Fauna, our serverless function which will live in graphql.js and create the\nlink to and use the schema from Fauna and our database connection to Fauna.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir harry-potter\ncd harry-potter\nyarn init- y\nmkdir src/pages/\ncd src/pages && touch index.js\nmkdir src/components\ntouch gatsby-config.js\ntouch gatsby-browser.js\ntouch gatsby-ssr.js\ntouch .gitignore\n\nmkdir functions/graphql\ncd functions/graphql && touch schema.gql graphql.js db-connection.js\n`}</code></pre>\n    <p>{`We'll also need to add some packages.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add gatsby react react-dom theme-ui gatsby-plugin-theme-ui faunadb isomorphic-fetch dotenv\n`}</code></pre>\n    <p>{`Add the following to your newly created .gitignore file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`.netlify\nnode_modules\n.cache\npublic\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"serverless-setup\"\n    }}>{`Serverless setup`}</h2>\n    <p>{`Lets begin with our schema. We are going to take advantage of an awesome feature of Fauna. By creating our schema and\nimporting it into Fauna we are letting it take care of a lot of code for us by auto creating all the classes, indexes\nand possible resolvers.`}</p>\n    <p><strong parentName=\"p\">{`schema.gql`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    type Query {\n        allCharacters: [Character]!\n        allSpells: [Spell]!\n    }\n\n    type Character {\n        name: String!\n        house: String\n        patronus: String\n        bloodStatus: String\n        role: String\n        school: String\n        deathEater: Boolean\n        dumbledoresArmy: Boolean\n        orderOfThePheonix: Boolean\n        ministryOfMagic: Boolean\n        alias: String\n        wand: String\n        boggart: String\n        animagus: String\n    }\n\n    type Spell {\n        effect: String\n        spell: String\n        type: String\n    }\n`}</code></pre>\n    <p>{`Our schema is defining the shape of the data that we will soon be seeding into the data from the Potter API. Our top\nlevel query will return two things, an array of Characters and an array of Spells. We have then defined our Character\nand Spell types. We don't need to specify an id here as when we seed the data from the Potter API we will attach it\nthen.`}</p>\n    <p>{`Now that we have our schema we can import it into Fauna. Head to your fauna console and navigate to the graphql tab on\nthe left, click import schema and find the file we just created, click import and prepare to be amazed!`}</p>\n    <p>{`Once the import is complete we will be presented with a graphql playground where we can run queries against our newly\ncreated database using its schema. Alas, we have yet to add any data, but you can check the collections and indexes tabs\non the left of the console and see that fauna has created two new collections for us, Character and Spell.`}</p>\n    <p>{`A collection is a grouping of our data with each piece of data being a document. Or a table with rows if you are coming\nfrom an SQL background. Click the indexes tab to see our two new query indexes that we specified in our schema,\nallCharacters and allSpells. db-connection.js`}</p>\n    <p>{`Inside db-connection.js we will create the Fauna client connection, we will use this connection to seed data into our\ndatabase.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`require(\"dotenv\").config();\nconst faunadb = require(\"faunadb\");\nconst query = faunadb.query;\n\nfunction createClient() {\n  if (!process.env.FAUNA_ADMIN) {\n    throw new Error(\\`No FAUNA_ADMIN key in found, please check your fauna dashboard or create a new key.\\`);\n  }\n  const client = new faunadb.Client({\n    secret: process.env.FAUNA_ADMIN\n  });\n  return client;\n}\nexports.client = createClient();\nexports.query = query;\n`}</code></pre>\n    <p>{`Here we are creating a function which will check to see if we have an admin key from our Fauna database, if none is\nfound we are returning a helpful error message to the console. If the key is found we are creating a connection to our\nFauna database and exporting that connection from file. We are also exporting the query variable from Fauna as that will\nallow us to use some `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.fauna.com/fauna/current/api/fql/\"\n      }}>{`FQL`}</a>{` (Fauna Query Language) when seeding our data.`}</p>\n    <p>{`Head over to your Fauna console and click the security tab, click new key and select admin from the role dropdown. The\nadmin role will allow us to manage the database, in our case, seed data into it. Choose the name FAUNA_ADMIN and hit\nsave. We will need to create another key for use in using our stored schema from Fauna. Select server for the role of\nthis key and name it SERVER_KEY. Don't forget to make a note of the keys before you close the windows as you wont be\nable to view them again!`}</p>\n    <p>{`That’s a great start. Next up we will seed our data and begin implementing our frontend!`}</p>\n    <p>{`Now that we have our keys its time to grab one more, from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.potterapi.com/\"\n      }}>{`Potter API`}</a>{`, it's as simple\nas hitting the get key button in the top right hand corner of the page, make a note of it and head back to your code\neditor.`}</p>\n    <p>{`We don't want our keys getting into the wrong wizards hands so lets store them as environment variables. Create a .env\nfile at the projects root and add add them. Also add the .env path to the .gitignore file.`}</p>\n    <p><strong parentName=\"p\">{`.gitignore`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`// ...other stuff\n.env.*\n`}</code></pre>\n    <p><strong parentName=\"p\">{`.env`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`FAUNA_ADMIN=xxxxxxxxxxxxxxxxxxxxxxxxxxx\nSERVER_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxx\nPOTTER_KEY=xxxxxxxxxxxxxxxxxxxxxxxx\n`}</code></pre>\n    <p>{`Our database isn't much good if it doesn't have any data in it, lets change that! Create a file at the projects root and\nname it seed.js`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fetch = require(\"isomorphic-fetch\");\nconst { client, query } = require(\"./functions/graphql/db\");\nconst q = query;\nconst potterEndPoint = \\`https://www.potterapi.com/v1/characters/?key=\\${process.env.POTTER_KEY}\\`;\n\nfetch(potterEndPoint)\n  .then(res => res.json())\n  .then(res => {\n    console.log({ res });\n    const characterArray = res.map((char, index) => ({\n      _id: char._id,\n      name: char.name,\n      house: char.house,\n      patronus: char.patronus,\n      bloodStatus: char.blood,\n      role: char.role,\n      school: char.school,\n      deathEater: char.deathEater,\n      dumbledoresArmy: char.dumbledoresArmy,\n      orderOfThePheonix: char.orderOfThePheonix,\n      ministryOfMagic: char.ministryOfMagic,\n      alias: char.alias,\n      wand: char.wand,\n      boggart: char.boggart,\n      animagus: char.animagus\n    }));\n\n    client\n      .query(\n        q.Map(characterArray, q.Lambda(\"character\", q.Create(q.Collection(\"Character\"), { data: q.Var(\"character\") })))\n      )\n      .then(console.log(\"Wrote potter characters to FaunaDB\"))\n      .catch(err => console.log(\"Failed to add characters to FaunaDB\", err));\n  });\n`}</code></pre>\n    <p>{`There is quite a lot going on here so lets break it down.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`We are importing fetch to do a post against the potter endpoint`}</li>\n      <li parentName=\"ul\">{`We import our Fauna client connection and the query variable which holds the functions need to create the documents in\nour collection.`}</li>\n      <li parentName=\"ul\">{`We call the potter endpoint and map over the result, adding all the data we require (which also corresponds to the\nschema we create earlier).`}</li>\n      <li parentName=\"ul\">{`Using our Fauna client we use FQL to first map over the new array of characters, we then call a lambda function (an\nanonymous function) and choose a variable name for each row instance and create a new document in our Character\ncollection.`}</li>\n      <li parentName=\"ul\">{`If all was successful we return a message to the console, if unsuccessful we return the error.`}</li>\n    </ul>\n    <p>{`From the projects root run our new script.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`    node seed.js\n`}</code></pre>\n    <p>{`If you now take a look inside the collections tab in the Fauna console you will see that the database has populated with\nall the characters from the potterverse! Click on one of the rows (documents) and you can see the data.`}</p>\n    <p>{`We will create another seed script to get our spells data into our database. Run the script and check out the Spell\ncollections tab to view all the spells.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fetch = require(\"isomorphic-fetch\");\nconst { client, query } = require(\"./functions/graphql/db\");\nconst q = query;\nconst potterEndPoint = \\`https://www.potterapi.com/v1/spells/?key=\\${process.env.POTTER_KEY}\\`;\n\nfetch(potterEndPoint)\n  .then(res => res.json())\n  .then(res => {\n    console.log({ res });\n    const spellsArray = res.map((char, index) => ({\n      _id: char._id,\n      effect: char.effect,\n      spell: char.spell,\n      type: char.type\n    }));\n\n    client\n      .query(q.Map(spellsArray, q.Lambda(\"spell\", q.Create(q.Collection(\"Spell\"), { data: q.Var(\"spell\") }))))\n      .then(console.log(\"Wrote potter spells to FaunaDB\"))\n      .catch(err => console.log(\"Failed to add spells to FaunaDB\", err));\n  });\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`    node seed-spells.js\n`}</code></pre>\n    <p>{`Now that we have data in our database its time to create our serverless function which will pull in our schema from\nFauna.`}</p>\n    <p><strong parentName=\"p\">{`graphql.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`require(\"dotenv\").config();\nconst { createHttpLink } = require(\"apollo-link-http\");\nconst { ApolloServer, makeRemoteExecutableSchema, introspectSchema } = require(\"apollo-server-micro\");\nconst fetch = require(\"isomorphic-fetch\");\n\nconst link = createHttpLink({\n  uri: \"https://graphql.fauna.com/graphql\",\n  fetch,\n  headers: {\n    Authorization: \\`Bearer \\${process.env.SERVER_KEY}\\`\n  }\n});\n\nconst schema = makeRemoteExecutableSchema({\n  schema: introspectSchema(link),\n  link\n});\n\nconst server = new ApolloServer({\n  schema,\n  introspection: true\n});\n\nexports.handler = server.createHandler({\n  cors: {\n    origin: \"*\",\n    credentials: true\n  }\n});\n`}</code></pre>\n    <p>{`Lets go through what we just did.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`We created a link to Fauna using the createHttpLink function which takes our Fauna graphql endpoint and attaches our\nserver key to the header. This will fetch the graphql results from the endpoint over an http connection.`}</li>\n      <li parentName=\"ul\">{`We then grab our schema from Fauna using the makeRemoteExecutableSchema function by passing the link to the\nintrospectSchema function, we also provide the link.`}</li>\n      <li parentName=\"ul\">{`A new ApolloServer instance is then created and our schema passed in.`}</li>\n      <li parentName=\"ul\">{`Finally we export our handler as Netlify requires us to do when writing serverless functions.`}</li>\n      <li parentName=\"ul\">{`Note that we might, and most probably will, run into `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\n        }}>{`CORS`}</a>{`\nissues when trying to fetch our data so we pass our createHandler function the cors option, setting its origin to\nanything and credentials as true.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"using-our-data\"\n    }}>{`Using our data!`}</h2>\n    <p>{`Before we can think about displaying our data we must first do some tinkering. We will be using some handy hooks from\nApollo for querying our (namely `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/react/data/queries/\"\n      }}>{`useQuery`}</a>{`) and for that to work\nwe must first set up our provider, which is similar to Reacts context provider. We will wrap our sites root with this\nprovider and pass in our client, thus making it available throughout our site. To wrap the root element in a Gatsby site\nwe must use the gatsby-browser.js and gatsby-ssr.js files. The implementation will be identical in both.`}</p>\n    <p><strong parentName=\"p\">{`gatsby-browser.js && gatsby-ssr.js`}</strong></p>\n    <p>{`We will have to add a few more packages at this point:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`    yarn add @apollo/client apollo-link-context\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const React = require(\"react\");\nconst { ApolloProvider, ApolloClient, InMemoryCache } = require(\"@apollo/client\");\nconst { setContext } = require(\"apollo-link-context\");\nconst { createHttpLink } = require(\"apollo-link-http\");\nconst fetch = require(\"isomorphic-fetch\");\n\nconst httpLink = createHttpLink({\n  uri: \"https://graphql.fauna.com/graphql\",\n  fetch\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: \\`Bearer \\${process.env.SERVER_KEY}\\`\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nexport const wrapRootElement = ({ element }) => <ApolloProvider client={client}>{element}</ApolloProvider>;\n`}</code></pre>\n    <p>{`There are other ways of setting this up, i had originally just created an ApolloClient instance and passed in the\nNetlify functions url as a http link then passed that down to the provider but i was encountering authorization issues,\nwith a helpful message stating that the request lacked authorization headers. The solution was to send the authorization\nalong with a header on every http request.`}</p>\n    <p>{`Lets take a look at what we have here:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Created a new http link much the same as we did before when creating our server instance.`}</li>\n      <li parentName=\"ul\">{`Create an auth link which returns the headers to the context so the http link can read them. Here we pass in our Fauna\nkey with server rights.`}</li>\n      <li parentName=\"ul\">{`Then we create the client to be passed to the provider with the link now set as the auth link.`}</li>\n    </ul>\n    <p>{`Now that we have the nuts and bolts all setup we can move onto some frontend code!`}</p>\n    <h2 {...{\n      \"id\": \"make-it-work-then-make-it-pretty\"\n    }}>{`Make it work then make it pretty!`}</h2>\n    <p>{`We'll also want to create some base components. We'll be using a Gatsby layout plugin to make life easier for us. We'll\nalso utilize some google fonts via a plugin. Stay with me...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`    mkdir -p src/layouts/index.js\n    cd src/components && touch header.js\n    cd src/components && touch main.js\n    cd src/components && touch footer.js\n    yarn add gatsby-plugin-layout\n    yarn add gatsby-plugin-google-fonts\n`}</code></pre>\n    <p>{`Now we need to add the theme-ui, layout and google fonts plugins to our gatsby-config.js file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-plugin-google-fonts\",\n      options: {\n        fonts: [\"Muli\", \"Open Sans\", \"source sans pro:300,400,400i,700\"]\n      }\n    },\n    {\n      resolve: \"gatsby-plugin-layout\",\n      options: {\n        component: require.resolve(\"./src/layouts/index.js\")\n      }\n    },\n    \"gatsby-plugin-theme-ui\"\n  ]\n};\n`}</code></pre>\n    <p>{`We'll begin with our global layout. This will include a css reset and render our header component and any children,\nwhich in our case is the rest of the applications pages/components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { Global, css } from \"@emotion/core\";\nimport Header from \"./../components/site/header\";\n\nconst Layout = ({ children, location }) => {\n  return (\n    <>\n      <Global\n        styles={css\\`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            scroll-behavior: smooth;\n\n            /* width */\n            ::-webkit-scrollbar {\n              width: 10px;\n            }\n\n            /* Track */\n            ::-webkit-scrollbar-track {\n              background: #fff;\n              border-radius: 20px;\n            }\n\n            /* Handle */\n            ::-webkit-scrollbar-thumb {\n              background: #000;\n              border-radius: 20px;\n            }\n\n            /* Handle on hover */\n            ::-webkit-scrollbar-thumb:hover {\n              background: #000;\n            }\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n            height: 100%;\n          }\n        \\`}\n      />\n      <Header location={location} />\n      {children}\n    </>\n  );\n};\n\nexport default Layout;\n`}</code></pre>\n    <p>{`Because we are using gatsby-plugin-layout our layout component will be wrapped around all of our pages so that we can\nskip importing it ourselves. For our site its a trivial step as we could just as easily import it but for more complex\nlayout solutions this can come in real handy.`}</p>\n    <p>{`To provide an easy way to style our whole site through changing just a few variables we can utilize\ngatsby-plugin-theme-ui.`}</p>\n    <p>{`This article wont cover the specifics of how to use theme-ui, for that i suggest going over another tutorial i have\nwritten which covers the hows and whys\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://richardhaines.dev/how-to-make-a-gatsby-ecommerce-theme-part-1/\"\n      }}>{`how-to-make-a-gatsby-ecommerce-theme-part-1/`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`    cd src && mkdir gatsby-plugin-theme-ui && touch index.js\n`}</code></pre>\n    <p>{`In this file we will create our sites styles which we will be able to access via the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://theme-ui.com/sx-prop/\"\n      }}>{`theme-ui sx prop`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n  fonts: {\n    body: \"Open Sans\",\n    heading: \"Muli\"\n  },\n  fontWeights: {\n    body: 300,\n    heading: 400,\n    bold: 700\n  },\n  lineHeights: {\n    body: \"110%\",\n    heading: 1.125,\n    tagline: \"100px\"\n  },\n  letterSpacing: {\n    body: \"2px\",\n    text: \"5px\"\n  },\n  colors: {\n    text: \"#FFFfff\",\n    background: \"#121212\",\n    primary: \"#000010\",\n    secondary: \"#E7E7E9\",\n    secondaryDarker: \"#545455\",\n    accent: \"#DE3C4B\"\n  },\n  breakpoints: [\"40em\", \"56em\", \"64em\"]\n};\n`}</code></pre>\n    <p>{`Much of this is self explanatory, the breakpoints array is used to allow us to add responsive definitions to our inline\nstyles via the sx prop. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<p\n  sx={{\n    fontSize: [\"0.7em\", \"0.8em\", \"1em\"]\n  }}\n>\n  Some text here...\n</p>\n`}</code></pre>\n    <p>{`The font size array indexes corresponded to our breakpoints array set in our theme-ui index file. Next we'll create our\nheader component. But before we do we must install another package, i'll explain why once you see the component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`    yarn add @emotion/styled\n    cd src/components\n    mkdir site && touch header.js\n`}</code></pre>\n    <p><strong parentName=\"p\">{`header.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport HarryPotterLogo from \"../../assets/svg-silhouette-harry-potter-4-transparent.svg.svg\";\nimport { Link } from \"gatsby\";\nimport styled from \"@emotion/styled\";\n\nconst PageLink = styled(Link)\\`\n  color: #fff;\n\n  &:hover {\n    background-image: linear-gradient(\n      90deg,\n      rgba(127, 9, 9, 1) 0%,\n      rgba(255, 197, 0, 1) 12%,\n      rgba(238, 225, 23, 1) 24%\n    );\n    background-size: 100%;\n    background-repeat: repeat;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    font-weight: bold;\n  }\n\\`;\n\nconst Header = ({ location }) => {\n  return (\n    <section\n      sx={{\n        gridArea: \"header\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        width: \"100%\",\n        height: \"100%\",\n        display: location.pathname === \"/\" ? \"none\" : \"flex\"\n      }}\n    >\n      <Link to=\"/\">\n        <HarryPotterLogo\n          sx={{\n            height: \"100px\",\n            width: \"100px\",\n            padding: \"1em\"\n          }}\n        />\n      </Link>\n\n      <PageLink\n        sx={{\n          fontFamily: \"heading\",\n          fontSize: \"2em\",\n          color: \"white\",\n          marginRight: \"2em\"\n        }}\n        to=\"/houses\"\n      >\n        houses\n      </PageLink>\n      <PageLink\n        sx={{\n          fontFamily: \"heading\",\n          fontSize: \"2em\",\n          color: \"white\"\n        }}\n        to=\"/spells\"\n      >\n        Spells\n      </PageLink>\n    </section>\n  );\n};\n\nexport default Header;\n`}</code></pre>\n    <p>{`Lets understand our imports first.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`We have imported and used the jsx pragma from theme-ui to allow to to style our elements and components inline with\nthe object syntax`}</li>\n      <li parentName=\"ul\">{`The HarryPotterLogo is a logo i found via google which was placed in a folder named assets inside of our src folder.\nIts an svg which we alter the height and width of using the sx prop.`}</li>\n      <li parentName=\"ul\">{`Gatsby link is needed for us to navigate between pages in our site.`}</li>\n    </ul>\n    <p>{`You may be wondering why we have installed emotion/styled when we could just use the sx prop, like we have done else\nwhere... Well the answer lies in the affect we are using on the page links.`}</p>\n    <p>{`The sx prop doesn’t seem to have access to, or i should say perhaps that its doesn't have in its definitions, the\n-webkit-background-clip property which we are using to add a cool linear-gradient affect on hover. For this reason we\nhave pulled the logic our into a new component called PageLink which is a styled Gatsby Link. With styled components we\ncan use regular css syntax and as such have access to the -webkit-background-clip property.`}</p>\n    <p>{`The header component is taking the location prop provided by @reach/router which Gatsby uses under the hood for its\nrouting. This is used to determine which page we are on. Due to the fact that we have a different layout for our main\nhome page and the rest of the site we simply use the location object to check if we are on the home page, if we are we\nset a display none to hide the header component.`}</p>\n    <p>{`The last thing we need to do is set our grid areas which we will be using in later pages. This is just my preferred way\nof doing it, but i like the separation. Create a new folder inside of src called window and add an index.js file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export const HousesSpellsPhoneTemplateAreas = \\`\n    'header'\n    'main'\n    'main'\n    \\`;\n\nexport const HousesSpellsTabletTemplateAreas = \\`\n    'header    header        header   header'\n    'main    main        main   main'\n    \\`;\n\nexport const HousesSpellsDesktopTemplateAreas = \\`\n    'header    header        header   header'\n    'main    main        main   main'\n    \\`;\n\nexport const HomePhoneTemplateAreas = \\`\n    'logo'\n    'logo'\n    'logo'\n    'author'\n    'author'\n    'author'\n    'author'\n    \\`;\n\nexport const HomeTabletTemplateAreas = \\`\n    'logo       .           .     '\n    'logo       author      author'\n    'logo       author      author'\n    '.          .           .     '\n    \\`;\n\nexport const HomeDesktopTemplateAreas = \\`\n    'logo       .           .     '\n    'logo       author      author'\n    'logo       author      author'\n    '.          .           .     '\n    \\`;\n`}</code></pre>\n    <p>{`Cool, now we have our global layout complete, lets move onto our home page. Open up the index.js file inside of\nsrc/pages and add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { HomePhoneTemplateAreas, HomeTabletTemplateAreas, HomeDesktopTemplateAreas } from \"./../window/index\";\nimport LogoSection from \"./../components/site/logo-section\";\nimport AuthorSection from \"../components/site/author-section\";\n\nexport default () => {\n  return (\n    <div\n      sx={{\n        width: \"100%\",\n        height: \"100%\",\n        maxWidth: \"1200px\",\n        margin: \"1em\"\n      }}\n    >\n      <div\n        sx={{\n          display: \"grid\",\n          gridTemplateColumns: [\"1fr\", \"500px 1fr\", \"500px 1fr\"],\n          gridAutoRows: \"100px 1fr\",\n          gridTemplateAreas: [HomePhoneTemplateAreas, HomeTabletTemplateAreas, HomeDesktopTemplateAreas],\n          width: \"100%\",\n          height: \"100vh\",\n          background: \"#1E2224\",\n          maxWidth: \"1200px\"\n        }}\n      >\n        <LogoSection />\n        <AuthorSection />\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <p>{`This is the first page our visitors will see. We are using a grid to compose our layout of the page and utilizing the\nresponsive array syntax in our grid-template-columns and areas properties. To recap how this works we can take a closer\nlook at the gridTemplateAreas property and see that the first index is for phone (or mobile if you will) with the second\nbeing tablet and the third desktop. We could add more if we so wished but these will suffice for our needs.`}</p>\n    <p>{`Lets move on to creating our logo section. In src/components/site create two new files called logo.js and\nlogo-section.js`}</p>\n    <p><strong parentName=\"p\">{`logo.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport HarryPotterLogo from \"../assets/svg-silhouette-harry-potter-4-transparent.svg.svg\";\nexport const Logo = () => (\n  <HarryPotterLogo\n    sx={{\n      height: [\"200px\", \"300px\", \"500px\"],\n      width: [\"200px\", \"300px\", \"500px\"],\n      padding: \"1em\",\n      position: \"relative\"\n    }}\n  />\n);\n`}</code></pre>\n    <p>{`Our logo is the Harry Potter svg mentioned earlier. You can of course choose whatever you like as your sites logo. This\none is merely “HR” in a fancy font.`}</p>\n    <p><strong parentName=\"p\">{`logo-section.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { Logo } from \"../logo\";\nconst LogoSection = () => {\n  return (\n    <section\n      sx={{\n        gridArea: \"logo\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: [\"start\", \"center\", \"center\"],\n        position: \"relative\",\n        width: \"100%\"\n      }}\n    >\n      <Logo />\n    </section>\n  );\n};\nexport default LogoSection;\n`}</code></pre>\n    <p>{`Next up is our author section which will site next to our logo section Create a new file inside of src/components/site\ncalled author-section.js`}</p>\n    <p><strong parentName=\"p\">{`author-section.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { Link } from \"gatsby\";\nimport { houseEmoji, spellsEmoji } from \"./../../helpers/helpers\";\nimport styled from \"@emotion/styled\";\nimport { wizardEmoji } from \"./../../helpers/helpers\";\n\nconst InternalLink = styled(Link)\\`\n  color: #fff;\n  &:hover {\n    background-image: linear-gradient(\n      90deg,\n      rgba(127, 9, 9, 1) 0%,\n      rgba(255, 197, 0, 1) 12%,\n      rgba(238, 225, 23, 1) 24%\n    );\n    background-size: 100%;\n    background-repeat: repeat;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    font-weight: bold;\n  }\n\\`;\n\nconst ExternalLink = styled.a\\`\n  color: #fff;\n  &:hover {\n    background-image: linear-gradient(\n      90deg,\n      rgba(127, 9, 9, 1) 0%,\n      rgba(255, 197, 0, 1) 12%,\n      rgba(238, 225, 23, 1) 24%,\n      rgba(0, 0, 0, 1) 36%,\n      rgba(13, 98, 23, 1) 48%,\n      rgba(170, 170, 170, 1) 60%,\n      rgba(0, 10, 144, 1) 72%,\n      rgba(148, 119, 45, 1) 84%\n    );\n    background-size: 100%;\n    background-repeat: repeat;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    font-weight: bold;\n  }\n\\`;\n\nconst AuthorSection = () => {\n  return (\n    <section\n      sx={{\n        gridArea: \"author\",\n        position: \"relative\",\n        margin: \"0 auto\"\n      }}\n    >\n      <h1\n        sx={{\n          fontFamily: \"heading\",\n          color: \"white\",\n          letterSpacing: \"text\",\n          fontSize: [\"3em\", \"3em\", \"5em\"]\n        }}\n      >\n        Serverless Potter\n      </h1>\n      <div\n        sx={{\n          display: \"flex\",\n          justifyContent: \"start\",\n          alignItems: \"flex-start\",\n          width: \"300px\",\n          marginTop: \"3em\"\n        }}\n      >\n        <InternalLink\n          sx={{\n            fontFamily: \"heading\",\n            fontSize: \"2.5em\",\n            // color: 'white',\n            marginRight: \"2em\"\n          }}\n          to=\"/houses\"\n        >\n          Houses\n        </InternalLink>\n        <InternalLink\n          sx={{\n            fontFamily: \"heading\",\n            fontSize: \"2.5em\",\n            color: \"white\"\n          }}\n          to=\"/spells\"\n        >\n          Spells\n        </InternalLink>\n      </div>\n      <p\n        sx={{\n          fontFamily: \"heading\",\n          letterSpacing: \"body\",\n          fontSize: \"2em\",\n          color: \"white\",\n          marginTop: \"2em\",\n          width: [\"300px\", \"500px\", \"900px\"]\n        }}\n      >\n        This is a site that goes with the tutorial on creating a jamstack site with serverless functions and FaunaDB I\n        decided to use the potter api as i love the world of harry potter {wizardEmoji}\n      </p>\n      <p\n        sx={{\n          fontFamily: \"heading\",\n          letterSpacing: \"body\",\n          fontSize: \"2em\",\n          color: \"white\",\n          marginTop: \"1em\",\n          width: [\"300px\", \"500px\", \"900px\"]\n        }}\n      >\n        Built with Gatsby, Netlify functions, Apollo and FaunaDB. Data provided via the Potter API.\n      </p>\n      <p\n        sx={{\n          fontFamily: \"heading\",\n          letterSpacing: \"body\",\n          fontSize: \"2em\",\n          color: \"white\",\n          marginTop: \"1em\",\n          width: [\"300px\", \"500px\", \"900px\"]\n        }}\n      >\n        Select <strong>Houses</strong> or <strong>Spells</strong> to begin exploring potter stats!\n      </p>\n      <div\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\"\n        }}\n      >\n        <ExternalLink\n          sx={{\n            fontFamily: \"heading\",\n            letterSpacing: \"body\",\n            fontSize: \"2em\",\n            color: \"white\",\n            marginTop: \"1em\",\n            width: [\"300px\", \"500px\", \"900px\"]\n          }}\n          href=\"your-personal-website\"\n        >\n          author: your name here!\n        </ExternalLink>\n        <ExternalLink\n          sx={{\n            fontFamily: \"heading\",\n            letterSpacing: \"body\",\n            fontSize: \"2em\",\n            color: \"white\",\n            marginTop: \"1em\",\n            width: \"900px\"\n          }}\n          href=\"your-github-repo-for-this-project\"\n        >\n          github: the name you gave this project\n        </ExternalLink>\n      </div>\n    </section>\n  );\n};\nexport default AuthorSection;\n`}</code></pre>\n    <p>{`This component outlines what the project is, displays links to the other pages and the projects repository. You can\nchange the text I’ve added, this was just for demo purposes. As you can see, we are again using emotion/styled as we are\nmaking use of the -webkit-background-clip property on our cool linear-gradient links. We have two here, one for external\nlinks, which uses the a tag, and another for internal link which uses Gatsby Link. Note that you should always use the\ntraditional HTML a tag for external links and the Gatsby Link to configure your internal routing.`}</p>\n    <p>{`You may also notice that there is an import from a helper file what exports some emojis. Lets take a look at that.\nCreate a new folder inside of src.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`    cd src\n    mkdir helpers && touch helpers.js\n`}</code></pre>\n    <p><strong parentName=\"p\">{`helpers.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export const gryffindorColors = \"linear-gradient(90deg, rgba(127,9,9,1) 27%, rgba(255,197,0,1) 61%)\";\nexport const hufflepuffColors = \"linear-gradient(90deg, rgba(238,225,23,1) 35%, rgba(0,0,0,1) 93%)\";\nexport const slytherinColors = \"linear-gradient(90deg, rgba(13,98,23,1) 32%, rgba(170,170,170,1) 69%)\";\nexport const ravenclawColors = \"linear-gradient(90deg, rgba(0,10,144,1) 32%, rgba(148,107,45,1) 69%)\";\n\nexport const houseEmoji = \\`🏡\\`;\nexport const spellsEmoji = \\`💫\\`;\nexport const wandEmoji = \\`💫\\`;\nexport const patronusEmoji = \\`✨\\`;\nexport const deathEaterEmoji = \\`🐍\\`;\nexport const dumbledoresArmyEmoji = \\`⚔️\\`;\nexport const roleEmoji = \\`📖\\`;\nexport const bloodStatusEmoji = \\`🧙🏾‍♀️ 🤵🏾\\`;\nexport const orderOfThePheonixEmoji = \\`🦄\\`;\nexport const ministryOfMagicEmoji = \\`📜\\`;\nexport const boggartEmoji = \\`🕯\\`;\nexport const aliasEmoji = \\`👨🏼‍🎤\\`;\nexport const wizardEmoji = \\`🧙🏼‍♂️\\`;\nexport const gryffindorEmoji = \\`🦁\\`;\nexport const hufflepuffEmoji = \\`🦡\\`;\nexport const slytherinEmoji = \\`🐍\\`;\nexport const ravenclawEmoji = \\`🦅\\`;\n\nexport function checkNull(value) {\n  return value !== null ? value : \"unknown\";\n}\nexport function checkDeathEater(value) {\n  if (value === false) {\n    return \"no\";\n  }\n  return \"undoubtedly\";\n}\nexport function checkDumbledoresArmy(value) {\n  if (value === false) {\n    return \"no\";\n  }\n  return \\`undoubtedly \\${wizardEmoji}\\`;\n}\n`}</code></pre>\n    <p>{`The emojis were taken from a really cool site called `}<a parentName=\"p\" {...{\n        \"href\": \"https://beautifuldingbats.com/emoji-clipboard/\"\n      }}>{`Emoji Clipboard`}</a>{`,\nit lets you search and literally copy paste the emojis! We’ll be using these emojis in our cards to display the\ncharacters from Harry Potter. As well as the emojis we have some utility functions that will also be used in the cards.\nEach house in Harry Potter has a set of colors that sets them apart form the other houses. These we have exported as\nlinear-gradients for later use.`}</p>\n    <p>{`Nice! We are nearly there but we haven’t quite finished yet! Next we will use our data and display it to the user of our\nsite!`}</p>\n    <p>{`We have done quite a bit of setup but haven’t yet had a chance to use our data that we have saved in our Fauna database.\nNow’s the time to bring in Apollo and put together a page that shows all the characters data for each house. We are also\ngoing to implement a simple searchbar to allow the user to search the characters of each house!`}</p>\n    <p>{`Inside src/pages create a new file called houses.js and add the following:`}</p>\n    <p><strong parentName=\"p\">{`houses.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport MainSection from \"./../components/site/main-section\";\nimport { HousesPhoneTemplateAreas, HousesTabletTemplateAreas, HousesDesktopTemplateAreas } from \"../window\";\n\nconst GET_CHARACTERS = gql\\`\n  query GetCharacters {\n    allCharacters {\n      data {\n        _id\n        name\n        house\n        patronus\n        bloodStatus\n        role\n        school\n        deathEater\n        dumbledoresArmy\n        orderOfThePheonix\n        ministryOfMagic\n        alias\n        wand\n        boggart\n        animagus\n      }\n    }\n  }\n\\`;\n\nconst Houses = () => {\n  const { loading: characterLoading, error: characterError, data: characterData } = useQuery(GET_CHARACTERS);\n  const [selectedHouse, setSelectedHouse] = React.useState([]);\n\n  React.useEffect(() => {\n    const gryffindor =\n      !characterLoading &&\n      !characterError &&\n      characterData.allCharacters.data.filter(char => char.house === \"Gryffindor\");\n    setSelectedHouse(gryffindor);\n  }, [characterLoading, characterData]);\n\n  const getHouse = house => {\n    switch (house) {\n      case \"gryffindor\":\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Gryffindor\")\n        );\n        break;\n      case \"hufflepuff\":\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Hufflepuff\")\n        );\n        break;\n      case \"slytherin\":\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Slytherin\")\n        );\n        break;\n      case \"ravenclaw\":\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Ravenclaw\")\n        );\n        break;\n      default:\n        setSelectedHouse(\n          !characterLoading &&\n            !characterError &&\n            characterData.allCharacters.data.filter(char => char.house === \"Gryffindor\")\n        );\n        break;\n    }\n  };\n  return (\n    <div\n      sx={{\n        gridArea: \"main\",\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(250px, auto))\",\n        gridAutoRows: \"auto\",\n        gridTemplateAreas: [\n          HousesSpellsPhoneTemplateAreas,\n          HousesSpellsTabletTemplateAreas,\n          HousesSpellsDesktopTemplateAreas\n        ],\n        width: \"100%\",\n        height: \"100%\",\n        position: \"relative\"\n      }}\n    >\n      <MainSection house={selectedHouse} getHouse={getHouse} />\n    </div>\n  );\n};\nexport default Houses;\n`}</code></pre>\n    <p>{`We are using @apollo/client from which we import gql to construct our graphql query and the useQuery hook which will\ntake care of handling the state of the returned data for us. This handy hook returns three states:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`loading - Is the data currently loading?`}</li>\n      <li parentName=\"ul\">{`error - If there was an error we will get it here`}</li>\n      <li parentName=\"ul\">{`data - The requested data`}</li>\n    </ul>\n    <p>{`Our page will be handling the currently selected house so we use the React useState hook and initialize it with an empty\narray on first render. There after we use the useEffect hook to set the initial house as Gryffindor (because Gryffindor\nis best. Fight me!) The dependency array takes in the loading and data states.`}</p>\n    <p>{`We then have a function which returns a switch statement (I know not everyone likes these but i do and i find that they\nare simple to read and understand). This function checks the currently selected house and if there are no errors in the\nquery it loads the data from that house into the selected house state array. This function is passed down to another\ncomponent which uses that data to display the house characters in a grid of cards.`}</p>\n    <p>{`Lets create that component now. Inside src/components/site create a new file called main-section.js`}</p>\n    <p><strong parentName=\"p\">{`main-section.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport Card from \"../cards/card\";\nimport SearchBar from \"./searchbar\";\nimport { useSearchBar } from \"./useSearchbar\";\nimport Loading from \"./loading\";\nimport HouseSection from \"./house-section\";\n\nconst MainSection = React.memo(({ house, getHouse }) => {\n  const { members, handleSearchQuery } = useSearchBar(house);\n\n  return house.length ? (\n    <div\n      sx={{\n        gridArea: \"main\",\n        height: \"100%\",\n        position: \"relative\"\n      }}\n    >\n      <div\n        sx={{\n          color: \"white\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          fontFamily: \"heading\",\n          letterSpacing: \"body\",\n          fontSize: \"2em\",\n          position: \"relative\"\n        }}\n      >\n        <h4>\n          {house[0].house} Members - {house.length}\n        </h4>\n        <SearchBar handleSearchQuery={handleSearchQuery} />\n        <HouseSection getHouse={getHouse} />\n      </div>\n      <section\n        sx={{\n          margin: \"0 auto\",\n          width: \"100%\",\n          display: \"grid\",\n          gridAutoRows: \"auto\",\n          gridTemplateColumns: \"repeat(auto-fill, minmax(auto, 500px))\",\n          gap: \"1.5em\",\n          justifyContent: \"space-evenly\",\n          marginTop: \"1em\",\n          position: \"relative\",\n          height: \"100vh\"\n        }}\n      >\n        {members.map((char, index) => (\n          <Card key={char._id} index={index} {...char} />\n        ))}\n      </section>\n    </div>\n  ) : (\n    <Loading />\n  );\n});\nexport default MainSection;\n`}</code></pre>\n    <p>{`Our main section is wrapped in memo, which means that React will render the component and memorize the result. If the\nnext time the props are passed in and they are the same, React will use the memorized result and skip re-rendering the\ncomponent again. This is helpful as our component will be re-rendering a lot as the user changes houses or uses the\nsearchbar, which will will soon create.`}</p>\n    <p>{`In fact, lets do do that now. We will be creating a search bar component and a custom hook to handle the search logic.\nInside src/components/site create two new files. searchbar.js and useSearchbar.js`}</p>\n    <p><strong parentName=\"p\">{`searchbar.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst SearchBar = ({ handleSearchQuery }) => {\n  return (\n    <div\n      sx={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: \"2em\"\n      }}\n    >\n      <input\n        sx={{\n          color: \"greyBlack\",\n          fontFamily: \"heading\",\n          fontSize: \"0.8em\",\n          fontWeight: \"bold\",\n          letterSpacing: \"body\",\n          border: \"1px solid\",\n          borderColor: \"accent\",\n          width: \"300px\",\n          height: \"50px\",\n          padding: \"0.4em\"\n        }}\n        type=\"text\"\n        id=\"members-searchbar\"\n        placeholder=\"Search members..\"\n        onChange={handleSearchQuery}\n      />\n    </div>\n  );\n};\nexport default SearchBar;\n`}</code></pre>\n    <p>{`Our searchbar takes in a search query function which is called when the input is used. The rest is just styling.`}</p>\n    <p><strong parentName=\"p\">{`useSearchbar.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from \"react\";\nexport const useSearchBar = data => {\n  const emptyQuery = \"\";\n  const [searchQuery, setSearchQuery] = React.useState({\n    filteredData: [],\n    query: emptyQuery\n  });\n\n  const handleSearchQuery = e => {\n    const query = e.target.value;\n    const members = data || [];\n\n    const filteredData = members.filter(member => {\n      return member.name.toLowerCase().includes(query.toLowerCase());\n    });\n\n    setSearchQuery({ filteredData, query });\n  };\n\n  const { filteredData, query } = searchQuery;\n  const hasSearchResult = filteredData && query !== emptyQuery;\n  const members = hasSearchResult ? filteredData : data;\n\n  return { members, handleSearchQuery };\n};\n`}</code></pre>\n    <p>{`Our custom hook takes the selected house data as a prop. It has an internal state which holds an emptyQuery variable\nwhich we set to empty string and a filteredData array, set to empty. The function that runs in our searchbar is the\nfollowing function declared in the hook. It takes the query as an event from the input, checks if the data provided to\nthe hook has data or sets it to an empty array as a new variable called members. It then filters over the members array\nand checks if the query matches one of the characters names. Finally it sets the state with the returned filtered data\nand query.`}</p>\n    <p>{`We structure the state and create a new variable which checks if the state had any data or not. Finally returning the\ndata, be that empty or not and the search function.`}</p>\n    <p>{`Phew! That was a lot to go over. Going back to our main section we can see that we are importing our new hook and\npassing in the selected house data, then destructing the members and search query function. The component checks if the\nhouse array has any length, if it does it returns the page. The page displays the current house, how many members the\nhouse has, the searchbar (which takes the search query function as a prop), a new house section which we will build and\nmaps over the members returned from our custom hook.`}</p>\n    <p>{`In the house section we will make use of a super amazing library called `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.framer.com/motion/\"\n      }}>{`Framer Motion`}</a>{`.\nLets first see how our new component looks and what it does.`}</p>\n    <p>{`In src/components/site create a new file called house-section.js`}</p>\n    <p><strong parentName=\"p\">{`house-section.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { gryffindorColors, hufflepuffColors, slytherinColors, ravenclawColors } from \"./../../helpers/helpers\";\nimport styled from \"@emotion/styled\";\nimport { motion } from \"framer-motion\";\n\nconst House = styled.a\\`\n  color: #fff;\n  &:hover {\n    background-image: \\${props => props.house};\n    background-size: 100%;\n    background-repeat: repeat;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    font-weight: bold;\n  }\n\\`;\n\nconst HouseSection = ({ getHouse }) => {\n  return (\n    <section\n      sx={{\n        width: \"100%\",\n        position: \"relative\"\n      }}\n    >\n      <ul\n        sx={{\n          listStyle: \"none\",\n          cursor: \"crosshair\",\n          fontFamily: \"heading\",\n          fontSize: \"1em\",\n          display: \"flex\",\n          flexDirection: [\"column\", \"row\", \"row\"],\n          alignItems: \"center\",\n          justifyContent: \"space-evenly\",\n          position: \"relative\"\n        }}\n      >\n        <motion.li\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{\n            type: \"spring\",\n            stiffness: 200,\n            damping: 20,\n            delay: 0.2\n          }}\n        >\n          <House onClick={() => getHouse(\"gryffindor\")} house={gryffindorColors}>\n            Gryffindor\n          </House>\n        </motion.li>\n        <motion.li\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{\n            type: \"spring\",\n            stiffness: 200,\n            damping: 20,\n            delay: 0.4\n          }}\n        >\n          <House onClick={() => getHouse(\"hufflepuff\")} house={hufflepuffColors}>\n            Hufflepuff\n          </House>\n        </motion.li>\n        <motion.li\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{\n            type: \"spring\",\n            stiffness: 200,\n            damping: 20,\n            delay: 0.6\n          }}\n        >\n          <House onClick={() => getHouse(\"slytherin\")} house={slytherinColors}>\n            Slytherin\n          </House>\n        </motion.li>\n        <motion.li\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{\n            type: \"spring\",\n            stiffness: 200,\n            damping: 20,\n            delay: 0.8\n          }}\n        >\n          <House onClick={() => getHouse(\"ravenclaw\")} house={ravenclawColors}>\n            Ravenclaw\n          </House>\n        </motion.li>\n      </ul>\n    </section>\n  );\n};\nexport default HouseSection;\n`}</code></pre>\n    <p>{`The purpose of this component is to show the user the four houses of Hogwarts, let them select a house and pass that\nselection back up to the main-section state. The component takes the getHouse function from main-section as a prop. We\nhave created an internal link styled component , which takes each houses colours from our helper file, and returns the\nselected house on click.`}</p>\n    <p>{`Using framer motion we prepend each li with the motion tag. This allows us to add a simple scale animation by setting\nthe initial value 0 (so it’s not visible), using the animate prop we say that it should animate in to it’s set size. The\ntransition is specifying how the animation will work.`}</p>\n    <p>{`Back to the main-section component, we map over each member in the house and display their data in a Card component by\nspreading all the character data. Lets create that now.`}</p>\n    <p>{`Inside src/components/site create a new file called card.js`}</p>\n    <p><strong parentName=\"p\">{`card.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport {\n  checkNull,\n  checkDeathEater,\n  checkDumbledoresArmy,\n  hufflepuffColors,\n  ravenclawColors,\n  gryffindorColors,\n  slytherinColors,\n  houseEmoji,\n  wandEmoji,\n  patronusEmoji,\n  bloodStatusEmoji,\n  ministryOfMagicEmoji,\n  boggartEmoji,\n  roleEmoji,\n  orderOfThePheonixEmoji,\n  deathEaterEmoji,\n  dumbledoresArmyEmoji,\n  aliasEmoji\n} from \"./../../helpers/helpers\";\nimport { motion } from \"framer-motion\";\n\nconst container = {\n  hidden: { scale: 0 },\n  show: {\n    scale: 1,\n    transition: {\n      delayChildren: 1\n    }\n  }\n};\n\nconst item = {\n  hidden: { scale: 0 },\n  show: { scale: 1 }\n};\n\nconst Card = ({\n  _id,\n  name,\n  house,\n  patronus,\n  bloodStatus,\n  role,\n  deathEater,\n  dumbledoresArmy,\n  orderOfThePheonix,\n  ministryOfMagic,\n  alias,\n  wand,\n  boggart,\n  animagus,\n  index\n}) => {\n  return (\n    <motion.div variants={container} initial=\"hidden\" animate=\"show\">\n      <motion.div\n        variants={item}\n        sx={{\n          border: \"solid 2px\",\n          borderImageSource:\n            house === \"Gryffindor\"\n              ? gryffindorColors\n              : house === \"Hufflepuff\"\n              ? hufflepuffColors\n              : house === \"Slytherin\"\n              ? slytherinColors\n              : house === \"Ravenclaw\"\n              ? ravenclawColors\n              : null,\n          borderImageSlice: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          padding: \"1em\",\n          margin: \"1em\",\n          minWidth: [\"250px\", \"400px\", \"500px\"]\n        }}\n      >\n        <h2\n          sx={{\n            color: \"white\",\n            fontFamily: \"heading\",\n            letterSpacing: \"body\",\n            fontSize: \"2.5em\",\n            borderBottom: \"solid 2px\",\n            borderColor: \"white\"\n          }}\n        >\n          {name}\n        </h2>\n        <div\n          sx={{\n            display: \"grid\",\n            gridTemplateColumns: \"1fr 1fr\",\n            gridTemplateRows: \"auto\",\n            gap: \"2em\",\n            marginTop: \"2em\"\n          }}\n        >\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>house:</strong> {house} {houseEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>wand:</strong> {checkNull(wand)} {wandEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>patronus:</strong> {checkNull(patronus)} {patronusEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>boggart:</strong> {checkNull(boggart)} {boggartEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>blood:</strong> {checkNull(bloodStatus)} {bloodStatusEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>role:</strong> {checkNull(role)} {roleEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>order of the pheonix:</strong> {checkNull(orderOfThePheonix)} {orderOfThePheonixEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>ministry of magic:</strong> {checkDeathEater(ministryOfMagic)} {ministryOfMagicEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>death eater:</strong> {checkDeathEater(deathEater)} {deathEaterEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>dumbledores army:</strong> {checkDumbledoresArmy(dumbledoresArmy)} {dumbledoresArmyEmoji}\n          </p>\n          <p\n            sx={{\n              color: \"white\",\n              fontFamily: \"heading\",\n              letterSpacing: \"body\",\n              fontSize: \"1.5em\"\n            }}\n          >\n            <strong>alias:</strong> {checkNull(alias)} {aliasEmoji}\n          </p>\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n};\nexport default Card;\n`}</code></pre>\n    <p>{`We are importing all of those cool emojis we added earlier in our helper file. The container and item objects are for\nuse in our animations from framer motion. We descructure our props, of which there are many, and return a div which has\nthe framer motion object prepended to it and the item object passed to the variants prop. This is a simpler way of\npassing the object and all of it’s values through. For certain properties we run a null check against them to\ndeterminate what we should show.`}</p>\n    <p>{`The only thing left to do is implement the Spells page and its associated components then the implementation of this\nsite is done! Given all we have covered I’m sure you can handle the last part!`}</p>\n    <p>{`Your final result should resemble something like this:\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://serverless-graphql-potter.netlify.app/\"\n      }}>{`serverless-graphql-potter`}</a>{`.`}</p>\n    <p>{`Did you notice the cool particles? That’s a nice touch you could add to your site!`}</p>\n    <h2 {...{\n      \"id\": \"deploy-the-beast\"\n    }}>{`Deploy the beast!`}</h2>\n    <p>{`That’s a lot of code and we haven’t even checked that it works!! (of course during development you should check how\nthings look and work and make changes accordingly, I didn’t cover running the site as that’s common practice while\ndeveloping). Lets deploy our site to Netlify and check it out!`}</p>\n    <p>{`At the projects root create a new file called netlify.toml`}</p>\n    <p><strong parentName=\"p\">{`netlify.toml`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`[build]\n    command = \"yarn build\"\n    functions = \"functions\"\n    publish = \"public\"\n`}</code></pre>\n    <p>{`If you don’t already have an account, create a new one at `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.netlify.com/\"\n      }}>{`netlify.com`}</a>{`. To publish your site:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Click create new site, identify yourself and choose your repository`}</li>\n      <li parentName=\"ul\">{`set your build command as yarn build and publish directory as public`}</li>\n      <li parentName=\"ul\">{`Click site settings and change site name and…. change the name!`}</li>\n      <li parentName=\"ul\">{`On the left tab menu find build and deploy and click that and scroll down to the environment section and add your\nenvironment variables: SERVER_KEY and FAUNA_ADMIN`}</li>\n      <li parentName=\"ul\">{`You can add the functions path under the functions tab but Netlify will also pick this up from the netlify.toml file\nyou created`}</li>\n    </ul>\n    <p>{`When you first created this new site Netlify tried to deploy it. It wouldn’t have worked as we hadn’t set the\nenvironment variables yet. Go to the deploys tab at the top of the page and hit the trigger deploy dropdown and deploy\nsite. If you encounter any issues then please drop me an email at hello@richardhaines.dev and we can try and work\nthrough it together.`}</p>\n    <p>{`And that’s it! I hope you enjoyed it and learnt something along the way. Thank you for coming to my TED talk 😅`}</p>\n    <p>{`If you liked this article feel free to give me a follow on Twitter with the blue button at the top of the page. 😇`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}