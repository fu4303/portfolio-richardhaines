{"expireTime":9007200851906807000,"key":"gatsby-plugin-mdx-entire-payload-b09ad7520935e0d583d60cb5c7106020-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This is a collection of notes for everyday git commands.","position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":57,"offset":58},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":57,"offset":58},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Add an existing project to git","position":{"start":{"line":4,"column":4,"offset":65},"end":{"line":4,"column":34,"offset":95},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":62},"end":{"line":4,"column":34,"offset":95},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a new repository on github, then from the projects root:","position":{"start":{"line":6,"column":1,"offset":99},"end":{"line":6,"column":64,"offset":162},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":99},"end":{"line":6,"column":64,"offset":162},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"git init\ngit add .\ngit commit -m \"My first commit\"\ngit remote add origin <remote repository url>\ngit remote -v\ngit push origin master","position":{"start":{"line":8,"column":1,"offset":166},"end":{"line":15,"column":4,"offset":318},"indent":[1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"First we are initializing the local directory as a git repo","position":{"start":{"line":17,"column":3,"offset":324},"end":{"line":17,"column":62,"offset":383},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":324},"end":{"line":17,"column":62,"offset":383},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":322},"end":{"line":17,"column":62,"offset":383},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Then we are adding the new files in your local repo, this stages them for the first commit","position":{"start":{"line":18,"column":3,"offset":387},"end":{"line":18,"column":93,"offset":477},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":387},"end":{"line":18,"column":93,"offset":477},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":385},"end":{"line":18,"column":93,"offset":477},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Then we commit the files that we just staged","position":{"start":{"line":19,"column":3,"offset":481},"end":{"line":19,"column":47,"offset":525},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":481},"end":{"line":19,"column":47,"offset":525},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":479},"end":{"line":19,"column":47,"offset":525},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Copy the remote repo url from your github repo and add it to the remote repo where your local repo will be published","position":{"start":{"line":20,"column":3,"offset":529},"end":{"line":20,"column":119,"offset":645},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":529},"end":{"line":20,"column":119,"offset":645},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":527},"end":{"line":20,"column":119,"offset":645},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Set the new remote","position":{"start":{"line":21,"column":3,"offset":649},"end":{"line":21,"column":21,"offset":667},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":649},"end":{"line":21,"column":21,"offset":667},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":647},"end":{"line":21,"column":21,"offset":667},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Push the changes in your local repo to github","position":{"start":{"line":22,"column":3,"offset":671},"end":{"line":22,"column":48,"offset":716},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":671},"end":{"line":22,"column":48,"offset":716},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":669},"end":{"line":22,"column":48,"offset":716},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":322},"end":{"line":22,"column":48,"offset":716},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Amend a commit message","position":{"start":{"line":24,"column":4,"offset":723},"end":{"line":24,"column":26,"offset":745},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":720},"end":{"line":24,"column":26,"offset":745},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":" git commit --amend","position":{"start":{"line":26,"column":1,"offset":749},"end":{"line":28,"column":4,"offset":782},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Commit your work","position":{"start":{"line":30,"column":4,"offset":789},"end":{"line":30,"column":20,"offset":805},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":786},"end":{"line":30,"column":20,"offset":805},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"git add .\ngit commit -m \"my commit message\"\ngit push","position":{"start":{"line":32,"column":1,"offset":809},"end":{"line":36,"column":4,"offset":877},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Squash commits","position":{"start":{"line":38,"column":4,"offset":884},"end":{"line":38,"column":18,"offset":898},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":881},"end":{"line":38,"column":18,"offset":898},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check how many commits have been made:","position":{"start":{"line":40,"column":1,"offset":902},"end":{"line":40,"column":39,"offset":940},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":902},"end":{"line":40,"column":39,"offset":940},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"git rev-list HEAD --count","position":{"start":{"line":42,"column":1,"offset":944},"end":{"line":44,"column":4,"offset":983},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Use that number to tell git how many commits to squash into one:","position":{"start":{"line":46,"column":1,"offset":987},"end":{"line":46,"column":65,"offset":1051},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":987},"end":{"line":46,"column":65,"offset":1051},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"git rebase -i HEAD~<number-of-commits>","position":{"start":{"line":48,"column":1,"offset":1055},"end":{"line":50,"column":4,"offset":1107},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Create a new branch","position":{"start":{"line":52,"column":4,"offset":1114},"end":{"line":52,"column":23,"offset":1133},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1111},"end":{"line":52,"column":23,"offset":1133},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To create a new branch checkout the branch you want to base your work on:","position":{"start":{"line":54,"column":1,"offset":1137},"end":{"line":54,"column":74,"offset":1210},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1137},"end":{"line":54,"column":74,"offset":1210},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"git checkout myOriginalBranch","position":{"start":{"line":56,"column":1,"offset":1214},"end":{"line":58,"column":4,"offset":1257},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then its as simple as doing a pull to make sure you have the latest work and adding the -b tag with your new branches name:","position":{"start":{"line":60,"column":1,"offset":1261},"end":{"line":60,"column":124,"offset":1384},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1261},"end":{"line":60,"column":124,"offset":1384},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"git pull\ngit checkout -b myNewBranch","position":{"start":{"line":62,"column":1,"offset":1388},"end":{"line":65,"column":4,"offset":1439},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Clone repo and push to new repo","position":{"start":{"line":67,"column":4,"offset":1446},"end":{"line":67,"column":35,"offset":1477},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1443},"end":{"line":67,"column":35,"offset":1477},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a new repo on github then clone the repo you want to copy.","position":{"start":{"line":69,"column":1,"offset":1481},"end":{"line":69,"column":66,"offset":1546},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1481},"end":{"line":69,"column":66,"offset":1546},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"git clone <repo-url> // clone the repo\ngit remote rename origin upstream // rename the repo upstream\ngit remote add origin <new-repo-url> // add the new repos url to your remote\ngit push origin master // push the changes to your remote repo\ngit pull upstream master && git push origin master","position":{"start":{"line":71,"column":1,"offset":1550},"end":{"line":77,"column":4,"offset":1859},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Everyday GIT commands\",\"date\":\"2020-03-27T00:00:00.000Z\",\"published\":true,\"category\":\"GIT\",\"author\":\"Richard Haines\",\"keywords\":[\"git\",\"version control\"],\"pin\":false}","position":{"start":{"line":80,"column":1,"offset":1863},"end":{"line":80,"column":205,"offset":2067},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":80,"column":205,"offset":2067}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Everyday GIT commands\",\n  \"date\": \"2020-03-27T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"GIT\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"git\", \"version control\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is a collection of notes for everyday git commands.\"), mdx(\"h2\", {\n    \"id\": \"add-an-existing-project-to-git\"\n  }, \"Add an existing project to git\"), mdx(\"p\", null, \"Create a new repository on github, then from the projects root:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git init\\ngit add .\\ngit commit -m \\\"My first commit\\\"\\ngit remote add origin <remote repository url>\\ngit remote -v\\ngit push origin master\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"First we are initializing the local directory as a git repo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Then we are adding the new files in your local repo, this stages them for the first commit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Then we commit the files that we just staged\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Copy the remote repo url from your github repo and add it to the remote repo where your local repo will be published\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set the new remote\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Push the changes in your local repo to github\")), mdx(\"h2\", {\n    \"id\": \"amend-a-commit-message\"\n  }, \"Amend a commit message\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \" git commit --amend\\n\")), mdx(\"h2\", {\n    \"id\": \"commit-your-work\"\n  }, \"Commit your work\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git add .\\ngit commit -m \\\"my commit message\\\"\\ngit push\\n\")), mdx(\"h2\", {\n    \"id\": \"squash-commits\"\n  }, \"Squash commits\"), mdx(\"p\", null, \"Check how many commits have been made:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git rev-list HEAD --count\\n\")), mdx(\"p\", null, \"Use that number to tell git how many commits to squash into one:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git rebase -i HEAD~<number-of-commits>\\n\")), mdx(\"h2\", {\n    \"id\": \"create-a-new-branch\"\n  }, \"Create a new branch\"), mdx(\"p\", null, \"To create a new branch checkout the branch you want to base your work on:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git checkout myOriginalBranch\\n\")), mdx(\"p\", null, \"Then its as simple as doing a pull to make sure you have the latest work and adding the -b tag with your new branches name:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git pull\\ngit checkout -b myNewBranch\\n\")), mdx(\"h2\", {\n    \"id\": \"clone-repo-and-push-to-new-repo\"\n  }, \"Clone repo and push to new repo\"), mdx(\"p\", null, \"Create a new repo on github then clone the repo you want to copy.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git clone <repo-url> // clone the repo\\ngit remote rename origin upstream // rename the repo upstream\\ngit remote add origin <new-repo-url> // add the new repos url to your remote\\ngit push origin master // push the changes to your remote repo\\ngit pull upstream master && git push origin master\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Everyday GIT commands\",\n  \"date\": \"2020-03-27T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"GIT\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"git\", \"version control\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`This is a collection of notes for everyday git commands.`}</p>\n    <h2 {...{\n      \"id\": \"add-an-existing-project-to-git\"\n    }}>{`Add an existing project to git`}</h2>\n    <p>{`Create a new repository on github, then from the projects root:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git init\ngit add .\ngit commit -m \"My first commit\"\ngit remote add origin <remote repository url>\ngit remote -v\ngit push origin master\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`First we are initializing the local directory as a git repo`}</li>\n      <li parentName=\"ul\">{`Then we are adding the new files in your local repo, this stages them for the first commit`}</li>\n      <li parentName=\"ul\">{`Then we commit the files that we just staged`}</li>\n      <li parentName=\"ul\">{`Copy the remote repo url from your github repo and add it to the remote repo where your local repo will be published`}</li>\n      <li parentName=\"ul\">{`Set the new remote`}</li>\n      <li parentName=\"ul\">{`Push the changes in your local repo to github`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"amend-a-commit-message\"\n    }}>{`Amend a commit message`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` git commit --amend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"commit-your-work\"\n    }}>{`Commit your work`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git add .\ngit commit -m \"my commit message\"\ngit push\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"squash-commits\"\n    }}>{`Squash commits`}</h2>\n    <p>{`Check how many commits have been made:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git rev-list HEAD --count\n`}</code></pre>\n    <p>{`Use that number to tell git how many commits to squash into one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git rebase -i HEAD~<number-of-commits>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-a-new-branch\"\n    }}>{`Create a new branch`}</h2>\n    <p>{`To create a new branch checkout the branch you want to base your work on:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git checkout myOriginalBranch\n`}</code></pre>\n    <p>{`Then its as simple as doing a pull to make sure you have the latest work and adding the -b tag with your new branches name:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git pull\ngit checkout -b myNewBranch\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"clone-repo-and-push-to-new-repo\"\n    }}>{`Clone repo and push to new repo`}</h2>\n    <p>{`Create a new repo on github then clone the repo you want to copy.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clone <repo-url> // clone the repo\ngit remote rename origin upstream // rename the repo upstream\ngit remote add origin <new-repo-url> // add the new repos url to your remote\ngit push origin master // push the changes to your remote repo\ngit pull upstream master && git push origin master\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}