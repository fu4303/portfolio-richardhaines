{"expireTime":9007200851906806000,"key":"gatsby-plugin-mdx-entire-payload-6e5d5e40f502dc584136e1369a7976b6-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"So let's say you have your Gatsby blog all setup using MDX for your blog posts. Perhaps you have written a post that you want to pin to the top of your list of posts in your blog index, this post is awesome and you want people to see it when they first arrive to your blog.","position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":274,"offset":275},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":274,"offset":275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is no magic here, just adding a new value to our posts frontmatter and filtering on that post. Let's dive into some code examples shall we! üòÄ","position":{"start":{"line":4,"column":1,"offset":279},"end":{"line":4,"column":149,"offset":427},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":279},"end":{"line":4,"column":149,"offset":427},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Frontmatter","position":{"start":{"line":6,"column":4,"offset":434},"end":{"line":6,"column":15,"offset":445},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":431},"end":{"line":6,"column":15,"offset":445},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the your posts frontmatter add a new field, pin. This will be a boolean value.","position":{"start":{"line":8,"column":1,"offset":449},"end":{"line":8,"column":82,"offset":530},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":449},"end":{"line":8,"column":82,"offset":530},"indent":[]}},{"type":"code","lang":"mdx","meta":null,"value":"---\ntitle: Pinned blog post\ndate: 2020-07-31\npublished: false\ncategory: Whatever\nauthor: Richard Haines\nkeywords: [mdx, blog, pinned post, gatsby]\npin: true\n---\n","position":{"start":{"line":10,"column":1,"offset":534},"end":{"line":21,"column":4,"offset":718},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The blog index","position":{"start":{"line":23,"column":4,"offset":725},"end":{"line":23,"column":18,"offset":739},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":722},"end":{"line":23,"column":18,"offset":739},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the blog index you'll most likely have a query so that you can fetch your posts and pass them to the MDXRenderer. Add the new field value to the frontmatter.","position":{"start":{"line":25,"column":1,"offset":743},"end":{"line":25,"column":161,"offset":903},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":743},"end":{"line":25,"column":161,"offset":903},"indent":[]}},{"type":"code","lang":"mdx","meta":null,"value":"export const query = graphql`\n  query BlogIndexQuery {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }, filter: { frontmatter: { published: { eq: true } } }) {\n      nodes {\n        id\n        excerpt(pruneLength: 200)\n        frontmatter {\n          title\n          date(formatString: \"DD MMM YYYY\")\n          category\n          author\n          pin\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`;","position":{"start":{"line":27,"column":1,"offset":907},"end":{"line":48,"column":4,"offset":1378},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Create a new variable called pinned and filter the passed in mdx nodes by the pin frontmatter field. Then create a nice ternary to check if any posts are in fact pinned or not.","position":{"start":{"line":50,"column":1,"offset":1382},"end":{"line":50,"column":177,"offset":1558},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1382},"end":{"line":50,"column":177,"offset":1558},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"  const pinned = data.allMdx.nodes.filter(post => post.frontmatter.pin === true);\n  const allPosts = pinned.length\n    ? [pinned[0], ...data.allMdx.nodes.filter(post => !post.frontmatter.pin)]\n    : data.allMdx.nodes;","position":{"start":{"line":52,"column":1,"offset":1562},"end":{"line":57,"column":4,"offset":1795},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The allPosts variable will be passed and used to render the posts in nice cards or however you choose to display them. We can now check the frontmatter and see if a post is pinned or not. I like to use Theme-ui to style my components but this same code can be used with CSS. In the container card for your blog post add a before pseudo element that only shows if the post is pinned.","position":{"start":{"line":59,"column":1,"offset":1799},"end":{"line":59,"column":383,"offset":2181},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1799},"end":{"line":59,"column":383,"offset":2181},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"\n        // ...the component\n          <div\n            sx={{\n            // ...card styles\n              \":before\": frontmatter.pin\n                ? {\n                    content: \"'Pinned'\",\n                    width: \"6em\",\n                    backgroundColor: \"accent\",\n                    color: \"background\",\n                    textTransform: \"uppercase\",\n                    fontFamily: \"heading\",\n                    fontWeight: \"bold\",\n                    letterSpacing: \"body\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    borderRadius: \"5px\"\n                  }\n                : null\n            }}\n            className=\"card\"\n          >\n        // show the title and excerpt, maybe a nice picture from your post\n          </div>\n","position":{"start":{"line":61,"column":1,"offset":2185},"end":{"line":89,"column":4,"offset":3070},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And thats it, viola! ‚úåÔ∏è","position":{"start":{"line":91,"column":1,"offset":3074},"end":{"line":91,"column":24,"offset":3097},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":3074},"end":{"line":91,"column":24,"offset":3097},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Pinned blog post\",\"date\":\"2020-07-31T00:00:00.000Z\",\"published\":true,\"category\":\"Whatever\",\"author\":\"Richard Haines\",\"keywords\":[\"mdx\",\"blog\",\"pinned post\",\"gatsby\"],\"pin\":false}","position":{"start":{"line":93,"column":1,"offset":3099},"end":{"line":93,"column":217,"offset":3315},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":93,"column":217,"offset":3315}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pinned blog post\",\n  \"date\": \"2020-07-31T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Whatever\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"mdx\", \"blog\", \"pinned post\", \"gatsby\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"So let's say you have your Gatsby blog all setup using MDX for your blog posts. Perhaps you have written a post that you want to pin to the top of your list of posts in your blog index, this post is awesome and you want people to see it when they first arrive to your blog.\"), mdx(\"p\", null, \"There is no magic here, just adding a new value to our posts frontmatter and filtering on that post. Let's dive into some code examples shall we! \\uD83D\\uDE00\"), mdx(\"h2\", {\n    \"id\": \"frontmatter\"\n  }, \"Frontmatter\"), mdx(\"p\", null, \"In the your posts frontmatter add a new field, pin. This will be a boolean value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-mdx\"\n  }), \"---\\ntitle: Pinned blog post\\ndate: 2020-07-31\\npublished: false\\ncategory: Whatever\\nauthor: Richard Haines\\nkeywords: [mdx, blog, pinned post, gatsby]\\npin: true\\n---\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"the-blog-index\"\n  }, \"The blog index\"), mdx(\"p\", null, \"In the blog index you'll most likely have a query so that you can fetch your posts and pass them to the MDXRenderer. Add the new field value to the frontmatter.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-mdx\"\n  }), \"export const query = graphql`\\n  query BlogIndexQuery {\\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }, filter: { frontmatter: { published: { eq: true } } }) {\\n      nodes {\\n        id\\n        excerpt(pruneLength: 200)\\n        frontmatter {\\n          title\\n          date(formatString: \\\"DD MMM YYYY\\\")\\n          category\\n          author\\n          pin\\n        }\\n        fields {\\n          slug\\n        }\\n      }\\n    }\\n  }\\n`;\\n\")), mdx(\"p\", null, \"Create a new variable called pinned and filter the passed in mdx nodes by the pin frontmatter field. Then create a nice ternary to check if any posts are in fact pinned or not.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  const pinned = data.allMdx.nodes.filter(post => post.frontmatter.pin === true);\\n  const allPosts = pinned.length\\n    ? [pinned[0], ...data.allMdx.nodes.filter(post => !post.frontmatter.pin)]\\n    : data.allMdx.nodes;\\n\")), mdx(\"p\", null, \"The allPosts variable will be passed and used to render the posts in nice cards or however you choose to display them. We can now check the frontmatter and see if a post is pinned or not. I like to use Theme-ui to style my components but this same code can be used with CSS. In the container card for your blog post add a before pseudo element that only shows if the post is pinned.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\n        // ...the component\\n          <div\\n            sx={{\\n            // ...card styles\\n              \\\":before\\\": frontmatter.pin\\n                ? {\\n                    content: \\\"'Pinned'\\\",\\n                    width: \\\"6em\\\",\\n                    backgroundColor: \\\"accent\\\",\\n                    color: \\\"background\\\",\\n                    textTransform: \\\"uppercase\\\",\\n                    fontFamily: \\\"heading\\\",\\n                    fontWeight: \\\"bold\\\",\\n                    letterSpacing: \\\"body\\\",\\n                    display: \\\"flex\\\",\\n                    justifyContent: \\\"center\\\",\\n                    alignItems: \\\"center\\\",\\n                    borderRadius: \\\"5px\\\"\\n                  }\\n                : null\\n            }}\\n            className=\\\"card\\\"\\n          >\\n        // show the title and excerpt, maybe a nice picture from your post\\n          </div>\\n\\n\")), mdx(\"p\", null, \"And thats it, viola! \\u270C\\uFE0F\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Pinned blog post\",\n  \"date\": \"2020-07-31T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Whatever\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"mdx\", \"blog\", \"pinned post\", \"gatsby\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`So let's say you have your Gatsby blog all setup using MDX for your blog posts. Perhaps you have written a post that you want to pin to the top of your list of posts in your blog index, this post is awesome and you want people to see it when they first arrive to your blog.`}</p>\n    <p>{`There is no magic here, just adding a new value to our posts frontmatter and filtering on that post. Let's dive into some code examples shall we! üòÄ`}</p>\n    <h2 {...{\n      \"id\": \"frontmatter\"\n    }}>{`Frontmatter`}</h2>\n    <p>{`In the your posts frontmatter add a new field, pin. This will be a boolean value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdx\"\n      }}>{`---\ntitle: Pinned blog post\ndate: 2020-07-31\npublished: false\ncategory: Whatever\nauthor: Richard Haines\nkeywords: [mdx, blog, pinned post, gatsby]\npin: true\n---\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-blog-index\"\n    }}>{`The blog index`}</h2>\n    <p>{`In the blog index you'll most likely have a query so that you can fetch your posts and pass them to the MDXRenderer. Add the new field value to the frontmatter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdx\"\n      }}>{`export const query = graphql\\`\n  query BlogIndexQuery {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }, filter: { frontmatter: { published: { eq: true } } }) {\n      nodes {\n        id\n        excerpt(pruneLength: 200)\n        frontmatter {\n          title\n          date(formatString: \"DD MMM YYYY\")\n          category\n          author\n          pin\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n\\`;\n`}</code></pre>\n    <p>{`Create a new variable called pinned and filter the passed in mdx nodes by the pin frontmatter field. Then create a nice ternary to check if any posts are in fact pinned or not.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  const pinned = data.allMdx.nodes.filter(post => post.frontmatter.pin === true);\n  const allPosts = pinned.length\n    ? [pinned[0], ...data.allMdx.nodes.filter(post => !post.frontmatter.pin)]\n    : data.allMdx.nodes;\n`}</code></pre>\n    <p>{`The allPosts variable will be passed and used to render the posts in nice cards or however you choose to display them. We can now check the frontmatter and see if a post is pinned or not. I like to use Theme-ui to style my components but this same code can be used with CSS. In the container card for your blog post add a before pseudo element that only shows if the post is pinned.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n        // ...the component\n          <div\n            sx={{\n            // ...card styles\n              \":before\": frontmatter.pin\n                ? {\n                    content: \"'Pinned'\",\n                    width: \"6em\",\n                    backgroundColor: \"accent\",\n                    color: \"background\",\n                    textTransform: \"uppercase\",\n                    fontFamily: \"heading\",\n                    fontWeight: \"bold\",\n                    letterSpacing: \"body\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    borderRadius: \"5px\"\n                  }\n                : null\n            }}\n            className=\"card\"\n          >\n        // show the title and excerpt, maybe a nice picture from your post\n          </div>\n\n`}</code></pre>\n    <p>{`And thats it, viola! ‚úåÔ∏è`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}