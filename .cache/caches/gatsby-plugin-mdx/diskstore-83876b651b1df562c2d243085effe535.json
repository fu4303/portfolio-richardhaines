{"expireTime":9007200851906806000,"key":"gatsby-plugin-mdx-entire-payload-adc5ee0ce21d3229cd581849956d23d0-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import AccentBox from \"../src/components/site/blog/accent-box.js\";","position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":67,"offset":68},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Im working on a project where I use a lot of emoji (because I love them! üòç), so I decided to create an Emoji component, because you know, it's the right thing to do. I had it setup pretty good I thought, was passing in an aria-label, set the role to img and wrapped it in a span. But the linter was complaining that my emoji wasn't wrapped in a span and that it had to have a role of img and a aria-label. What was going on????","position":{"start":{"line":4,"column":1,"offset":72},"end":{"line":4,"column":429,"offset":500},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":72},"end":{"line":4,"column":429,"offset":500},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Turns out i didn't take into account how I was rendering the emoji. Lets look at how my first attempt looked.","position":{"start":{"line":6,"column":1,"offset":504},"end":{"line":6,"column":110,"offset":613},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":504},"end":{"line":6,"column":110,"offset":613},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Initial attempt","position":{"start":{"line":8,"column":4,"offset":620},"end":{"line":8,"column":19,"offset":635},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":617},"end":{"line":8,"column":19,"offset":635},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"import React from 'react';\n\nconst Emoji = ({ children, ariaLabel }) => (\n  <span role=\"img\" aria-label={ariaLabel}>\n    {children}\n  </span>\n);\n\nexport default Emoji;\n\n// usage\n<Emoji ariaLabel=\"Two hands shaking\">ü§ùüèΩ</Emoji>","position":{"start":{"line":10,"column":1,"offset":639},"end":{"line":23,"column":4,"offset":890},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Pretty straight forward, im passing in my emoji as a child so that its wrapped in the span. Im also setting the role to img and also passing in the aria-label. But this doesn't pass the linters accessibility tests. ","position":{"start":{"line":25,"column":1,"offset":894},"end":{"line":25,"column":216,"offset":1109},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":894},"end":{"line":25,"column":216,"offset":1109},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Working solution","position":{"start":{"line":27,"column":4,"offset":1116},"end":{"line":27,"column":20,"offset":1132},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1113},"end":{"line":27,"column":20,"offset":1132},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"import React from 'react';\n\nconst Emoji = ({ariaLabel, symbol}) => (\n  <span role=\"img\" aria-label={ariaLabel}>\n      {symbol}\n  </span>\n);\nexport default Emoji;\n\n// usage\n<Emoji ariaLabel=\"Two hands shaking\" symbol=\"ü§ùüèΩ\"/>","position":{"start":{"line":29,"column":1,"offset":1136},"end":{"line":41,"column":4,"offset":1384},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"By passing the emoji as an explicit string prop out linter is now content and we can go about our business adding an obscene amount of emoji to our site! üòÑ","position":{"start":{"line":43,"column":1,"offset":1388},"end":{"line":43,"column":157,"offset":1544},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1388},"end":{"line":43,"column":157,"offset":1544},"indent":[]}},{"type":"jsx","value":"<AccentBox>\n    Im not 100% sure why this fix works, I thought that maybe it had something to do with how React renders children and that by passing the emoji string as a child it wasn't picking it up as an actual string. If anyone know the answer to this please ping me on Twitter and let me know!\n</AccentBox>","position":{"start":{"line":45,"column":1,"offset":1548},"end":{"line":47,"column":13,"offset":1861},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"React Emoji Component\",\"date\":\"2020-08-10T00:00:00.000Z\",\"published\":true,\"category\":\"Whatever\",\"author\":\"Richard Haines\",\"keywords\":[\"react\",\"emoji\",\"accessibility\"],\"pin\":false}","position":{"start":{"line":49,"column":1,"offset":1863},"end":{"line":49,"column":218,"offset":2080},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":49,"column":218,"offset":2080}}},"scopeImports":["import AccentBox from \"../src/components/site/blog/accent-box.js\";","import React from 'react'"],"scopeIdentifiers":["AccentBox","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Emoji Component\",\n  \"date\": \"2020-08-10T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Whatever\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"react\", \"emoji\", \"accessibility\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Im working on a project where I use a lot of emoji (because I love them! \\uD83D\\uDE0D), so I decided to create an Emoji component, because you know, it's the right thing to do. I had it setup pretty good I thought, was passing in an aria-label, set the role to img and wrapped it in a span. But the linter was complaining that my emoji wasn't wrapped in a span and that it had to have a role of img and a aria-label. What was going on????\"), mdx(\"p\", null, \"Turns out i didn't take into account how I was rendering the emoji. Lets look at how my first attempt looked.\"), mdx(\"h2\", {\n    \"id\": \"initial-attempt\"\n  }, \"Initial attempt\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from 'react';\\n\\nconst Emoji = ({ children, ariaLabel }) => (\\n  <span role=\\\"img\\\" aria-label={ariaLabel}>\\n    {children}\\n  </span>\\n);\\n\\nexport default Emoji;\\n\\n// usage\\n<Emoji ariaLabel=\\\"Two hands shaking\\\">\\uD83E\\uDD1D\\uD83C\\uDFFD</Emoji>\\n\")), mdx(\"p\", null, \"Pretty straight forward, im passing in my emoji as a child so that its wrapped in the span. Im also setting the role to img and also passing in the aria-label. But this doesn't pass the linters accessibility tests. \"), mdx(\"h2\", {\n    \"id\": \"working-solution\"\n  }, \"Working solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from 'react';\\n\\nconst Emoji = ({ariaLabel, symbol}) => (\\n  <span role=\\\"img\\\" aria-label={ariaLabel}>\\n      {symbol}\\n  </span>\\n);\\nexport default Emoji;\\n\\n// usage\\n<Emoji ariaLabel=\\\"Two hands shaking\\\" symbol=\\\"\\uD83E\\uDD1D\\uD83C\\uDFFD\\\"/>\\n\")), mdx(\"p\", null, \"By passing the emoji as an explicit string prop out linter is now content and we can go about our business adding an obscene amount of emoji to our site! \\uD83D\\uDE04\"), mdx(AccentBox, {\n    mdxType: \"AccentBox\"\n  }, \"Im not 100% sure why this fix works, I thought that maybe it had something to do with how React renders children and that by passing the emoji string as a child it wasn't picking it up as an actual string. If anyone know the answer to this please ping me on Twitter and let me know!\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport AccentBox from \"../src/components/site/blog/accent-box.js\";\nexport const _frontmatter = {\n  \"title\": \"React Emoji Component\",\n  \"date\": \"2020-08-10T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Whatever\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"react\", \"emoji\", \"accessibility\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`Im working on a project where I use a lot of emoji (because I love them! üòç), so I decided to create an Emoji component, because you know, it's the right thing to do. I had it setup pretty good I thought, was passing in an aria-label, set the role to img and wrapped it in a span. But the linter was complaining that my emoji wasn't wrapped in a span and that it had to have a role of img and a aria-label. What was going on????`}</p>\n    <p>{`Turns out i didn't take into account how I was rendering the emoji. Lets look at how my first attempt looked.`}</p>\n    <h2 {...{\n      \"id\": \"initial-attempt\"\n    }}>{`Initial attempt`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\n\nconst Emoji = ({ children, ariaLabel }) => (\n  <span role=\"img\" aria-label={ariaLabel}>\n    {children}\n  </span>\n);\n\nexport default Emoji;\n\n// usage\n<Emoji ariaLabel=\"Two hands shaking\">ü§ùüèΩ</Emoji>\n`}</code></pre>\n    <p>{`Pretty straight forward, im passing in my emoji as a child so that its wrapped in the span. Im also setting the role to img and also passing in the aria-label. But this doesn't pass the linters accessibility tests. `}</p>\n    <h2 {...{\n      \"id\": \"working-solution\"\n    }}>{`Working solution`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\n\nconst Emoji = ({ariaLabel, symbol}) => (\n  <span role=\"img\" aria-label={ariaLabel}>\n      {symbol}\n  </span>\n);\nexport default Emoji;\n\n// usage\n<Emoji ariaLabel=\"Two hands shaking\" symbol=\"ü§ùüèΩ\"/>\n`}</code></pre>\n    <p>{`By passing the emoji as an explicit string prop out linter is now content and we can go about our business adding an obscene amount of emoji to our site! üòÑ`}</p>\n    <AccentBox mdxType=\"AccentBox\">\n    Im not 100% sure why this fix works, I thought that maybe it had something to do with how React renders children and that by passing the emoji string as a child it wasn't picking it up as an actual string. If anyone know the answer to this please ping me on Twitter and let me know!\n    </AccentBox>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}