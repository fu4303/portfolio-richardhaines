{"expireTime":9007200851906808000,"key":"gatsby-plugin-mdx-entire-payload-2ca826d36507be66cacaae7ab83156c6-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import AccentBox from '../src/components/site/blog/accent-box.js';","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":67,"offset":66},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We're going to go from start to finish and create a gatsby theme that you can deploy as an npm package. In the first part we will cover the base setup of the project.","position":{"start":{"line":3,"column":1,"offset":70},"end":{"line":3,"column":167,"offset":236},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":70},"end":{"line":3,"column":167,"offset":236},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is part 1 in a series of tutorials. The format is step by step.","position":{"start":{"line":5,"column":1,"offset":240},"end":{"line":5,"column":69,"offset":308},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":240},"end":{"line":5,"column":69,"offset":308},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So where to start? You have an idea, you want to create an ecommerce theme for all the world to use. In this tutorial we are going to create a new gatsby theme from scratch, handle payments using snipcart, store our data with sanity.io and style it with theme-ui. Its going to be dope ðŸ˜Ž","position":{"start":{"line":7,"column":1,"offset":312},"end":{"line":7,"column":288,"offset":599},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":312},"end":{"line":7,"column":288,"offset":599},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are a few pre-requisits, Im going to assume you know how to use Gatsby and React to a certain degree, the rest we will walk through.","position":{"start":{"line":9,"column":1,"offset":603},"end":{"line":9,"column":139,"offset":741},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":603},"end":{"line":9,"column":139,"offset":741},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We are going to be building this from scratch so lets start by creating our new project","position":{"start":{"line":11,"column":1,"offset":745},"end":{"line":11,"column":88,"offset":832},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":745},"end":{"line":11,"column":88,"offset":832},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"mkdir gatsby-theme-fashion\ncd gatsby-theme-fashion","position":{"start":{"line":13,"column":1,"offset":836},"end":{"line":16,"column":4,"offset":901},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Cool beans, so lets now create our project. When working with gatsby themes i like to use yarn workspaces, this allows us to keep our theme and an example site in a monorepo with yarn controlling the dependencies between them. Lets create our projects root, we'll use the -y flag to auto fill the package.json stuff as we will be removing it all anyway.","position":{"start":{"line":18,"column":1,"offset":905},"end":{"line":18,"column":354,"offset":1258},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":905},"end":{"line":18,"column":354,"offset":1258},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn init -y","position":{"start":{"line":20,"column":1,"offset":1262},"end":{"line":22,"column":4,"offset":1288},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have a package.json in our folder we can open our code editor and remove the auto filled stuff and add our own. We want to add the workspaces key and add our project folders. There are many ways of doing this and people have different opinions about which way is best. This is my preferred method.","position":{"start":{"line":24,"column":1,"offset":1292},"end":{"line":24,"column":310,"offset":1601},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1292},"end":{"line":24,"column":310,"offset":1601},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"package.json","position":{"start":{"line":26,"column":5,"offset":1609},"end":{"line":26,"column":17,"offset":1621},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1605},"end":{"line":26,"column":17,"offset":1621},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"{\n  \"private\": true,\n  \"workspaces\": [\n    \"demo\",\n    \"packages/*\"\n  ]\n}","position":{"start":{"line":28,"column":1,"offset":1625},"end":{"line":36,"column":4,"offset":1716},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We want the project to be private as we wont publish it and also workspaces wont work if we don't set this. We have also specified that we will have one folder for our demo project and another which will hold our packages, or our theme(s).","position":{"start":{"line":38,"column":1,"offset":1720},"end":{"line":38,"column":240,"offset":1959},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1720},"end":{"line":38,"column":240,"offset":1959},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create the demo and packages folders","position":{"start":{"line":40,"column":1,"offset":1963},"end":{"line":40,"column":37,"offset":1999},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1963},"end":{"line":40,"column":37,"offset":1999},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"mkdir demo\nmkdir packages","position":{"start":{"line":42,"column":1,"offset":2003},"end":{"line":45,"column":4,"offset":2043},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We'll start with our theme and hop over to the demo site a bit later on. Lets move into the packages folder and create our themes folder and initialize the project, following yarns instructions for setup as we go. I like to set the version to 0.0.1 from the start as during development we will be publish our package and when it comes time to release it in the wild its going to look strange if our version number is 54.9.7 or something. Keep it at the patches in development until release.","position":{"start":{"line":47,"column":1,"offset":2047},"end":{"line":47,"column":491,"offset":2537},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2047},"end":{"line":47,"column":491,"offset":2537},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"cd packages\nmkdir gatsby-theme-fashion\ncd gatsby-theme-fashion\nyarn init","position":{"start":{"line":49,"column":1,"offset":2541},"end":{"line":54,"column":4,"offset":2630},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have our theme project installed lets add the base packages we are going to need. For us those are gatsby, react, react-dom, theme-ui, gatsby-plugin-theme-ui @emotion/core and @mdx-js/react. Lets also add prettier so that all our code looks pretty once we save it! ðŸ˜‡","position":{"start":{"line":56,"column":1,"offset":2634},"end":{"line":56,"column":280,"offset":2913},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2634},"end":{"line":56,"column":280,"offset":2913},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn add gatsby react react-dom theme-ui gatsby-plugin-theme-ui @emotion/core @mdx-js/react gatsby-plugin-google-fonts\nyarn add prettier -D","position":{"start":{"line":58,"column":1,"offset":2917},"end":{"line":61,"column":4,"offset":3071},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Niiiice! Cool, now lets add some scripts to our package.json for building, cleaning and making stuff pretty.","position":{"start":{"line":63,"column":1,"offset":3075},"end":{"line":63,"column":109,"offset":3183},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":3075},"end":{"line":63,"column":109,"offset":3183},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"package.json","position":{"start":{"line":65,"column":5,"offset":3191},"end":{"line":65,"column":17,"offset":3203},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":3187},"end":{"line":65,"column":17,"offset":3203},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"  \"scripts\": {\n    \"dev\": \"gatsby develop\",\n    \"build\": \"gatsby build\",\n    \"clean\": \"gatsby clean\",\n    \"pretty\": \"prettier --write \\\"src/**/*js\\\"\"\n  },","position":{"start":{"line":67,"column":1,"offset":3207},"end":{"line":74,"column":4,"offset":3378},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can give the keys whatever name makes sense to you. We'll be mostly using dev, clean and pretty. We could set up a pre commit hook to run pretty when we commit code, you can look that up, for this example we will skip it. I quite like typing out yarn pretty and watching all my code transform. You can also set it up to run on save in vscode, again, that is something for you to google.","position":{"start":{"line":76,"column":1,"offset":3382},"end":{"line":76,"column":391,"offset":3772},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":3382},"end":{"line":76,"column":391,"offset":3772},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to add gatsby, react and react-dom as peer dependencies so that the end user has to install them.","position":{"start":{"line":78,"column":1,"offset":3776},"end":{"line":78,"column":106,"offset":3881},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":3776},"end":{"line":78,"column":106,"offset":3881},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"package.json","position":{"start":{"line":80,"column":5,"offset":3889},"end":{"line":80,"column":17,"offset":3901},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":3885},"end":{"line":80,"column":17,"offset":3901},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"  \"peerDependencies\": {\n    \"gatsby\": \"^2.19.8\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\"\n  },","position":{"start":{"line":82,"column":1,"offset":3905},"end":{"line":88,"column":4,"offset":4027},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we need to add our gatsby-config.js file and add the plugins we have installed for our theme. Its important to add the gatsby-plugin-theme-ui plugin at the end as it will be overriden by the theme consumer if they have it installed also.","position":{"start":{"line":90,"column":1,"offset":4031},"end":{"line":90,"column":242,"offset":4272},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":4031},"end":{"line":90,"column":242,"offset":4272},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"gatsby-config.js","position":{"start":{"line":92,"column":5,"offset":4280},"end":{"line":92,"column":21,"offset":4296},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":4276},"end":{"line":92,"column":21,"offset":4296},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"module.exports = {\n    plugins: [\n        {\n            resolve: 'gatsby-plugin-google-fonts',\n            options: {\n              fonts: [\n                'Muli',\n                'Open Sans',\n                'source sans pro\\:300,400,400i,700' \n              ]\n            }\n        },\n          'gatsby-plugin-theme-ui'\n    ]\n}","position":{"start":{"line":94,"column":1,"offset":4300},"end":{"line":110,"column":4,"offset":4656},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We have used gatsby-plugin-google-fonts so that we can easily install some nice fonts from google. Feel free to choose your own.","position":{"start":{"line":112,"column":1,"offset":4660},"end":{"line":112,"column":129,"offset":4788},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":4660},"end":{"line":112,"column":129,"offset":4788},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I should add at this point that the versions are explicit to this tutorial, everything should work regardless, that being said it can be that some breaking changes are introduced at some point in the future so yours may differ from mine, if you have any problems check the changelog from my version to the version you are using to debug the problem.","position":{"start":{"line":114,"column":1,"offset":4792},"end":{"line":114,"column":350,"offset":5141},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":4792},"end":{"line":114,"column":350,"offset":5141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ok so lets add some folders and files to our project.","position":{"start":{"line":116,"column":1,"offset":5145},"end":{"line":116,"column":54,"offset":5198},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":5145},"end":{"line":116,"column":54,"offset":5198},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"touch src/pages\ntouch src/components\ntouch src/pages/index.js","position":{"start":{"line":118,"column":1,"offset":5202},"end":{"line":122,"column":4,"offset":5279},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We also want to create an index.js file at the root of out theme as thats what gatsby is looking for","position":{"start":{"line":124,"column":1,"offset":5283},"end":{"line":124,"column":101,"offset":5383},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":5283},"end":{"line":124,"column":101,"offset":5383},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"touch index.js","position":{"start":{"line":126,"column":1,"offset":5387},"end":{"line":128,"column":4,"offset":5415},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Add a comment to this file so it has some content and we know whats going on. Later on we can if we like export some of our theme components from this file for the end use to import.","position":{"start":{"line":130,"column":1,"offset":5419},"end":{"line":130,"column":183,"offset":5601},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":5419},"end":{"line":130,"column":183,"offset":5601},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sweet! We've got a really basic theme setup, it doesn't do anything right now, first we want to setup our demo site and link it to our theme. The magic of yarn workspaces!","position":{"start":{"line":132,"column":1,"offset":5605},"end":{"line":132,"column":172,"offset":5776},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":5605},"end":{"line":132,"column":172,"offset":5776},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"cd ..\ncd demo\nyarn init\nyarn add gatsby react react-dom dotenv","position":{"start":{"line":134,"column":1,"offset":5780},"end":{"line":139,"column":4,"offset":5859},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Your demo sites package.json should look something like this:","position":{"start":{"line":141,"column":1,"offset":5863},"end":{"line":141,"column":62,"offset":5924},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":5863},"end":{"line":141,"column":62,"offset":5924},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"{\n  \"name\": \"demo\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"dev\": \"gatsby develop\",\n    \"build\": \"gatsby build\",\n    \"clean\": \"gatsby clean\"\n  },\n  \"dependencies\": {\n    \"dotenv\": \"^8.2.0\",\n    \"gatsby\": \"^2.19.8\",\n    \"gatsby-theme-fashion\": \"*\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\"\n  }\n}","position":{"start":{"line":143,"column":1,"offset":5928},"end":{"line":162,"column":4,"offset":6307},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We have added dotenv so that we can access the environment variables later on. We are also telling our demo site to use any version of our theme it finds. We have also added our scripts so that we can actually run the thing!","position":{"start":{"line":164,"column":1,"offset":6311},"end":{"line":164,"column":225,"offset":6535},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":6311},"end":{"line":164,"column":225,"offset":6535},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next create a new file called gatsby-config.js at our demo projects root and add our theme as a plugin.","position":{"start":{"line":166,"column":1,"offset":6539},"end":{"line":166,"column":104,"offset":6642},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":6539},"end":{"line":166,"column":104,"offset":6642},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"gatsby-config.js","position":{"start":{"line":168,"column":5,"offset":6650},"end":{"line":168,"column":21,"offset":6666},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":6646},"end":{"line":168,"column":21,"offset":6666},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"module.exports = {\n  plugins: [\"gatsby-theme-fashion\"]\n};","position":{"start":{"line":170,"column":1,"offset":6670},"end":{"line":174,"column":4,"offset":6741},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Right now we don't have any options that our theme requires so this will do. Then we run yarn from the root of our project to link it all up and we can then check if its all cool","position":{"start":{"line":176,"column":1,"offset":6745},"end":{"line":176,"column":179,"offset":6923},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":6745},"end":{"line":176,"column":179,"offset":6923},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn\nyarn workspaces info","position":{"start":{"line":178,"column":1,"offset":6927},"end":{"line":181,"column":4,"offset":6967},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We should see the following output indicating that our demo site is linked to our theme:","position":{"start":{"line":183,"column":1,"offset":6971},"end":{"line":183,"column":89,"offset":7059},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":6971},"end":{"line":183,"column":89,"offset":7059},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn workspaces v1.21.1\n{\n  \"demo\": {\n    \"location\": \"packages/demo\",\n    \"workspaceDependencies\": [\n      \"gatsby-theme-fashion\"\n    ],\n    \"mismatchedWorkspaceDependencies\": []\n  },\n  \"gatsby-theme-fashion\": {\n    \"location\": \"packages/gatsby-theme-fashion\",\n    \"workspaceDependencies\": [],\n    \"mismatchedWorkspaceDependencies\": []\n  }\n}\nDone in 0.06s.","position":{"start":{"line":185,"column":1,"offset":7063},"end":{"line":202,"column":4,"offset":7449},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"BOOM!","position":{"start":{"line":204,"column":1,"offset":7453},"end":{"line":204,"column":6,"offset":7458},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":7453},"end":{"line":204,"column":6,"offset":7458},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So now might be a good time to commit our work. Go to github and login to your account and create a new repository called gatsby-theme-fashion. Then from the root of our project....","position":{"start":{"line":206,"column":1,"offset":7462},"end":{"line":206,"column":182,"offset":7643},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":7462},"end":{"line":206,"column":182,"offset":7643},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"WHOA there âœ‹ Lets think about this for a second, we have just installed a bunch of packages, which means we have a node_modules folder at our root and in each project, thats a hell of a lot of files that we do not want git to see. Lets create our gitignore file at our projects root.","position":{"start":{"line":208,"column":1,"offset":7647},"end":{"line":208,"column":284,"offset":7930},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":7647},"end":{"line":208,"column":284,"offset":7930},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"touch .gitignore","position":{"start":{"line":210,"column":1,"offset":7934},"end":{"line":212,"column":4,"offset":7964},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then add the following to it:","position":{"start":{"line":214,"column":1,"offset":7968},"end":{"line":214,"column":30,"offset":7997},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":7968},"end":{"line":214,"column":30,"offset":7997},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"node_modules/\n.env.*\npublic/\n.cache/","position":{"start":{"line":216,"column":1,"offset":8001},"end":{"line":221,"column":4,"offset":8054},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now i'll be honest, im not sure if you need to do this but i do it anyway, lets copy that file to our theme and demo projects.","position":{"start":{"line":223,"column":1,"offset":8058},"end":{"line":223,"column":127,"offset":8184},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":8058},"end":{"line":223,"column":127,"offset":8184},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ok, nice! Now that thats done lets initialize our project with git and commit our work. You can get your remote repository url from the repository page you created.","position":{"start":{"line":225,"column":1,"offset":8188},"end":{"line":225,"column":165,"offset":8352},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":8188},"end":{"line":225,"column":165,"offset":8352},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"git init\ngit add .\ngit commit -m \"My first commit\"\ngit remote add origin <remote repository url>\ngit remote -v\ngit push origin master","position":{"start":{"line":227,"column":1,"offset":8356},"end":{"line":234,"column":4,"offset":8508},"indent":[1,1,1,1,1,1,1]}},{"type":"jsx","value":"<AccentBox>\nSo lets recap what we have done so far:","position":{"start":{"line":235,"column":1,"offset":8510},"end":{"line":236,"column":40,"offset":8562},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Setup a project","position":{"start":{"line":238,"column":3,"offset":8568},"end":{"line":238,"column":18,"offset":8583},"indent":[]}}],"position":{"start":{"line":238,"column":3,"offset":8568},"end":{"line":238,"column":18,"offset":8583},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":8566},"end":{"line":238,"column":18,"offset":8583},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added our demo and theme projects","position":{"start":{"line":239,"column":3,"offset":8587},"end":{"line":239,"column":36,"offset":8620},"indent":[]}}],"position":{"start":{"line":239,"column":3,"offset":8587},"end":{"line":239,"column":36,"offset":8620},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":8585},"end":{"line":239,"column":36,"offset":8620},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Linked our demo to our theme","position":{"start":{"line":240,"column":3,"offset":8624},"end":{"line":240,"column":31,"offset":8652},"indent":[]}}],"position":{"start":{"line":240,"column":3,"offset":8624},"end":{"line":240,"column":31,"offset":8652},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":8622},"end":{"line":240,"column":31,"offset":8652},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Created a repository and committed our work","position":{"start":{"line":241,"column":3,"offset":8656},"end":{"line":241,"column":46,"offset":8699},"indent":[]}}],"position":{"start":{"line":241,"column":3,"offset":8656},"end":{"line":241,"column":46,"offset":8699},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":8654},"end":{"line":241,"column":46,"offset":8699},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":8566},"end":{"line":241,"column":46,"offset":8699},"indent":[1,1,1]}},{"type":"jsx","value":"</AccentBox>","position":{"start":{"line":243,"column":1,"offset":8703},"end":{"line":243,"column":13,"offset":8715},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now would be a good time to add some content and check that our theme is working. Head into your theme projects index.js file located inside src/pages folders and add a generic component to display an h1 that will render from our demo site as the imported theme.","position":{"start":{"line":245,"column":1,"offset":8719},"end":{"line":245,"column":263,"offset":8981},"indent":[]}}],"position":{"start":{"line":245,"column":1,"offset":8719},"end":{"line":245,"column":263,"offset":8981},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"import React from 'react'\n\nexport default () => <h1>Hello im coming at you from the theme!!<h1>","position":{"start":{"line":247,"column":1,"offset":8985},"end":{"line":251,"column":4,"offset":9095},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Go into your demo project and run gatsby dev. You should see a white page with the h1 text at the top left of the page, hurrah ðŸ¥³","position":{"start":{"line":253,"column":1,"offset":9099},"end":{"line":253,"column":130,"offset":9228},"indent":[]}}],"position":{"start":{"line":253,"column":1,"offset":9099},"end":{"line":253,"column":130,"offset":9228},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have the base setup complete we can start thinking about what we want to have in our theme. As this is an ecommerce theme there are some basic things that we should consider before we continue. There will be a lot to add so lets get started!","position":{"start":{"line":255,"column":1,"offset":9232},"end":{"line":255,"column":254,"offset":9485},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":9232},"end":{"line":255,"column":254,"offset":9485},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Navbar","position":{"start":{"line":257,"column":3,"offset":9491},"end":{"line":257,"column":9,"offset":9497},"indent":[]}}],"position":{"start":{"line":257,"column":3,"offset":9491},"end":{"line":257,"column":9,"offset":9497},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":9489},"end":{"line":257,"column":9,"offset":9497},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Landing/home page","position":{"start":{"line":258,"column":3,"offset":9501},"end":{"line":258,"column":20,"offset":9518},"indent":[]}}],"position":{"start":{"line":258,"column":3,"offset":9501},"end":{"line":258,"column":20,"offset":9518},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Hero image","position":{"start":{"line":259,"column":5,"offset":9524},"end":{"line":259,"column":15,"offset":9534},"indent":[]}}],"position":{"start":{"line":259,"column":5,"offset":9524},"end":{"line":259,"column":15,"offset":9534},"indent":[]}}],"position":{"start":{"line":259,"column":3,"offset":9522},"end":{"line":259,"column":15,"offset":9534},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Showcase of products","position":{"start":{"line":260,"column":5,"offset":9540},"end":{"line":260,"column":25,"offset":9560},"indent":[]}}],"position":{"start":{"line":260,"column":5,"offset":9540},"end":{"line":260,"column":25,"offset":9560},"indent":[]}}],"position":{"start":{"line":260,"column":3,"offset":9538},"end":{"line":260,"column":25,"offset":9560},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Blog snippets","position":{"start":{"line":261,"column":5,"offset":9566},"end":{"line":261,"column":18,"offset":9579},"indent":[]}}],"position":{"start":{"line":261,"column":5,"offset":9566},"end":{"line":261,"column":18,"offset":9579},"indent":[]}}],"position":{"start":{"line":261,"column":3,"offset":9564},"end":{"line":261,"column":18,"offset":9579},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Instagram feed","position":{"start":{"line":262,"column":5,"offset":9585},"end":{"line":262,"column":19,"offset":9599},"indent":[]}}],"position":{"start":{"line":262,"column":5,"offset":9585},"end":{"line":262,"column":19,"offset":9599},"indent":[]}}],"position":{"start":{"line":262,"column":3,"offset":9583},"end":{"line":262,"column":19,"offset":9599},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Contact section","position":{"start":{"line":263,"column":5,"offset":9605},"end":{"line":263,"column":20,"offset":9620},"indent":[]}}],"position":{"start":{"line":263,"column":5,"offset":9605},"end":{"line":263,"column":20,"offset":9620},"indent":[]}}],"position":{"start":{"line":263,"column":3,"offset":9603},"end":{"line":263,"column":20,"offset":9620},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"About section","position":{"start":{"line":264,"column":5,"offset":9626},"end":{"line":264,"column":18,"offset":9639},"indent":[]}}],"position":{"start":{"line":264,"column":5,"offset":9626},"end":{"line":264,"column":18,"offset":9639},"indent":[]}}],"position":{"start":{"line":264,"column":3,"offset":9624},"end":{"line":264,"column":18,"offset":9639},"indent":[]}}],"position":{"start":{"line":259,"column":3,"offset":9522},"end":{"line":264,"column":18,"offset":9639},"indent":[3,3,3,3,3]}}],"position":{"start":{"line":258,"column":1,"offset":9499},"end":{"line":264,"column":18,"offset":9639},"indent":[1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Products page","position":{"start":{"line":265,"column":3,"offset":9643},"end":{"line":265,"column":16,"offset":9656},"indent":[]}}],"position":{"start":{"line":265,"column":3,"offset":9643},"end":{"line":265,"column":16,"offset":9656},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":9641},"end":{"line":265,"column":16,"offset":9656},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Blog page","position":{"start":{"line":266,"column":3,"offset":9660},"end":{"line":266,"column":12,"offset":9669},"indent":[]}}],"position":{"start":{"line":266,"column":3,"offset":9660},"end":{"line":266,"column":12,"offset":9669},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Blog posts page","position":{"start":{"line":267,"column":5,"offset":9675},"end":{"line":267,"column":20,"offset":9690},"indent":[]}}],"position":{"start":{"line":267,"column":5,"offset":9675},"end":{"line":267,"column":20,"offset":9690},"indent":[]}}],"position":{"start":{"line":267,"column":3,"offset":9673},"end":{"line":267,"column":20,"offset":9690},"indent":[]}}],"position":{"start":{"line":267,"column":3,"offset":9673},"end":{"line":267,"column":20,"offset":9690},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":9658},"end":{"line":267,"column":20,"offset":9690},"indent":[1]}}],"position":{"start":{"line":257,"column":1,"offset":9489},"end":{"line":267,"column":20,"offset":9690},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"These are some of the basic thing we expect an ecommerce site to have. There are of course a lot more thing we could add but lets keep it simple for our example theme. We will be keeping our layout fairly simple with a navbar at the top followed by a hero image and a section explaining about the store. Then a showcase of our top 3 most popular products followed by our Instagram feed and finishing off with our contact form in our footer.","position":{"start":{"line":269,"column":1,"offset":9694},"end":{"line":269,"column":441,"offset":10134},"indent":[]}}],"position":{"start":{"line":269,"column":1,"offset":9694},"end":{"line":269,"column":441,"offset":10134},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can begin by creating all the necessary pages:","position":{"start":{"line":271,"column":1,"offset":10138},"end":{"line":271,"column":50,"offset":10187},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":10138},"end":{"line":271,"column":50,"offset":10187},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"cd packages/gatsby-theme-fashion/src/pages\ntouch products.js\ntouch blog.js","position":{"start":{"line":273,"column":1,"offset":10191},"end":{"line":277,"column":4,"offset":10281},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Theme-ui will enable our end user to override some of our style with ease through shadowing our theme file which will hold all of our colours, fonts and spacings. In order to get started with adding our themeable variables we need to shadow the index.js file form the gatsby-plugin-theme-ui package in our src folder. See ","position":{"start":{"line":279,"column":1,"offset":10285},"end":{"line":279,"column":323,"offset":10607},"indent":[]}},{"type":"link","title":null,"url":"https://theme-ui.com/","children":[{"type":"text","value":"Theme-ui","position":{"start":{"line":279,"column":324,"offset":10608},"end":{"line":279,"column":332,"offset":10616},"indent":[]}}],"position":{"start":{"line":279,"column":323,"offset":10607},"end":{"line":279,"column":356,"offset":10640},"indent":[]}},{"type":"text","value":" for more details.","position":{"start":{"line":279,"column":356,"offset":10640},"end":{"line":279,"column":374,"offset":10658},"indent":[]}}],"position":{"start":{"line":279,"column":1,"offset":10285},"end":{"line":279,"column":374,"offset":10658},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I often start with the sites basic layout. There are a couple of ways to do this. We could create a layout component in our components folder with a css reset and import that into all or our components/pages but there is an easier way utilizing gatsby-plugin-layout. ","position":{"start":{"line":281,"column":1,"offset":10662},"end":{"line":281,"column":268,"offset":10929},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":10662},"end":{"line":281,"column":268,"offset":10929},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets add that plugin","position":{"start":{"line":283,"column":1,"offset":10933},"end":{"line":283,"column":21,"offset":10953},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":10933},"end":{"line":283,"column":21,"offset":10953},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn add gatsby-plugin-layout","position":{"start":{"line":285,"column":1,"offset":10957},"end":{"line":287,"column":4,"offset":11000},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then we need to add it to our gatsby-config.js file:","position":{"start":{"line":289,"column":1,"offset":11004},"end":{"line":289,"column":53,"offset":11056},"indent":[]}}],"position":{"start":{"line":289,"column":1,"offset":11004},"end":{"line":289,"column":53,"offset":11056},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"gatsby-config.js","position":{"start":{"line":291,"column":5,"offset":11064},"end":{"line":291,"column":21,"offset":11080},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":11060},"end":{"line":291,"column":21,"offset":11080},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"module.exports = {\n    plugins: [\n        {\n            resolve: 'gatsby-plugin-google-fonts',\n            options: {\n              fonts: [\n                'Muli',\n                'Open Sans',\n                'source sans pro\\:300,400,400i,700' \n              ]\n            }\n        },\n        {\n            resolve: 'gatsby-plugin-layout',\n            options: {\n              component: require.resolve('./src/layouts/index.js'),\n            },\n        },\n          'gatsby-plugin-theme-ui'\n\n    ]\n}","position":{"start":{"line":293,"column":1,"offset":11084},"end":{"line":316,"column":4,"offset":11620},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Create a layouts folder inside your src folder and add an index.js file. This will be our base layout for our site.","position":{"start":{"line":318,"column":1,"offset":11624},"end":{"line":318,"column":116,"offset":11739},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":11624},"end":{"line":318,"column":116,"offset":11739},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Layout","position":{"start":{"line":320,"column":5,"offset":11747},"end":{"line":320,"column":11,"offset":11753},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":11743},"end":{"line":320,"column":11,"offset":11753},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { Global, css } from \"@emotion/core\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        `}\n      />\n      <div>\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport default Layout;","position":{"start":{"line":322,"column":1,"offset":11757},"end":{"line":355,"column":4,"offset":12424},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This doesn't do much apart from reset some css and render the children within it. Lets create a basic grid layout using css grid. We are going to be using the theme-ui sx prop to add styling to our elements.","position":{"start":{"line":357,"column":1,"offset":12428},"end":{"line":357,"column":208,"offset":12635},"indent":[]}}],"position":{"start":{"line":357,"column":1,"offset":12428},"end":{"line":357,"column":208,"offset":12635},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First up create some grid area strings as constants to be used in our grid. You can add these to a separate file if you wish but we will be adding them to the layout file in this example.","position":{"start":{"line":359,"column":1,"offset":12639},"end":{"line":359,"column":188,"offset":12826},"indent":[]}}],"position":{"start":{"line":359,"column":1,"offset":12639},"end":{"line":359,"column":188,"offset":12826},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const PhoneTemplateAreas = `\n  'nav      nav     nav     nav'\n  'main     main    main    main'\n  'footer   footer  footer  footer'\n`;\n\nconst TabletTemplateAreas = `\n  'nav      nav     nav     nav     nav     nav'\n  'main     main    main    main    main    main'\n  'footer   footer  footer  footer  footer  footer'\n`;\n\nconst DesktopTemplateAreas = `\n  '.    nav      nav     nav     nav     nav     nav    .'\n  '.    main     main    main    main    main    main   .'\n  '.    footer   footer  footer  footer  footer  footer .'\n`;","position":{"start":{"line":361,"column":1,"offset":12830},"end":{"line":379,"column":4,"offset":13389},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then we can add these to the div that wraps our returned children in the layout component.","position":{"start":{"line":381,"column":1,"offset":13393},"end":{"line":381,"column":91,"offset":13483},"indent":[]}}],"position":{"start":{"line":381,"column":1,"offset":13393},"end":{"line":381,"column":91,"offset":13483},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Layout","position":{"start":{"line":383,"column":5,"offset":13491},"end":{"line":383,"column":11,"offset":13497},"indent":[]}}],"position":{"start":{"line":383,"column":1,"offset":13487},"end":{"line":383,"column":11,"offset":13497},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { Global, css } from \"@emotion/core\";\n\nconst PhoneTemplateAreas = `\n  'nav      nav     nav     nav'\n  'main     main    main    main'\n  'footer   footer  footer  footer'\n`;\n\nconst TabletTemplateAreas = `\n  'nav      nav     nav     nav     nav     nav'\n  'main     main    main    main    main    main'\n  'footer   footer  footer  footer  footer  footer'\n`;\n\nconst DesktopTemplateAreas = `\n  '.    nav      nav     nav     nav     nav     nav    .'\n  '.    main     main    main    main    main    main   .'\n  '.    footer   footer  footer  footer  footer  footer .'\n`;\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        `}\n      />\n      <div\n        sx={{\n          display: \"grid\",\n          gridTemplateRows: \"auto\",\n          gridTemplateColumns: [\n            \"repeat(4, 1fr)\",\n            \"repeat(6, 1fr)\",\n            \"repeat(8, 1fr)\"\n          ],\n          gridTemplateAreas: [\n            PhoneTemplateAreas,\n            TabletTemplateAreas,\n            DesktopTemplateAreas\n          ],\n          padding: \"0 1em\"\n        }}\n      >\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport default Layout;","position":{"start":{"line":385,"column":1,"offset":13501},"end":{"line":452,"column":4,"offset":15134},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lets breakdown whats going on here. I used to use Emotion css plus theme-ui to design and style my components, you can read about my experience here ","position":{"start":{"line":454,"column":1,"offset":15138},"end":{"line":454,"column":150,"offset":15287},"indent":[]}},{"type":"link","title":null,"url":"'./css-grid-with-theme-ui.mdx'","children":[{"type":"text","value":"CSS grid with Theme-ui","position":{"start":{"line":454,"column":151,"offset":15288},"end":{"line":454,"column":173,"offset":15310},"indent":[]}}],"position":{"start":{"line":454,"column":150,"offset":15287},"end":{"line":454,"column":206,"offset":15343},"indent":[]}},{"type":"text","value":". Basically theme-ui allows us to specify breakpoints using an array syntax, so ","position":{"start":{"line":454,"column":206,"offset":15343},"end":{"line":454,"column":286,"offset":15423},"indent":[]}},{"type":"linkReference","identifier":"mobile, tablet, desktop","label":"mobile, tablet, desktop","referenceType":"shortcut","children":[{"type":"text","value":"mobile, tablet, desktop","position":{"start":{"line":454,"column":287,"offset":15424},"end":{"line":454,"column":310,"offset":15447},"indent":[]}}],"position":{"start":{"line":454,"column":286,"offset":15423},"end":{"line":454,"column":311,"offset":15448},"indent":[]}},{"type":"text","value":". Pretty cool huh! Now we need to create our nav, main and footer components. All the sites amin content will live inside the main component, by using gatsby-plugin-layout we can just import main as a wrapper to tell gatsby that whatever component should be rendered inside this grid area.","position":{"start":{"line":454,"column":311,"offset":15448},"end":{"line":454,"column":600,"offset":15737},"indent":[]}}],"position":{"start":{"line":454,"column":1,"offset":15138},"end":{"line":454,"column":600,"offset":15737},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a layout folder inside our components folder and add these three components:","position":{"start":{"line":456,"column":1,"offset":15741},"end":{"line":456,"column":84,"offset":15824},"indent":[]}}],"position":{"start":{"line":456,"column":1,"offset":15741},"end":{"line":456,"column":84,"offset":15824},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Header","position":{"start":{"line":458,"column":5,"offset":15832},"end":{"line":458,"column":11,"offset":15838},"indent":[]}}],"position":{"start":{"line":458,"column":1,"offset":15828},"end":{"line":458,"column":11,"offset":15838},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst Header = props => (\n  <header\n    sx={{\n      gridArea: \"nav\",\n      padding: \"1em\",\n      backgroundColor: \"background\",\n      color: \"text\",\n      height: \"100%\",\n      padding: [null, \"2em\", \"2em\"],\n      paddingTop: [\"2em\", null, null]\n    }}\n  >\n    {props.children}\n  </header>\n);\n\nexport default Header;","position":{"start":{"line":460,"column":1,"offset":15842},"end":{"line":481,"column":4,"offset":16239},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Main","position":{"start":{"line":483,"column":5,"offset":16247},"end":{"line":483,"column":9,"offset":16251},"indent":[]}}],"position":{"start":{"line":483,"column":1,"offset":16243},"end":{"line":483,"column":9,"offset":16251},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst Main = props => (\n  <main\n    sx={{\n      gridArea: \"main\",\n      backgroundColor: \"background\",\n      minHeight: \"calc(100vh - 60px)\",\n      paddingTop: [\"2em\", \"60px\", \"60px\"]\n    }}\n  >\n    {props.children}\n  </main>\n);\n\nexport default Main;\n","position":{"start":{"line":485,"column":1,"offset":16255},"end":{"line":504,"column":4,"offset":16585},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Footer","position":{"start":{"line":506,"column":5,"offset":16593},"end":{"line":506,"column":11,"offset":16599},"indent":[]}}],"position":{"start":{"line":506,"column":1,"offset":16589},"end":{"line":506,"column":11,"offset":16599},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst Footer = () => (\n  <footer\n    sx={{\n      gridArea: \"footer\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      backgroundColor: \"background\",\n      color: \"text\"\n    }}\n  >\n    <p\n      sx={{\n        color: \"text\",\n        fontFamily: \"body\",\n        fontSize: [\"0.7em\", \"0.8em\", \"1em\"],\n        letterSpacing: \"text\",\n        fontWeight: 400,\n        margin: \"1em auto\"\n      }}\n    >\n      This is my footer!\n    </p>\n  </footer>\n);\n\nexport default Footer;","position":{"start":{"line":508,"column":1,"offset":16603},"end":{"line":540,"column":4,"offset":17231},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You may be wondering where the background colour is coming from... When using theme-ui we import all of our styles from one main index file. This file can be shadowed by the theme consumer and thus they can override whatever styles we have in there to change the look of the theme. Lets create that now.","position":{"start":{"line":542,"column":1,"offset":17235},"end":{"line":542,"column":304,"offset":17538},"indent":[]}}],"position":{"start":{"line":542,"column":1,"offset":17235},"end":{"line":542,"column":304,"offset":17538},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Inside the src folder create a new folder called gatsby-plugin-theme-ui, inside that folder create a new file named index.js and add the following:","position":{"start":{"line":544,"column":1,"offset":17542},"end":{"line":544,"column":148,"offset":17689},"indent":[]}}],"position":{"start":{"line":544,"column":1,"offset":17542},"end":{"line":544,"column":148,"offset":17689},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Our theme styles","position":{"start":{"line":546,"column":5,"offset":17697},"end":{"line":546,"column":21,"offset":17713},"indent":[]}}],"position":{"start":{"line":546,"column":1,"offset":17693},"end":{"line":546,"column":21,"offset":17713},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export default {\n  fonts: {\n    body: \"Open Sans\",\n    heading: \"Muli\"\n  },\n  fontWeights: {\n    body: 300,\n    heading: 400,\n    bold: 700\n  },\n  lineHeights: {\n    body: \"110%\",\n    heading: 1.125,\n    tagline: \"100px\"\n  },\n  letterSpacing: {\n    body: \"2px\",\n    text: \"5px\"\n  },\n  colors: {\n    text: \"#FFFfff\",\n    background: \"#121212\",\n    primary: \"#000010\",\n    secondary: \"#E7E7E9\",\n    secondaryDarker: \"#545455\",\n    accent: \"#DE3C4B\"\n  },\n  breakpoints: ['40em', '56em', '64em']\n};","position":{"start":{"line":548,"column":1,"offset":17717},"end":{"line":578,"column":4,"offset":18251},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"These values can be accessed via the sx prop as seen above.","position":{"start":{"line":579,"column":1,"offset":18253},"end":{"line":579,"column":60,"offset":18312},"indent":[]}}],"position":{"start":{"line":579,"column":1,"offset":18253},"end":{"line":579,"column":60,"offset":18312},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets add them to our layout to complete this part of the tutorial.","position":{"start":{"line":581,"column":1,"offset":18316},"end":{"line":581,"column":67,"offset":18382},"indent":[]}}],"position":{"start":{"line":581,"column":1,"offset":18316},"end":{"line":581,"column":67,"offset":18382},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Layout","position":{"start":{"line":583,"column":5,"offset":18390},"end":{"line":583,"column":11,"offset":18396},"indent":[]}}],"position":{"start":{"line":583,"column":1,"offset":18386},"end":{"line":583,"column":11,"offset":18396},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { Global, css } from \"@emotion/core\";\nimport Header from \"../components/layout/header\";\nimport {\n  PhoneTemplateAreas,\n  TabletTemplateAreas,\n  DesktopTemplateAreas\n} from \"./../window/breakpoints\";\nimport Footer from \"../components/layout/footer\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        `}\n      />\n      <div\n        sx={{\n          display: \"grid\",\n          gridTemplateRows: \"auto\",\n          gridTemplateColumns: [\n            \"repeat(4, 1fr)\",\n            \"repeat(6, 1fr)\",\n            \"repeat(8, 1fr)\"\n          ],\n          gridTemplateAreas: [\n            PhoneTemplateAreas,\n            TabletTemplateAreas,\n            DesktopTemplateAreas\n          ],\n          padding: \"0 1em\"\n        }}\n      >\n        <Header>\n          navbar will go here\n        </Header>\n        {children}\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport default Layout;","position":{"start":{"line":585,"column":1,"offset":18400},"end":{"line":645,"column":4,"offset":19788},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<AccentBox>\nSo lets recap what we have done so far:","position":{"start":{"line":646,"column":1,"offset":19790},"end":{"line":647,"column":40,"offset":19842},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Setup a project","position":{"start":{"line":649,"column":3,"offset":19848},"end":{"line":649,"column":18,"offset":19863},"indent":[]}}],"position":{"start":{"line":649,"column":3,"offset":19848},"end":{"line":649,"column":18,"offset":19863},"indent":[]}}],"position":{"start":{"line":649,"column":1,"offset":19846},"end":{"line":649,"column":18,"offset":19863},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added our demo and theme projects","position":{"start":{"line":650,"column":3,"offset":19867},"end":{"line":650,"column":36,"offset":19900},"indent":[]}}],"position":{"start":{"line":650,"column":3,"offset":19867},"end":{"line":650,"column":36,"offset":19900},"indent":[]}}],"position":{"start":{"line":650,"column":1,"offset":19865},"end":{"line":650,"column":36,"offset":19900},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Linked our demo to our theme","position":{"start":{"line":651,"column":3,"offset":19904},"end":{"line":651,"column":31,"offset":19932},"indent":[]}}],"position":{"start":{"line":651,"column":3,"offset":19904},"end":{"line":651,"column":31,"offset":19932},"indent":[]}}],"position":{"start":{"line":651,"column":1,"offset":19902},"end":{"line":651,"column":31,"offset":19932},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Created a repository and committed our work","position":{"start":{"line":652,"column":3,"offset":19936},"end":{"line":652,"column":46,"offset":19979},"indent":[]}}],"position":{"start":{"line":652,"column":3,"offset":19936},"end":{"line":652,"column":46,"offset":19979},"indent":[]}}],"position":{"start":{"line":652,"column":1,"offset":19934},"end":{"line":652,"column":46,"offset":19979},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added a site layout","position":{"start":{"line":653,"column":3,"offset":19983},"end":{"line":653,"column":22,"offset":20002},"indent":[]}}],"position":{"start":{"line":653,"column":3,"offset":19983},"end":{"line":653,"column":22,"offset":20002},"indent":[]}}],"position":{"start":{"line":653,"column":1,"offset":19981},"end":{"line":653,"column":22,"offset":20002},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Added our theme styles","position":{"start":{"line":654,"column":3,"offset":20006},"end":{"line":654,"column":25,"offset":20028},"indent":[]}}],"position":{"start":{"line":654,"column":3,"offset":20006},"end":{"line":654,"column":25,"offset":20028},"indent":[]}}],"position":{"start":{"line":654,"column":1,"offset":20004},"end":{"line":654,"column":25,"offset":20028},"indent":[]}}],"position":{"start":{"line":649,"column":1,"offset":19846},"end":{"line":654,"column":25,"offset":20028},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"</AccentBox>","position":{"start":{"line":656,"column":1,"offset":20032},"end":{"line":656,"column":13,"offset":20044},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the next part we will start adding our main content components and a backend to store our products. ðŸ˜Ž","position":{"start":{"line":658,"column":1,"offset":20048},"end":{"line":658,"column":106,"offset":20153},"indent":[]}}],"position":{"start":{"line":658,"column":1,"offset":20048},"end":{"line":658,"column":106,"offset":20153},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to make a gatsby ecommerce theme. Part 1\",\"date\":\"2020-03-10T00:00:00.000Z\",\"published\":true,\"category\":\"Tutorial\",\"author\":\"Richard Haines\",\"keywords\":[\"gatsby\",\"theme-ui\",\"css-in-js\",\"ecommerce\",\"gatsby theme\",\"tutorial\",\"snipcart\"],\"pin\":false}","position":{"start":{"line":661,"column":1,"offset":20157},"end":{"line":661,"column":290,"offset":20446},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":661,"column":290,"offset":20446}}},"scopeImports":["import AccentBox from '../src/components/site/blog/accent-box.js';","import React from 'react'"],"scopeIdentifiers":["AccentBox","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to make a gatsby ecommerce theme. Part 1\",\n  \"date\": \"2020-03-10T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Tutorial\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"gatsby\", \"theme-ui\", \"css-in-js\", \"ecommerce\", \"gatsby theme\", \"tutorial\", \"snipcart\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We're going to go from start to finish and create a gatsby theme that you can deploy as an npm package. In the first part we will cover the base setup of the project.\"), mdx(\"p\", null, \"This is part 1 in a series of tutorials. The format is step by step.\"), mdx(\"p\", null, \"So where to start? You have an idea, you want to create an ecommerce theme for all the world to use. In this tutorial we are going to create a new gatsby theme from scratch, handle payments using snipcart, store our data with sanity.io and style it with theme-ui. Its going to be dope \\uD83D\\uDE0E\"), mdx(\"p\", null, \"There are a few pre-requisits, Im going to assume you know how to use Gatsby and React to a certain degree, the rest we will walk through.\"), mdx(\"p\", null, \"We are going to be building this from scratch so lets start by creating our new project\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir gatsby-theme-fashion\\ncd gatsby-theme-fashion\\n\")), mdx(\"p\", null, \"Cool beans, so lets now create our project. When working with gatsby themes i like to use yarn workspaces, this allows us to keep our theme and an example site in a monorepo with yarn controlling the dependencies between them. Lets create our projects root, we'll use the -y flag to auto fill the package.json stuff as we will be removing it all anyway.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn init -y\\n\")), mdx(\"p\", null, \"Now that we have a package.json in our folder we can open our code editor and remove the auto filled stuff and add our own. We want to add the workspaces key and add our project folders. There are many ways of doing this and people have different opinions about which way is best. This is my preferred method.\"), mdx(\"h3\", {\n    \"id\": \"packagejson\"\n  }, \"package.json\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  \\\"private\\\": true,\\n  \\\"workspaces\\\": [\\n    \\\"demo\\\",\\n    \\\"packages/*\\\"\\n  ]\\n}\\n\")), mdx(\"p\", null, \"We want the project to be private as we wont publish it and also workspaces wont work if we don't set this. We have also specified that we will have one folder for our demo project and another which will hold our packages, or our theme(s).\"), mdx(\"p\", null, \"Create the demo and packages folders\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir demo\\nmkdir packages\\n\")), mdx(\"p\", null, \"We'll start with our theme and hop over to the demo site a bit later on. Lets move into the packages folder and create our themes folder and initialize the project, following yarns instructions for setup as we go. I like to set the version to 0.0.1 from the start as during development we will be publish our package and when it comes time to release it in the wild its going to look strange if our version number is 54.9.7 or something. Keep it at the patches in development until release.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd packages\\nmkdir gatsby-theme-fashion\\ncd gatsby-theme-fashion\\nyarn init\\n\")), mdx(\"p\", null, \"Now that we have our theme project installed lets add the base packages we are going to need. For us those are gatsby, react, react-dom, theme-ui, gatsby-plugin-theme-ui @emotion/core and @mdx-js/react. Lets also add prettier so that all our code looks pretty once we save it! \\uD83D\\uDE07\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add gatsby react react-dom theme-ui gatsby-plugin-theme-ui @emotion/core @mdx-js/react gatsby-plugin-google-fonts\\nyarn add prettier -D\\n\")), mdx(\"p\", null, \"Niiiice! Cool, now lets add some scripts to our package.json for building, cleaning and making stuff pretty.\"), mdx(\"h3\", {\n    \"id\": \"packagejson-1\"\n  }, \"package.json\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"gatsby develop\\\",\\n    \\\"build\\\": \\\"gatsby build\\\",\\n    \\\"clean\\\": \\\"gatsby clean\\\",\\n    \\\"pretty\\\": \\\"prettier --write \\\\\\\"src/**/*js\\\\\\\"\\\"\\n  },\\n\")), mdx(\"p\", null, \"You can give the keys whatever name makes sense to you. We'll be mostly using dev, clean and pretty. We could set up a pre commit hook to run pretty when we commit code, you can look that up, for this example we will skip it. I quite like typing out yarn pretty and watching all my code transform. You can also set it up to run on save in vscode, again, that is something for you to google.\"), mdx(\"p\", null, \"We want to add gatsby, react and react-dom as peer dependencies so that the end user has to install them.\"), mdx(\"h3\", {\n    \"id\": \"packagejson-2\"\n  }, \"package.json\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  \\\"peerDependencies\\\": {\\n    \\\"gatsby\\\": \\\"^2.19.8\\\",\\n    \\\"react\\\": \\\"^16.12.0\\\",\\n    \\\"react-dom\\\": \\\"^16.12.0\\\"\\n  },\\n\")), mdx(\"p\", null, \"Now we need to add our gatsby-config.js file and add the plugins we have installed for our theme. Its important to add the gatsby-plugin-theme-ui plugin at the end as it will be overriden by the theme consumer if they have it installed also.\"), mdx(\"h3\", {\n    \"id\": \"gatsby-configjs\"\n  }, \"gatsby-config.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n    plugins: [\\n        {\\n            resolve: 'gatsby-plugin-google-fonts',\\n            options: {\\n              fonts: [\\n                'Muli',\\n                'Open Sans',\\n                'source sans pro\\\\:300,400,400i,700' \\n              ]\\n            }\\n        },\\n          'gatsby-plugin-theme-ui'\\n    ]\\n}\\n\")), mdx(\"p\", null, \"We have used gatsby-plugin-google-fonts so that we can easily install some nice fonts from google. Feel free to choose your own.\"), mdx(\"p\", null, \"I should add at this point that the versions are explicit to this tutorial, everything should work regardless, that being said it can be that some breaking changes are introduced at some point in the future so yours may differ from mine, if you have any problems check the changelog from my version to the version you are using to debug the problem.\"), mdx(\"p\", null, \"Ok so lets add some folders and files to our project.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch src/pages\\ntouch src/components\\ntouch src/pages/index.js\\n\")), mdx(\"p\", null, \"We also want to create an index.js file at the root of out theme as thats what gatsby is looking for\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch index.js\\n\")), mdx(\"p\", null, \"Add a comment to this file so it has some content and we know whats going on. Later on we can if we like export some of our theme components from this file for the end use to import.\"), mdx(\"p\", null, \"Sweet! We've got a really basic theme setup, it doesn't do anything right now, first we want to setup our demo site and link it to our theme. The magic of yarn workspaces!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd ..\\ncd demo\\nyarn init\\nyarn add gatsby react react-dom dotenv\\n\")), mdx(\"p\", null, \"Your demo sites package.json should look something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  \\\"name\\\": \\\"demo\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"gatsby develop\\\",\\n    \\\"build\\\": \\\"gatsby build\\\",\\n    \\\"clean\\\": \\\"gatsby clean\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"dotenv\\\": \\\"^8.2.0\\\",\\n    \\\"gatsby\\\": \\\"^2.19.8\\\",\\n    \\\"gatsby-theme-fashion\\\": \\\"*\\\",\\n    \\\"react\\\": \\\"^16.12.0\\\",\\n    \\\"react-dom\\\": \\\"^16.12.0\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"We have added dotenv so that we can access the environment variables later on. We are also telling our demo site to use any version of our theme it finds. We have also added our scripts so that we can actually run the thing!\"), mdx(\"p\", null, \"Next create a new file called gatsby-config.js at our demo projects root and add our theme as a plugin.\"), mdx(\"h3\", {\n    \"id\": \"gatsby-configjs-1\"\n  }, \"gatsby-config.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n  plugins: [\\\"gatsby-theme-fashion\\\"]\\n};\\n\")), mdx(\"p\", null, \"Right now we don't have any options that our theme requires so this will do. Then we run yarn from the root of our project to link it all up and we can then check if its all cool\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn\\nyarn workspaces info\\n\")), mdx(\"p\", null, \"We should see the following output indicating that our demo site is linked to our theme:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn workspaces v1.21.1\\n{\\n  \\\"demo\\\": {\\n    \\\"location\\\": \\\"packages/demo\\\",\\n    \\\"workspaceDependencies\\\": [\\n      \\\"gatsby-theme-fashion\\\"\\n    ],\\n    \\\"mismatchedWorkspaceDependencies\\\": []\\n  },\\n  \\\"gatsby-theme-fashion\\\": {\\n    \\\"location\\\": \\\"packages/gatsby-theme-fashion\\\",\\n    \\\"workspaceDependencies\\\": [],\\n    \\\"mismatchedWorkspaceDependencies\\\": []\\n  }\\n}\\nDone in 0.06s.\\n\")), mdx(\"p\", null, \"BOOM!\"), mdx(\"p\", null, \"So now might be a good time to commit our work. Go to github and login to your account and create a new repository called gatsby-theme-fashion. Then from the root of our project....\"), mdx(\"p\", null, \"WHOA there \\u270B Lets think about this for a second, we have just installed a bunch of packages, which means we have a node_modules folder at our root and in each project, thats a hell of a lot of files that we do not want git to see. Lets create our gitignore file at our projects root.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch .gitignore\\n\")), mdx(\"p\", null, \"Then add the following to it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"node_modules/\\n.env.*\\npublic/\\n.cache/\\n\")), mdx(\"p\", null, \"Now i'll be honest, im not sure if you need to do this but i do it anyway, lets copy that file to our theme and demo projects.\"), mdx(\"p\", null, \"Ok, nice! Now that thats done lets initialize our project with git and commit our work. You can get your remote repository url from the repository page you created.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git init\\ngit add .\\ngit commit -m \\\"My first commit\\\"\\ngit remote add origin <remote repository url>\\ngit remote -v\\ngit push origin master\\n\")), mdx(AccentBox, {\n    mdxType: \"AccentBox\"\n  }, \"So lets recap what we have done so far:\", mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setup a project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added our demo and theme projects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linked our demo to our theme\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Created a repository and committed our work\"))), mdx(\"p\", null, \"Now would be a good time to add some content and check that our theme is working. Head into your theme projects index.js file located inside src/pages folders and add a generic component to display an h1 that will render from our demo site as the imported theme.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from 'react'\\n\\nexport default () => <h1>Hello im coming at you from the theme!!<h1>\\n\")), mdx(\"p\", null, \"Go into your demo project and run gatsby dev. You should see a white page with the h1 text at the top left of the page, hurrah \\uD83E\\uDD73\"), mdx(\"p\", null, \"Now that we have the base setup complete we can start thinking about what we want to have in our theme. As this is an ecommerce theme there are some basic things that we should consider before we continue. There will be a lot to add so lets get started!\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Navbar\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Landing/home page\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hero image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Showcase of products\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blog snippets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instagram feed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Contact section\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"About section\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Products page\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blog page\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blog posts page\")))), mdx(\"p\", null, \"These are some of the basic thing we expect an ecommerce site to have. There are of course a lot more thing we could add but lets keep it simple for our example theme. We will be keeping our layout fairly simple with a navbar at the top followed by a hero image and a section explaining about the store. Then a showcase of our top 3 most popular products followed by our Instagram feed and finishing off with our contact form in our footer.\"), mdx(\"p\", null, \"We can begin by creating all the necessary pages:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd packages/gatsby-theme-fashion/src/pages\\ntouch products.js\\ntouch blog.js\\n\")), mdx(\"p\", null, \"Theme-ui will enable our end user to override some of our style with ease through shadowing our theme file which will hold all of our colours, fonts and spacings. In order to get started with adding our themeable variables we need to shadow the index.js file form the gatsby-plugin-theme-ui package in our src folder. See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://theme-ui.com/\"\n  }), \"Theme-ui\"), \" for more details.\"), mdx(\"p\", null, \"I often start with the sites basic layout. There are a couple of ways to do this. We could create a layout component in our components folder with a css reset and import that into all or our components/pages but there is an easier way utilizing gatsby-plugin-layout. \"), mdx(\"p\", null, \"Lets add that plugin\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add gatsby-plugin-layout\\n\")), mdx(\"p\", null, \"Then we need to add it to our gatsby-config.js file:\"), mdx(\"h3\", {\n    \"id\": \"gatsby-configjs-2\"\n  }, \"gatsby-config.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n    plugins: [\\n        {\\n            resolve: 'gatsby-plugin-google-fonts',\\n            options: {\\n              fonts: [\\n                'Muli',\\n                'Open Sans',\\n                'source sans pro\\\\:300,400,400i,700' \\n              ]\\n            }\\n        },\\n        {\\n            resolve: 'gatsby-plugin-layout',\\n            options: {\\n              component: require.resolve('./src/layouts/index.js'),\\n            },\\n        },\\n          'gatsby-plugin-theme-ui'\\n\\n    ]\\n}\\n\")), mdx(\"p\", null, \"Create a layouts folder inside your src folder and add an index.js file. This will be our base layout for our site.\"), mdx(\"h3\", {\n    \"id\": \"layout\"\n  }, \"Layout\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport React from \\\"react\\\";\\nimport { Global, css } from \\\"@emotion/core\\\";\\n\\nconst Layout = ({ children }) => {\\n  return (\\n    <>\\n      <Global\\n        styles={css`\\n          * {\\n            margin: 0;\\n            padding: 0;\\n            box-sizing: border-box;\\n          }\\n          body {\\n            scroll-behavior: smooth;\\n            overflow-y: scroll;\\n            -webkit-overflow-scrolling: touch;\\n            width: 100%;\\n            overflow-x: hidden;\\n          }\\n        `}\\n      />\\n      <div>\\n        {children}\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default Layout;\\n\")), mdx(\"p\", null, \"This doesn't do much apart from reset some css and render the children within it. Lets create a basic grid layout using css grid. We are going to be using the theme-ui sx prop to add styling to our elements.\"), mdx(\"p\", null, \"First up create some grid area strings as constants to be used in our grid. You can add these to a separate file if you wish but we will be adding them to the layout file in this example.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const PhoneTemplateAreas = `\\n  'nav      nav     nav     nav'\\n  'main     main    main    main'\\n  'footer   footer  footer  footer'\\n`;\\n\\nconst TabletTemplateAreas = `\\n  'nav      nav     nav     nav     nav     nav'\\n  'main     main    main    main    main    main'\\n  'footer   footer  footer  footer  footer  footer'\\n`;\\n\\nconst DesktopTemplateAreas = `\\n  '.    nav      nav     nav     nav     nav     nav    .'\\n  '.    main     main    main    main    main    main   .'\\n  '.    footer   footer  footer  footer  footer  footer .'\\n`;\\n\")), mdx(\"p\", null, \"Then we can add these to the div that wraps our returned children in the layout component.\"), mdx(\"h3\", {\n    \"id\": \"layout-1\"\n  }, \"Layout\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport React from \\\"react\\\";\\nimport { Global, css } from \\\"@emotion/core\\\";\\n\\nconst PhoneTemplateAreas = `\\n  'nav      nav     nav     nav'\\n  'main     main    main    main'\\n  'footer   footer  footer  footer'\\n`;\\n\\nconst TabletTemplateAreas = `\\n  'nav      nav     nav     nav     nav     nav'\\n  'main     main    main    main    main    main'\\n  'footer   footer  footer  footer  footer  footer'\\n`;\\n\\nconst DesktopTemplateAreas = `\\n  '.    nav      nav     nav     nav     nav     nav    .'\\n  '.    main     main    main    main    main    main   .'\\n  '.    footer   footer  footer  footer  footer  footer .'\\n`;\\n\\nconst Layout = ({ children }) => {\\n  return (\\n    <>\\n      <Global\\n        styles={css`\\n          * {\\n            margin: 0;\\n            padding: 0;\\n            box-sizing: border-box;\\n          }\\n          body {\\n            scroll-behavior: smooth;\\n            overflow-y: scroll;\\n            -webkit-overflow-scrolling: touch;\\n            width: 100%;\\n            overflow-x: hidden;\\n          }\\n        `}\\n      />\\n      <div\\n        sx={{\\n          display: \\\"grid\\\",\\n          gridTemplateRows: \\\"auto\\\",\\n          gridTemplateColumns: [\\n            \\\"repeat(4, 1fr)\\\",\\n            \\\"repeat(6, 1fr)\\\",\\n            \\\"repeat(8, 1fr)\\\"\\n          ],\\n          gridTemplateAreas: [\\n            PhoneTemplateAreas,\\n            TabletTemplateAreas,\\n            DesktopTemplateAreas\\n          ],\\n          padding: \\\"0 1em\\\"\\n        }}\\n      >\\n        {children}\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default Layout;\\n\")), mdx(\"p\", null, \"Lets breakdown whats going on here. I used to use Emotion css plus theme-ui to design and style my components, you can read about my experience here \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"'./css-grid-with-theme-ui.mdx'\"\n  }), \"CSS grid with Theme-ui\"), \". Basically theme-ui allows us to specify breakpoints using an array syntax, so \", \"[mobile, tablet, desktop]\", \". Pretty cool huh! Now we need to create our nav, main and footer components. All the sites amin content will live inside the main component, by using gatsby-plugin-layout we can just import main as a wrapper to tell gatsby that whatever component should be rendered inside this grid area.\"), mdx(\"p\", null, \"Create a layout folder inside our components folder and add these three components:\"), mdx(\"h3\", {\n    \"id\": \"header\"\n  }, \"Header\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\n\\nconst Header = props => (\\n  <header\\n    sx={{\\n      gridArea: \\\"nav\\\",\\n      padding: \\\"1em\\\",\\n      backgroundColor: \\\"background\\\",\\n      color: \\\"text\\\",\\n      height: \\\"100%\\\",\\n      padding: [null, \\\"2em\\\", \\\"2em\\\"],\\n      paddingTop: [\\\"2em\\\", null, null]\\n    }}\\n  >\\n    {props.children}\\n  </header>\\n);\\n\\nexport default Header;\\n\")), mdx(\"h3\", {\n    \"id\": \"main\"\n  }, \"Main\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\n\\nconst Main = props => (\\n  <main\\n    sx={{\\n      gridArea: \\\"main\\\",\\n      backgroundColor: \\\"background\\\",\\n      minHeight: \\\"calc(100vh - 60px)\\\",\\n      paddingTop: [\\\"2em\\\", \\\"60px\\\", \\\"60px\\\"]\\n    }}\\n  >\\n    {props.children}\\n  </main>\\n);\\n\\nexport default Main;\\n\\n\")), mdx(\"h3\", {\n    \"id\": \"footer\"\n  }, \"Footer\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\n\\nconst Footer = () => (\\n  <footer\\n    sx={{\\n      gridArea: \\\"footer\\\",\\n      display: \\\"flex\\\",\\n      flexDirection: \\\"column\\\",\\n      alignItems: \\\"center\\\",\\n      justifyContent: \\\"center\\\",\\n      backgroundColor: \\\"background\\\",\\n      color: \\\"text\\\"\\n    }}\\n  >\\n    <p\\n      sx={{\\n        color: \\\"text\\\",\\n        fontFamily: \\\"body\\\",\\n        fontSize: [\\\"0.7em\\\", \\\"0.8em\\\", \\\"1em\\\"],\\n        letterSpacing: \\\"text\\\",\\n        fontWeight: 400,\\n        margin: \\\"1em auto\\\"\\n      }}\\n    >\\n      This is my footer!\\n    </p>\\n  </footer>\\n);\\n\\nexport default Footer;\\n\")), mdx(\"p\", null, \"You may be wondering where the background colour is coming from... When using theme-ui we import all of our styles from one main index file. This file can be shadowed by the theme consumer and thus they can override whatever styles we have in there to change the look of the theme. Lets create that now.\"), mdx(\"p\", null, \"Inside the src folder create a new folder called gatsby-plugin-theme-ui, inside that folder create a new file named index.js and add the following:\"), mdx(\"h3\", {\n    \"id\": \"our-theme-styles\"\n  }, \"Our theme styles\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default {\\n  fonts: {\\n    body: \\\"Open Sans\\\",\\n    heading: \\\"Muli\\\"\\n  },\\n  fontWeights: {\\n    body: 300,\\n    heading: 400,\\n    bold: 700\\n  },\\n  lineHeights: {\\n    body: \\\"110%\\\",\\n    heading: 1.125,\\n    tagline: \\\"100px\\\"\\n  },\\n  letterSpacing: {\\n    body: \\\"2px\\\",\\n    text: \\\"5px\\\"\\n  },\\n  colors: {\\n    text: \\\"#FFFfff\\\",\\n    background: \\\"#121212\\\",\\n    primary: \\\"#000010\\\",\\n    secondary: \\\"#E7E7E9\\\",\\n    secondaryDarker: \\\"#545455\\\",\\n    accent: \\\"#DE3C4B\\\"\\n  },\\n  breakpoints: ['40em', '56em', '64em']\\n};\\n\")), mdx(\"p\", null, \"These values can be accessed via the sx prop as seen above.\"), mdx(\"p\", null, \"Lets add them to our layout to complete this part of the tutorial.\"), mdx(\"h3\", {\n    \"id\": \"layout-2\"\n  }, \"Layout\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport React from \\\"react\\\";\\nimport { Global, css } from \\\"@emotion/core\\\";\\nimport Header from \\\"../components/layout/header\\\";\\nimport {\\n  PhoneTemplateAreas,\\n  TabletTemplateAreas,\\n  DesktopTemplateAreas\\n} from \\\"./../window/breakpoints\\\";\\nimport Footer from \\\"../components/layout/footer\\\";\\n\\nconst Layout = ({ children }) => {\\n  return (\\n    <>\\n      <Global\\n        styles={css`\\n          * {\\n            margin: 0;\\n            padding: 0;\\n            box-sizing: border-box;\\n          }\\n          body {\\n            scroll-behavior: smooth;\\n            overflow-y: scroll;\\n            -webkit-overflow-scrolling: touch;\\n            width: 100%;\\n            overflow-x: hidden;\\n          }\\n        `}\\n      />\\n      <div\\n        sx={{\\n          display: \\\"grid\\\",\\n          gridTemplateRows: \\\"auto\\\",\\n          gridTemplateColumns: [\\n            \\\"repeat(4, 1fr)\\\",\\n            \\\"repeat(6, 1fr)\\\",\\n            \\\"repeat(8, 1fr)\\\"\\n          ],\\n          gridTemplateAreas: [\\n            PhoneTemplateAreas,\\n            TabletTemplateAreas,\\n            DesktopTemplateAreas\\n          ],\\n          padding: \\\"0 1em\\\"\\n        }}\\n      >\\n        <Header>\\n          navbar will go here\\n        </Header>\\n        {children}\\n        <Footer />\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default Layout;\\n\")), mdx(AccentBox, {\n    mdxType: \"AccentBox\"\n  }, \"So lets recap what we have done so far:\", mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setup a project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added our demo and theme projects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linked our demo to our theme\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Created a repository and committed our work\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added a site layout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added our theme styles\"))), mdx(\"p\", null, \"In the next part we will start adding our main content components and a backend to store our products. \\uD83D\\uDE0E\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport AccentBox from '../src/components/site/blog/accent-box.js';\nexport const _frontmatter = {\n  \"title\": \"How to make a gatsby ecommerce theme. Part 1\",\n  \"date\": \"2020-03-10T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Tutorial\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"gatsby\", \"theme-ui\", \"css-in-js\", \"ecommerce\", \"gatsby theme\", \"tutorial\", \"snipcart\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`We're going to go from start to finish and create a gatsby theme that you can deploy as an npm package. In the first part we will cover the base setup of the project.`}</p>\n    <p>{`This is part 1 in a series of tutorials. The format is step by step.`}</p>\n    <p>{`So where to start? You have an idea, you want to create an ecommerce theme for all the world to use. In this tutorial we are going to create a new gatsby theme from scratch, handle payments using snipcart, store our data with sanity.io and style it with theme-ui. Its going to be dope ðŸ˜Ž`}</p>\n    <p>{`There are a few pre-requisits, Im going to assume you know how to use Gatsby and React to a certain degree, the rest we will walk through.`}</p>\n    <p>{`We are going to be building this from scratch so lets start by creating our new project`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir gatsby-theme-fashion\ncd gatsby-theme-fashion\n`}</code></pre>\n    <p>{`Cool beans, so lets now create our project. When working with gatsby themes i like to use yarn workspaces, this allows us to keep our theme and an example site in a monorepo with yarn controlling the dependencies between them. Lets create our projects root, we'll use the -y flag to auto fill the package.json stuff as we will be removing it all anyway.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn init -y\n`}</code></pre>\n    <p>{`Now that we have a package.json in our folder we can open our code editor and remove the auto filled stuff and add our own. We want to add the workspaces key and add our project folders. There are many ways of doing this and people have different opinions about which way is best. This is my preferred method.`}</p>\n    <h3 {...{\n      \"id\": \"packagejson\"\n    }}>{`package.json`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  \"private\": true,\n  \"workspaces\": [\n    \"demo\",\n    \"packages/*\"\n  ]\n}\n`}</code></pre>\n    <p>{`We want the project to be private as we wont publish it and also workspaces wont work if we don't set this. We have also specified that we will have one folder for our demo project and another which will hold our packages, or our theme(s).`}</p>\n    <p>{`Create the demo and packages folders`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir demo\nmkdir packages\n`}</code></pre>\n    <p>{`We'll start with our theme and hop over to the demo site a bit later on. Lets move into the packages folder and create our themes folder and initialize the project, following yarns instructions for setup as we go. I like to set the version to 0.0.1 from the start as during development we will be publish our package and when it comes time to release it in the wild its going to look strange if our version number is 54.9.7 or something. Keep it at the patches in development until release.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd packages\nmkdir gatsby-theme-fashion\ncd gatsby-theme-fashion\nyarn init\n`}</code></pre>\n    <p>{`Now that we have our theme project installed lets add the base packages we are going to need. For us those are gatsby, react, react-dom, theme-ui, gatsby-plugin-theme-ui @emotion/core and @mdx-js/react. Lets also add prettier so that all our code looks pretty once we save it! ðŸ˜‡`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add gatsby react react-dom theme-ui gatsby-plugin-theme-ui @emotion/core @mdx-js/react gatsby-plugin-google-fonts\nyarn add prettier -D\n`}</code></pre>\n    <p>{`Niiiice! Cool, now lets add some scripts to our package.json for building, cleaning and making stuff pretty.`}</p>\n    <h3 {...{\n      \"id\": \"packagejson-1\"\n    }}>{`package.json`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  \"scripts\": {\n    \"dev\": \"gatsby develop\",\n    \"build\": \"gatsby build\",\n    \"clean\": \"gatsby clean\",\n    \"pretty\": \"prettier --write \\\\\"src/**/*js\\\\\"\"\n  },\n`}</code></pre>\n    <p>{`You can give the keys whatever name makes sense to you. We'll be mostly using dev, clean and pretty. We could set up a pre commit hook to run pretty when we commit code, you can look that up, for this example we will skip it. I quite like typing out yarn pretty and watching all my code transform. You can also set it up to run on save in vscode, again, that is something for you to google.`}</p>\n    <p>{`We want to add gatsby, react and react-dom as peer dependencies so that the end user has to install them.`}</p>\n    <h3 {...{\n      \"id\": \"packagejson-2\"\n    }}>{`package.json`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  \"peerDependencies\": {\n    \"gatsby\": \"^2.19.8\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\"\n  },\n`}</code></pre>\n    <p>{`Now we need to add our gatsby-config.js file and add the plugins we have installed for our theme. Its important to add the gatsby-plugin-theme-ui plugin at the end as it will be overriden by the theme consumer if they have it installed also.`}</p>\n    <h3 {...{\n      \"id\": \"gatsby-configjs\"\n    }}>{`gatsby-config.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = {\n    plugins: [\n        {\n            resolve: 'gatsby-plugin-google-fonts',\n            options: {\n              fonts: [\n                'Muli',\n                'Open Sans',\n                'source sans pro\\\\:300,400,400i,700' \n              ]\n            }\n        },\n          'gatsby-plugin-theme-ui'\n    ]\n}\n`}</code></pre>\n    <p>{`We have used gatsby-plugin-google-fonts so that we can easily install some nice fonts from google. Feel free to choose your own.`}</p>\n    <p>{`I should add at this point that the versions are explicit to this tutorial, everything should work regardless, that being said it can be that some breaking changes are introduced at some point in the future so yours may differ from mine, if you have any problems check the changelog from my version to the version you are using to debug the problem.`}</p>\n    <p>{`Ok so lets add some folders and files to our project.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`touch src/pages\ntouch src/components\ntouch src/pages/index.js\n`}</code></pre>\n    <p>{`We also want to create an index.js file at the root of out theme as thats what gatsby is looking for`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`touch index.js\n`}</code></pre>\n    <p>{`Add a comment to this file so it has some content and we know whats going on. Later on we can if we like export some of our theme components from this file for the end use to import.`}</p>\n    <p>{`Sweet! We've got a really basic theme setup, it doesn't do anything right now, first we want to setup our demo site and link it to our theme. The magic of yarn workspaces!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd ..\ncd demo\nyarn init\nyarn add gatsby react react-dom dotenv\n`}</code></pre>\n    <p>{`Your demo sites package.json should look something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  \"name\": \"demo\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"dev\": \"gatsby develop\",\n    \"build\": \"gatsby build\",\n    \"clean\": \"gatsby clean\"\n  },\n  \"dependencies\": {\n    \"dotenv\": \"^8.2.0\",\n    \"gatsby\": \"^2.19.8\",\n    \"gatsby-theme-fashion\": \"*\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\"\n  }\n}\n`}</code></pre>\n    <p>{`We have added dotenv so that we can access the environment variables later on. We are also telling our demo site to use any version of our theme it finds. We have also added our scripts so that we can actually run the thing!`}</p>\n    <p>{`Next create a new file called gatsby-config.js at our demo projects root and add our theme as a plugin.`}</p>\n    <h3 {...{\n      \"id\": \"gatsby-configjs-1\"\n    }}>{`gatsby-config.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = {\n  plugins: [\"gatsby-theme-fashion\"]\n};\n`}</code></pre>\n    <p>{`Right now we don't have any options that our theme requires so this will do. Then we run yarn from the root of our project to link it all up and we can then check if its all cool`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn\nyarn workspaces info\n`}</code></pre>\n    <p>{`We should see the following output indicating that our demo site is linked to our theme:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn workspaces v1.21.1\n{\n  \"demo\": {\n    \"location\": \"packages/demo\",\n    \"workspaceDependencies\": [\n      \"gatsby-theme-fashion\"\n    ],\n    \"mismatchedWorkspaceDependencies\": []\n  },\n  \"gatsby-theme-fashion\": {\n    \"location\": \"packages/gatsby-theme-fashion\",\n    \"workspaceDependencies\": [],\n    \"mismatchedWorkspaceDependencies\": []\n  }\n}\nDone in 0.06s.\n`}</code></pre>\n    <p>{`BOOM!`}</p>\n    <p>{`So now might be a good time to commit our work. Go to github and login to your account and create a new repository called gatsby-theme-fashion. Then from the root of our project....`}</p>\n    <p>{`WHOA there âœ‹ Lets think about this for a second, we have just installed a bunch of packages, which means we have a node_modules folder at our root and in each project, thats a hell of a lot of files that we do not want git to see. Lets create our gitignore file at our projects root.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`touch .gitignore\n`}</code></pre>\n    <p>{`Then add the following to it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`node_modules/\n.env.*\npublic/\n.cache/\n`}</code></pre>\n    <p>{`Now i'll be honest, im not sure if you need to do this but i do it anyway, lets copy that file to our theme and demo projects.`}</p>\n    <p>{`Ok, nice! Now that thats done lets initialize our project with git and commit our work. You can get your remote repository url from the repository page you created.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git init\ngit add .\ngit commit -m \"My first commit\"\ngit remote add origin <remote repository url>\ngit remote -v\ngit push origin master\n`}</code></pre>\n    <AccentBox mdxType=\"AccentBox\">\nSo lets recap what we have done so far:\n      <ul>\n        <li parentName=\"ul\">{`Setup a project`}</li>\n        <li parentName=\"ul\">{`Added our demo and theme projects`}</li>\n        <li parentName=\"ul\">{`Linked our demo to our theme`}</li>\n        <li parentName=\"ul\">{`Created a repository and committed our work`}</li>\n      </ul>\n    </AccentBox>\n    <p>{`Now would be a good time to add some content and check that our theme is working. Head into your theme projects index.js file located inside src/pages folders and add a generic component to display an h1 that will render from our demo site as the imported theme.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react'\n\nexport default () => <h1>Hello im coming at you from the theme!!<h1>\n`}</code></pre>\n    <p>{`Go into your demo project and run gatsby dev. You should see a white page with the h1 text at the top left of the page, hurrah ðŸ¥³`}</p>\n    <p>{`Now that we have the base setup complete we can start thinking about what we want to have in our theme. As this is an ecommerce theme there are some basic things that we should consider before we continue. There will be a lot to add so lets get started!`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Navbar`}</li>\n      <li parentName=\"ul\">{`Landing/home page`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Hero image`}</li>\n          <li parentName=\"ul\">{`Showcase of products`}</li>\n          <li parentName=\"ul\">{`Blog snippets`}</li>\n          <li parentName=\"ul\">{`Instagram feed`}</li>\n          <li parentName=\"ul\">{`Contact section`}</li>\n          <li parentName=\"ul\">{`About section`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Products page`}</li>\n      <li parentName=\"ul\">{`Blog page`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Blog posts page`}</li>\n        </ul></li>\n    </ul>\n    <p>{`These are some of the basic thing we expect an ecommerce site to have. There are of course a lot more thing we could add but lets keep it simple for our example theme. We will be keeping our layout fairly simple with a navbar at the top followed by a hero image and a section explaining about the store. Then a showcase of our top 3 most popular products followed by our Instagram feed and finishing off with our contact form in our footer.`}</p>\n    <p>{`We can begin by creating all the necessary pages:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd packages/gatsby-theme-fashion/src/pages\ntouch products.js\ntouch blog.js\n`}</code></pre>\n    <p>{`Theme-ui will enable our end user to override some of our style with ease through shadowing our theme file which will hold all of our colours, fonts and spacings. In order to get started with adding our themeable variables we need to shadow the index.js file form the gatsby-plugin-theme-ui package in our src folder. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://theme-ui.com/\"\n      }}>{`Theme-ui`}</a>{` for more details.`}</p>\n    <p>{`I often start with the sites basic layout. There are a couple of ways to do this. We could create a layout component in our components folder with a css reset and import that into all or our components/pages but there is an easier way utilizing gatsby-plugin-layout. `}</p>\n    <p>{`Lets add that plugin`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add gatsby-plugin-layout\n`}</code></pre>\n    <p>{`Then we need to add it to our gatsby-config.js file:`}</p>\n    <h3 {...{\n      \"id\": \"gatsby-configjs-2\"\n    }}>{`gatsby-config.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = {\n    plugins: [\n        {\n            resolve: 'gatsby-plugin-google-fonts',\n            options: {\n              fonts: [\n                'Muli',\n                'Open Sans',\n                'source sans pro\\\\:300,400,400i,700' \n              ]\n            }\n        },\n        {\n            resolve: 'gatsby-plugin-layout',\n            options: {\n              component: require.resolve('./src/layouts/index.js'),\n            },\n        },\n          'gatsby-plugin-theme-ui'\n\n    ]\n}\n`}</code></pre>\n    <p>{`Create a layouts folder inside your src folder and add an index.js file. This will be our base layout for our site.`}</p>\n    <h3 {...{\n      \"id\": \"layout\"\n    }}>{`Layout`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { Global, css } from \"@emotion/core\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css\\`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        \\`}\n      />\n      <div>\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n`}</code></pre>\n    <p>{`This doesn't do much apart from reset some css and render the children within it. Lets create a basic grid layout using css grid. We are going to be using the theme-ui sx prop to add styling to our elements.`}</p>\n    <p>{`First up create some grid area strings as constants to be used in our grid. You can add these to a separate file if you wish but we will be adding them to the layout file in this example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const PhoneTemplateAreas = \\`\n  'nav      nav     nav     nav'\n  'main     main    main    main'\n  'footer   footer  footer  footer'\n\\`;\n\nconst TabletTemplateAreas = \\`\n  'nav      nav     nav     nav     nav     nav'\n  'main     main    main    main    main    main'\n  'footer   footer  footer  footer  footer  footer'\n\\`;\n\nconst DesktopTemplateAreas = \\`\n  '.    nav      nav     nav     nav     nav     nav    .'\n  '.    main     main    main    main    main    main   .'\n  '.    footer   footer  footer  footer  footer  footer .'\n\\`;\n`}</code></pre>\n    <p>{`Then we can add these to the div that wraps our returned children in the layout component.`}</p>\n    <h3 {...{\n      \"id\": \"layout-1\"\n    }}>{`Layout`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { Global, css } from \"@emotion/core\";\n\nconst PhoneTemplateAreas = \\`\n  'nav      nav     nav     nav'\n  'main     main    main    main'\n  'footer   footer  footer  footer'\n\\`;\n\nconst TabletTemplateAreas = \\`\n  'nav      nav     nav     nav     nav     nav'\n  'main     main    main    main    main    main'\n  'footer   footer  footer  footer  footer  footer'\n\\`;\n\nconst DesktopTemplateAreas = \\`\n  '.    nav      nav     nav     nav     nav     nav    .'\n  '.    main     main    main    main    main    main   .'\n  '.    footer   footer  footer  footer  footer  footer .'\n\\`;\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css\\`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        \\`}\n      />\n      <div\n        sx={{\n          display: \"grid\",\n          gridTemplateRows: \"auto\",\n          gridTemplateColumns: [\n            \"repeat(4, 1fr)\",\n            \"repeat(6, 1fr)\",\n            \"repeat(8, 1fr)\"\n          ],\n          gridTemplateAreas: [\n            PhoneTemplateAreas,\n            TabletTemplateAreas,\n            DesktopTemplateAreas\n          ],\n          padding: \"0 1em\"\n        }}\n      >\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n`}</code></pre>\n    <p>{`Lets breakdown whats going on here. I used to use Emotion css plus theme-ui to design and style my components, you can read about my experience here `}<a parentName=\"p\" {...{\n        \"href\": \"'./css-grid-with-theme-ui.mdx'\"\n      }}>{`CSS grid with Theme-ui`}</a>{`. Basically theme-ui allows us to specify breakpoints using an array syntax, so `}{`[mobile, tablet, desktop]`}{`. Pretty cool huh! Now we need to create our nav, main and footer components. All the sites amin content will live inside the main component, by using gatsby-plugin-layout we can just import main as a wrapper to tell gatsby that whatever component should be rendered inside this grid area.`}</p>\n    <p>{`Create a layout folder inside our components folder and add these three components:`}</p>\n    <h3 {...{\n      \"id\": \"header\"\n    }}>{`Header`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst Header = props => (\n  <header\n    sx={{\n      gridArea: \"nav\",\n      padding: \"1em\",\n      backgroundColor: \"background\",\n      color: \"text\",\n      height: \"100%\",\n      padding: [null, \"2em\", \"2em\"],\n      paddingTop: [\"2em\", null, null]\n    }}\n  >\n    {props.children}\n  </header>\n);\n\nexport default Header;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"main\"\n    }}>{`Main`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst Main = props => (\n  <main\n    sx={{\n      gridArea: \"main\",\n      backgroundColor: \"background\",\n      minHeight: \"calc(100vh - 60px)\",\n      paddingTop: [\"2em\", \"60px\", \"60px\"]\n    }}\n  >\n    {props.children}\n  </main>\n);\n\nexport default Main;\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"footer\"\n    }}>{`Footer`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\n\nconst Footer = () => (\n  <footer\n    sx={{\n      gridArea: \"footer\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      backgroundColor: \"background\",\n      color: \"text\"\n    }}\n  >\n    <p\n      sx={{\n        color: \"text\",\n        fontFamily: \"body\",\n        fontSize: [\"0.7em\", \"0.8em\", \"1em\"],\n        letterSpacing: \"text\",\n        fontWeight: 400,\n        margin: \"1em auto\"\n      }}\n    >\n      This is my footer!\n    </p>\n  </footer>\n);\n\nexport default Footer;\n`}</code></pre>\n    <p>{`You may be wondering where the background colour is coming from... When using theme-ui we import all of our styles from one main index file. This file can be shadowed by the theme consumer and thus they can override whatever styles we have in there to change the look of the theme. Lets create that now.`}</p>\n    <p>{`Inside the src folder create a new folder called gatsby-plugin-theme-ui, inside that folder create a new file named index.js and add the following:`}</p>\n    <h3 {...{\n      \"id\": \"our-theme-styles\"\n    }}>{`Our theme styles`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n  fonts: {\n    body: \"Open Sans\",\n    heading: \"Muli\"\n  },\n  fontWeights: {\n    body: 300,\n    heading: 400,\n    bold: 700\n  },\n  lineHeights: {\n    body: \"110%\",\n    heading: 1.125,\n    tagline: \"100px\"\n  },\n  letterSpacing: {\n    body: \"2px\",\n    text: \"5px\"\n  },\n  colors: {\n    text: \"#FFFfff\",\n    background: \"#121212\",\n    primary: \"#000010\",\n    secondary: \"#E7E7E9\",\n    secondaryDarker: \"#545455\",\n    accent: \"#DE3C4B\"\n  },\n  breakpoints: ['40em', '56em', '64em']\n};\n`}</code></pre>\n    <p>{`These values can be accessed via the sx prop as seen above.`}</p>\n    <p>{`Lets add them to our layout to complete this part of the tutorial.`}</p>\n    <h3 {...{\n      \"id\": \"layout-2\"\n    }}>{`Layout`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { Global, css } from \"@emotion/core\";\nimport Header from \"../components/layout/header\";\nimport {\n  PhoneTemplateAreas,\n  TabletTemplateAreas,\n  DesktopTemplateAreas\n} from \"./../window/breakpoints\";\nimport Footer from \"../components/layout/footer\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css\\`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        \\`}\n      />\n      <div\n        sx={{\n          display: \"grid\",\n          gridTemplateRows: \"auto\",\n          gridTemplateColumns: [\n            \"repeat(4, 1fr)\",\n            \"repeat(6, 1fr)\",\n            \"repeat(8, 1fr)\"\n          ],\n          gridTemplateAreas: [\n            PhoneTemplateAreas,\n            TabletTemplateAreas,\n            DesktopTemplateAreas\n          ],\n          padding: \"0 1em\"\n        }}\n      >\n        <Header>\n          navbar will go here\n        </Header>\n        {children}\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n`}</code></pre>\n    <AccentBox mdxType=\"AccentBox\">\nSo lets recap what we have done so far:\n      <ul>\n        <li parentName=\"ul\">{`Setup a project`}</li>\n        <li parentName=\"ul\">{`Added our demo and theme projects`}</li>\n        <li parentName=\"ul\">{`Linked our demo to our theme`}</li>\n        <li parentName=\"ul\">{`Created a repository and committed our work`}</li>\n        <li parentName=\"ul\">{`Added a site layout`}</li>\n        <li parentName=\"ul\">{`Added our theme styles`}</li>\n      </ul>\n    </AccentBox>\n    <p>{`In the next part we will start adding our main content components and a backend to store our products. ðŸ˜Ž`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}