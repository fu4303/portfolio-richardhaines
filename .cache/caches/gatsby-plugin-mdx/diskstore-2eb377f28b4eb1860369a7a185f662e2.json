{"expireTime":9007200851906808000,"key":"gatsby-plugin-mdx-entire-payload-39e6d0f65846c6e22db7795ba23d2d5d-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Introduction to RedwoodJS","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":29,"offset":30},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":29,"offset":30},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"RedwoodJS is a new opinionated full stack, serverless web app framework that takes all the good parts of what a JAMstack website offers and packages it up into something that promises to offer all the good and much more. Its still in alpha phase but i decided to take it for a spin to learn a little about how it works and how its workflow compares to my favorite dev tool Gatsby. This post is about some of the things i found along the way that i thought were cool and wanted to point out.","position":{"start":{"line":4,"column":1,"offset":34},"end":{"line":4,"column":491,"offset":524},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":34},"end":{"line":4,"column":491,"offset":524},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Of course its unfair to compare the two as they are very different beasts. While Gatsby is a progressive web app generator where you can connect to any backend headless CMS you like, Redwood aims to take the full stack approach and gives you an api setup via prisma. The main difference could be argued to be their approaches to data and how you store and retrieve it. With Gatsby you get the database connection at build time where as with Redwood its at runtime. Having said that there is in fact more to it but i will not dive into such things in this post. See ","position":{"start":{"line":6,"column":1,"offset":528},"end":{"line":6,"column":566,"offset":1093},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/docs/data-fetching/","children":[{"type":"text","value":"here","position":{"start":{"line":6,"column":567,"offset":1094},"end":{"line":6,"column":571,"offset":1098},"indent":[]}}],"position":{"start":{"line":6,"column":566,"offset":1093},"end":{"line":6,"column":618,"offset":1145},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":6,"column":618,"offset":1145},"end":{"line":6,"column":623,"offset":1150},"indent":[]}},{"type":"link","title":null,"url":"https://stackoverflow.com/questions/846103/runtime-vs-compile-time","children":[{"type":"text","value":"here","position":{"start":{"line":6,"column":624,"offset":1151},"end":{"line":6,"column":628,"offset":1155},"indent":[]}}],"position":{"start":{"line":6,"column":623,"offset":1150},"end":{"line":6,"column":697,"offset":1224},"indent":[]}},{"type":"text","value":" for some googling inspiration.","position":{"start":{"line":6,"column":697,"offset":1224},"end":{"line":6,"column":728,"offset":1255},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":528},"end":{"line":6,"column":728,"offset":1255},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I highly suggest you take a look at the ","position":{"start":{"line":8,"column":1,"offset":1259},"end":{"line":8,"column":41,"offset":1299},"indent":[]}},{"type":"link","title":null,"url":"https://redwoodjs.com/docs/introduction","children":[{"type":"text","value":"Redwood docs","position":{"start":{"line":8,"column":42,"offset":1300},"end":{"line":8,"column":54,"offset":1312},"indent":[]}}],"position":{"start":{"line":8,"column":41,"offset":1299},"end":{"line":8,"column":96,"offset":1354},"indent":[]}},{"type":"text","value":" and follow their tutorial, which i have to say is one of the best out there! Thats where i began, my aim was to follow along, get a site up and running and try to add a few things along the way that i would normally include in my day to day toolchain.","position":{"start":{"line":8,"column":96,"offset":1354},"end":{"line":8,"column":348,"offset":1606},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":1259},"end":{"line":8,"column":348,"offset":1606},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Cells","position":{"start":{"line":10,"column":4,"offset":1613},"end":{"line":10,"column":9,"offset":1618},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1610},"end":{"line":10,"column":9,"offset":1618},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To that end i wanted to see if i could transfer some of my workflow from Gatsby over to Redwood. By that i mean, how i generally like to develop a Gatsby site.","position":{"start":{"line":12,"column":1,"offset":1622},"end":{"line":12,"column":160,"offset":1781},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1622},"end":{"line":12,"column":160,"offset":1781},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It looks something like this.","position":{"start":{"line":14,"column":1,"offset":1785},"end":{"line":14,"column":30,"offset":1814},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1785},"end":{"line":14,"column":30,"offset":1814},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Clean install of gatsby, react and react-dom","position":{"start":{"line":16,"column":3,"offset":1820},"end":{"line":16,"column":47,"offset":1864},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":1820},"end":{"line":16,"column":47,"offset":1864},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1818},"end":{"line":16,"column":47,"offset":1864},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add ","position":{"start":{"line":17,"column":3,"offset":1868},"end":{"line":17,"column":7,"offset":1872},"indent":[]}},{"type":"link","title":null,"url":"https://theme-ui.com/","children":[{"type":"text","value":"theme-ui","position":{"start":{"line":17,"column":8,"offset":1873},"end":{"line":17,"column":16,"offset":1881},"indent":[]}}],"position":{"start":{"line":17,"column":7,"offset":1872},"end":{"line":17,"column":40,"offset":1905},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":1868},"end":{"line":17,"column":40,"offset":1905},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1866},"end":{"line":17,"column":40,"offset":1905},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create my folder structure","position":{"start":{"line":18,"column":3,"offset":1909},"end":{"line":18,"column":29,"offset":1935},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":1909},"end":{"line":18,"column":29,"offset":1935},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1907},"end":{"line":18,"column":29,"offset":1935},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create my base layout","position":{"start":{"line":19,"column":3,"offset":1939},"end":{"line":19,"column":24,"offset":1960},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":1939},"end":{"line":19,"column":24,"offset":1960},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1937},"end":{"line":19,"column":24,"offset":1960},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If using the filesystem install plugins and setup gatsby-node.js stuff, otherwise install correct CMS plugin and set up components and queries","position":{"start":{"line":20,"column":3,"offset":1964},"end":{"line":20,"column":145,"offset":2106},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1964},"end":{"line":20,"column":145,"offset":2106},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1962},"end":{"line":20,"column":145,"offset":2106},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1818},"end":{"line":20,"column":145,"offset":2106},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now im not going to focus too much on what Gatsby offers as thats not what this post is about but i will say that i love the fact that Gatsby gives you the option to start fresh with a blank folder or if you don't fancy that, with a starter with a lot of the leg work done for you.","position":{"start":{"line":22,"column":1,"offset":2110},"end":{"line":22,"column":282,"offset":2391},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2110},"end":{"line":22,"column":282,"offset":2391},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Even though i love setting things up in Gatsby my first impression of Redwoods scaffold architecture could best be summerized by üò± followed by üßê then üòç. The ease from which you can start creating your routes, components and pages is a delight to work with. There are some best practices borrowed from Rails (which i have never looked at) and these scaffolded implementation take advantage of them, but you are not tied to them. I have to say that i found it a breath of fresh air to have a CLI that gave me what i (thought) i wanted. An interesting case in point is the concept of Cells. When we load data into a component or page we have to take into consideration a couple of factors before we can show said data to the user.","position":{"start":{"line":24,"column":1,"offset":2395},"end":{"line":24,"column":731,"offset":3125},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2395},"end":{"line":24,"column":731,"offset":3125},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Is the data loading?","position":{"start":{"line":26,"column":3,"offset":3131},"end":{"line":26,"column":23,"offset":3151},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":3131},"end":{"line":26,"column":23,"offset":3151},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":3129},"end":{"line":26,"column":23,"offset":3151},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Has it loaded successfully?","position":{"start":{"line":27,"column":3,"offset":3155},"end":{"line":27,"column":30,"offset":3182},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3155},"end":{"line":27,"column":30,"offset":3182},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":3153},"end":{"line":27,"column":30,"offset":3182},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Was there an error?","position":{"start":{"line":28,"column":3,"offset":3186},"end":{"line":28,"column":22,"offset":3205},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":3186},"end":{"line":28,"column":22,"offset":3205},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":3184},"end":{"line":28,"column":22,"offset":3205},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":3129},"end":{"line":28,"column":22,"offset":3205},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"These are all standard things we check for. Now, this may be a popular pattern that other developers adopt in their projects but it was new to me. With the idea of Cells Redwood wants you to take a declarative approach to fetching the data by having one file related to the data being fetched that exports a few named constants:","position":{"start":{"line":30,"column":1,"offset":3209},"end":{"line":30,"column":329,"offset":3537},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":3209},"end":{"line":30,"column":329,"offset":3537},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Loading","position":{"start":{"line":32,"column":3,"offset":3543},"end":{"line":32,"column":10,"offset":3550},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":3543},"end":{"line":32,"column":10,"offset":3550},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3541},"end":{"line":32,"column":10,"offset":3550},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Empty","position":{"start":{"line":33,"column":3,"offset":3554},"end":{"line":33,"column":8,"offset":3559},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":3554},"end":{"line":33,"column":8,"offset":3559},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3552},"end":{"line":33,"column":8,"offset":3559},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Failure","position":{"start":{"line":34,"column":3,"offset":3563},"end":{"line":34,"column":10,"offset":3570},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":3563},"end":{"line":34,"column":10,"offset":3570},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3561},"end":{"line":34,"column":10,"offset":3570},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Success","position":{"start":{"line":35,"column":3,"offset":3574},"end":{"line":35,"column":10,"offset":3581},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":3574},"end":{"line":35,"column":10,"offset":3581},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3572},"end":{"line":35,"column":10,"offset":3581},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3541},"end":{"line":35,"column":10,"offset":3581},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Within your Loading function you can export any kind of loading logic you would like to be shown before the data has been fetched. Empty? You guessed it, the data is empty. And Success is where you actually show the loaded data.","position":{"start":{"line":37,"column":1,"offset":3585},"end":{"line":37,"column":229,"offset":3813},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3585},"end":{"line":37,"column":229,"offset":3813},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An example of how this might look, borrowing from the Redwood tutorial:","position":{"start":{"line":39,"column":1,"offset":3817},"end":{"line":39,"column":72,"offset":3888},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":3817},"end":{"line":39,"column":72,"offset":3888},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export const QUERY = gql`\n  query {\n    posts {\n      id\n      title\n      body\n      createdAt\n    }\n  }\n`;\n\n// We can show anything we like here, maybe a cool animation?\nexport const Loading = () => <div>Loading...</div>;\n\n// Don't just show an empty page or section, get creative and show a dancing banana!\nexport const Empty = () => <div>No posts yet!</div>;\n\n// The posts failed to load, lets show the error message\nexport const Failure = ({ error }) => (\n  <div>Error loading posts: {error.message}</div>\n);\n\n// The data to show in whatever format you like\nexport const Success = ({ posts }) => {\n  return posts.map(post => (\n    <article>\n      <h2>{post.title}</h2>\n      <div>{post.body}</div>\n    </article>\n  ));\n};","position":{"start":{"line":41,"column":1,"offset":3892},"end":{"line":73,"column":4,"offset":4660},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Scaffolding","position":{"start":{"line":75,"column":4,"offset":4667},"end":{"line":75,"column":15,"offset":4678},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":4664},"end":{"line":75,"column":15,"offset":4678},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The magic happens behind the scenes but the gist is that it will show the Loading component first then once the query is run Redwood will show one of the three other states. These functions are placed in a file appended with Cell. The beauty is that you can use the CLI to scaffold out the files, you can use a multitude of ways to format how the file should be named so long as it indicates that its two word:","position":{"start":{"line":77,"column":1,"offset":4682},"end":{"line":77,"column":411,"offset":5092},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":4682},"end":{"line":77,"column":411,"offset":5092},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From the tutorial:","position":{"start":{"line":79,"column":1,"offset":5096},"end":{"line":79,"column":19,"offset":5114},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":5096},"end":{"line":79,"column":19,"offset":5114},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn rw g cell blog_posts\nyarn rw g cell blog-posts\nyarn rw g cell blogPosts\nyarn rw g cell BlogPosts","position":{"start":{"line":81,"column":1,"offset":5118},"end":{"line":86,"column":4,"offset":5236},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"These will all result in a BlogPostCell folder being created for you with a file and a test file and a passing test, Mr Dodds would be oh so proud of us! From here we import our Cell component into our view and the rest is taken care of for us.","position":{"start":{"line":88,"column":1,"offset":5240},"end":{"line":88,"column":245,"offset":5484},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":5240},"end":{"line":88,"column":245,"offset":5484},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Another aspect of Redwood i really liked was the routing, its intuitive, easy to grasp and powerful. When we want to create a new page we can again use the CLI which will do a couple of nifty things for us:","position":{"start":{"line":90,"column":1,"offset":5488},"end":{"line":90,"column":207,"offset":5694},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":5488},"end":{"line":90,"column":207,"offset":5694},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn rw generate page post","position":{"start":{"line":92,"column":1,"offset":5698},"end":{"line":94,"column":4,"offset":5738},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Redwood will create a folder and page by appending the name in the command with Page","position":{"start":{"line":96,"column":3,"offset":5744},"end":{"line":96,"column":87,"offset":5828},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":5744},"end":{"line":96,"column":87,"offset":5828},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":5742},"end":{"line":96,"column":87,"offset":5828},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a test file","position":{"start":{"line":97,"column":3,"offset":5832},"end":{"line":97,"column":21,"offset":5850},"indent":[]}}],"position":{"start":{"line":97,"column":3,"offset":5832},"end":{"line":97,"column":21,"offset":5850},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5830},"end":{"line":97,"column":21,"offset":5850},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add a route to the routes.js file for us","position":{"start":{"line":98,"column":3,"offset":5854},"end":{"line":98,"column":43,"offset":5894},"indent":[]}}],"position":{"start":{"line":98,"column":3,"offset":5854},"end":{"line":98,"column":43,"offset":5894},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":5852},"end":{"line":98,"column":43,"offset":5894},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":5742},"end":{"line":98,"column":43,"offset":5894},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Routing","position":{"start":{"line":100,"column":4,"offset":5901},"end":{"line":100,"column":11,"offset":5908},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":5898},"end":{"line":100,"column":11,"offset":5908},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is my routes.js file after going through the tutorial:","position":{"start":{"line":102,"column":1,"offset":5912},"end":{"line":102,"column":60,"offset":5971},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":5912},"end":{"line":102,"column":60,"offset":5971},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import { Router, Route } from \"@redwoodjs/router\";\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Route path=\"/blog-post/{id:Int}\" page={BlogPostPage} name=\"blogPost\" />\n      <Route path=\"/posts\" page={PostsPage} name=\"posts\" />\n      <Route path=\"/posts/{id:Int}\" page={PostPage} name=\"post\" />\n      <Route path=\"/posts/{id:Int}/edit\" page={EditPostPage} name=\"editPost\" />\n      <Route path=\"/posts/new\" page={NewPostPage} name=\"newPost\" />\n      <Route path=\"/about\" page={AboutPage} name=\"about\" />\n      <Route path=\"/\" page={HomePage} name=\"home\" />\n      <Route notfound page={NotFoundPage} />\n    </Router>\n  );\n};\n\nexport default Routes;","position":{"start":{"line":104,"column":1,"offset":5975},"end":{"line":123,"column":4,"offset":6660},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There a few things off the bat which are striking, we don't have any imports! (Except for the router ones) Redwood handles all of that automatically for us so will don't end up with 100 lines of imports. Nice üòé. Before i continue i should probably show you how to use the routes via the Link component:","position":{"start":{"line":125,"column":1,"offset":6664},"end":{"line":125,"column":304,"offset":6967},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":6664},"end":{"line":125,"column":304,"offset":6967},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Taken from the tutorial.","position":{"start":{"line":127,"column":1,"offset":6971},"end":{"line":127,"column":25,"offset":6995},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":6971},"end":{"line":127,"column":25,"offset":6995},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// web/src/components/BlogPostsCell/BlogPostsCell.js\n\nimport { Link, routes } from \"@redwoodjs/router\";\n\n// QUERY, Loading, Empty and Failure definitions...\n\nexport const Success = ({ posts }) => {\n  return posts.map(post => (\n    <article key={post.id}>\n      <header>\n        <h2>\n          <Link to={routes.blogPost({ id: post.id })}>{post.title}</Link>\n        </h2>\n      </header>\n      <p>{post.body}</p>\n      <div>Posted at: {post.createdAt}</div>\n    </article>\n  ));\n};","position":{"start":{"line":129,"column":1,"offset":6999},"end":{"line":149,"column":4,"offset":7509},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see its very similar to what we are familiar with already. Except that we can pass variables to the routes with ease, in fact we can pass whatever we want! Here we are passing the id of the blog post which is taken form the query and expected in the BlogPostCell component as a prop. But we can also pass anything we want, like a random number üòï, for example:","position":{"start":{"line":151,"column":1,"offset":7513},"end":{"line":151,"column":372,"offset":7884},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":7513},"end":{"line":151,"column":372,"offset":7884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Taken from the tutorial:","position":{"start":{"line":153,"column":1,"offset":7888},"end":{"line":153,"column":25,"offset":7912},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":7888},"end":{"line":153,"column":25,"offset":7912},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"<BlogPostCell id={id} rand={Math.random()}>","position":{"start":{"line":155,"column":1,"offset":7916},"end":{"line":157,"column":4,"offset":7971},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Ive worked on code bases with extremely complicated routing systems where passing values, whatever they may be, via the routes has been a headache, and im sure im not alone. You can read more about routing in the ","position":{"start":{"line":159,"column":1,"offset":7975},"end":{"line":159,"column":214,"offset":8188},"indent":[]}},{"type":"link","title":null,"url":"https://redwoodjs.com/tutorial/routing-params","children":[{"type":"text","value":"routing-params docs","position":{"start":{"line":159,"column":215,"offset":8189},"end":{"line":159,"column":234,"offset":8208},"indent":[]}}],"position":{"start":{"line":159,"column":214,"offset":8188},"end":{"line":159,"column":282,"offset":8256},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":159,"column":282,"offset":8256},"end":{"line":159,"column":283,"offset":8257},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":7975},"end":{"line":159,"column":283,"offset":8257},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Styling with Theme-ui","position":{"start":{"line":161,"column":4,"offset":8264},"end":{"line":161,"column":25,"offset":8285},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":8261},"end":{"line":161,"column":25,"offset":8285},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There isn't much info on how to style your website in the docs and when looking at the project all i saw was an index.css file. Nowadays i really enjoy using theme-ui to style my websites so i wanted to see how easy it would be to integrate that with Redwood. Turns out its super simple. Now, im not blowing smoke up Redwoods backside here, this is also a great benefit to using theme-ui but i was happy that Redwood didn't put any obstacles in the way.","position":{"start":{"line":163,"column":1,"offset":8289},"end":{"line":163,"column":454,"offset":8742},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":8289},"end":{"line":163,"column":454,"offset":8742},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you are the theme-ui way inclined (and you should be üòú) all you have to do is install theme-ui, remembering that Redwood operates as a yarn workspace so:","position":{"start":{"line":165,"column":1,"offset":8746},"end":{"line":165,"column":158,"offset":8903},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":8746},"end":{"line":165,"column":158,"offset":8903},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"yarn workspace web add theme-ui","position":{"start":{"line":167,"column":1,"offset":8907},"end":{"line":169,"column":4,"offset":8952},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then simply create a theme.js folder under your src folder. For those that don't know how that looks, something like this will get yo started:","position":{"start":{"line":171,"column":1,"offset":8956},"end":{"line":171,"column":143,"offset":9098},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":8956},"end":{"line":171,"column":143,"offset":9098},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export default {\n  initialColorMode: \"dark\",\n  useCustomProperties: false,\n  fonts: {\n    body: \"Open Sans\",\n    heading: \"Muli\"\n  },\n  fontWeights: {\n    body: 300,\n    heading: 400,\n    bold: 700\n  },\n  lineHeights: {\n    body: \"110%\",\n    heading: 1.125,\n    tagline: \"100px\"\n  },\n  letterSpacing: {\n    body: \"2px\",\n    text: \"5px\"\n  },\n  colors: {\n    text: \"#FFFfff\",\n    background: \"#121212\",\n    primary: \"#000010\",\n    secondary: \"#E7E7E9\",\n    secondaryDarker: \"#212935\",\n    accent: \"#DE3C4B\",\n    modes: {\n      dark: {\n        text: \"#000010\",\n        background: \"#FFFfff\",\n        primary: \"#000010\",\n        secondary: \"#E7E7E9\",\n        secondaryDarker: \"#212935\",\n        accent: \"#DE3C4B\"\n      }\n    }\n  },\n  breakpoints: [\"40em\", \"56em\", \"64em\"]\n};","position":{"start":{"line":173,"column":1,"offset":9102},"end":{"line":215,"column":4,"offset":9924},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You must then wrap the Redwood app in the ThemeProvider by heading to the web apps entry point at index.js and importing and wrapping the RedwoodProvider and importing and passing in your theme file like so:","position":{"start":{"line":217,"column":1,"offset":9928},"end":{"line":217,"column":208,"offset":10135},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":9928},"end":{"line":217,"column":208,"offset":10135},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import ReactDOM from \"react-dom\";\nimport { RedwoodProvider, FatalErrorBoundary } from \"@redwoodjs/web\";\nimport FatalErrorPage from \"src/pages/FatalErrorPage\";\nimport { ThemeProvider } from \"theme-ui\";\nimport theme from \"./theme\";\n\nimport Routes from \"src/Routes\";\n\nimport \"./scaffold.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <FatalErrorBoundary page={FatalErrorPage}>\n      <RedwoodProvider>\n        <Routes />\n      </RedwoodProvider>\n    </FatalErrorBoundary>\n  </ThemeProvider>,\n  document.getElementById(\"redwood-app\")\n);","position":{"start":{"line":219,"column":1,"offset":10139},"end":{"line":241,"column":4,"offset":10737},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"From here you can use the jsx pragma (more info ","position":{"start":{"line":243,"column":1,"offset":10741},"end":{"line":243,"column":49,"offset":10789},"indent":[]}},{"type":"link","title":null,"url":"https://theme-ui.com/guides/jsx-pragma/","children":[{"type":"text","value":"here","position":{"start":{"line":243,"column":50,"offset":10790},"end":{"line":243,"column":54,"offset":10794},"indent":[]}}],"position":{"start":{"line":243,"column":49,"offset":10789},"end":{"line":243,"column":96,"offset":10836},"indent":[]}},{"type":"text","value":") and then use the sx prop to access and style your components like so:","position":{"start":{"line":243,"column":96,"offset":10836},"end":{"line":243,"column":167,"offset":10907},"indent":[]}}],"position":{"start":{"line":243,"column":1,"offset":10741},"end":{"line":243,"column":167,"offset":10907},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { Link, routes } from \"@redwoodjs/router\";\n\nconst BlogPost = ({ post }) => {\n  return (\n    <article>\n      <header>\n        <h2>\n          <Link\n            sx={{\n              fontFamily: \"heading\",\n              fontWeight: 400,\n              color: \"text\",\n              \":hover\": {\n                color: \"accent\"\n              }\n            }}\n            to={routes.blogPost({ id: post.id })}\n          >\n            {post.title}\n          </Link>\n        </h2>\n      </header>\n      <div\n        sx={{\n          fontFamily: \"heading\",\n          fontWeight: 400,\n          color: \"text\"\n        }}\n      >\n        {post.body}\n      </div>\n    </article>\n  );\n};\n\nexport default BlogPost;","position":{"start":{"line":245,"column":1,"offset":10911},"end":{"line":284,"column":4,"offset":11709},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Easy peezy, lemon squeezy!","position":{"start":{"line":286,"column":1,"offset":11713},"end":{"line":286,"column":27,"offset":11739},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":11713},"end":{"line":286,"column":27,"offset":11739},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thats as far as i have got for now. I plan on looking into the database in more detail and i will write a post about my experience with that. All in all im really liking where this project is heading, im not going to jump ship from Gatsby as i feel that they both have their places but im excited to see how Redwood develops and will be following the project closely!","position":{"start":{"line":288,"column":1,"offset":11743},"end":{"line":288,"column":368,"offset":12110},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":11743},"end":{"line":288,"column":368,"offset":12110},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"First look at RedwoodJS\",\"date\":\"2020-03-23T00:00:00.000Z\",\"published\":true,\"category\":\"First Look\",\"author\":\"Richard Haines\",\"keywords\":[\"javascript\",\"redwoodjs\"],\"pin\":false}","position":{"start":{"line":291,"column":1,"offset":12114},"end":{"line":291,"column":215,"offset":12328},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":291,"column":215,"offset":12328}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"First look at RedwoodJS\",\n  \"date\": \"2020-03-23T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"First Look\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"javascript\", \"redwoodjs\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction-to-redwoodjs\"\n  }, \"Introduction to RedwoodJS\"), mdx(\"p\", null, \"RedwoodJS is a new opinionated full stack, serverless web app framework that takes all the good parts of what a JAMstack website offers and packages it up into something that promises to offer all the good and much more. Its still in alpha phase but i decided to take it for a spin to learn a little about how it works and how its workflow compares to my favorite dev tool Gatsby. This post is about some of the things i found along the way that i thought were cool and wanted to point out.\"), mdx(\"p\", null, \"Of course its unfair to compare the two as they are very different beasts. While Gatsby is a progressive web app generator where you can connect to any backend headless CMS you like, Redwood aims to take the full stack approach and gives you an api setup via prisma. The main difference could be argued to be their approaches to data and how you store and retrieve it. With Gatsby you get the database connection at build time where as with Redwood its at runtime. Having said that there is in fact more to it but i will not dive into such things in this post. See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/data-fetching/\"\n  }), \"here\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/846103/runtime-vs-compile-time\"\n  }), \"here\"), \" for some googling inspiration.\"), mdx(\"p\", null, \"I highly suggest you take a look at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://redwoodjs.com/docs/introduction\"\n  }), \"Redwood docs\"), \" and follow their tutorial, which i have to say is one of the best out there! Thats where i began, my aim was to follow along, get a site up and running and try to add a few things along the way that i would normally include in my day to day toolchain.\"), mdx(\"h2\", {\n    \"id\": \"cells\"\n  }, \"Cells\"), mdx(\"p\", null, \"To that end i wanted to see if i could transfer some of my workflow from Gatsby over to Redwood. By that i mean, how i generally like to develop a Gatsby site.\"), mdx(\"p\", null, \"It looks something like this.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clean install of gatsby, react and react-dom\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://theme-ui.com/\"\n  }), \"theme-ui\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create my folder structure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create my base layout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If using the filesystem install plugins and setup gatsby-node.js stuff, otherwise install correct CMS plugin and set up components and queries\")), mdx(\"p\", null, \"Now im not going to focus too much on what Gatsby offers as thats not what this post is about but i will say that i love the fact that Gatsby gives you the option to start fresh with a blank folder or if you don't fancy that, with a starter with a lot of the leg work done for you.\"), mdx(\"p\", null, \"Even though i love setting things up in Gatsby my first impression of Redwoods scaffold architecture could best be summerized by \\uD83D\\uDE31 followed by \\uD83E\\uDDD0 then \\uD83D\\uDE0D. The ease from which you can start creating your routes, components and pages is a delight to work with. There are some best practices borrowed from Rails (which i have never looked at) and these scaffolded implementation take advantage of them, but you are not tied to them. I have to say that i found it a breath of fresh air to have a CLI that gave me what i (thought) i wanted. An interesting case in point is the concept of Cells. When we load data into a component or page we have to take into consideration a couple of factors before we can show said data to the user.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Is the data loading?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Has it loaded successfully?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Was there an error?\")), mdx(\"p\", null, \"These are all standard things we check for. Now, this may be a popular pattern that other developers adopt in their projects but it was new to me. With the idea of Cells Redwood wants you to take a declarative approach to fetching the data by having one file related to the data being fetched that exports a few named constants:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loading\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Empty\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Failure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Success\")), mdx(\"p\", null, \"Within your Loading function you can export any kind of loading logic you would like to be shown before the data has been fetched. Empty? You guessed it, the data is empty. And Success is where you actually show the loaded data.\"), mdx(\"p\", null, \"An example of how this might look, borrowing from the Redwood tutorial:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export const QUERY = gql`\\n  query {\\n    posts {\\n      id\\n      title\\n      body\\n      createdAt\\n    }\\n  }\\n`;\\n\\n// We can show anything we like here, maybe a cool animation?\\nexport const Loading = () => <div>Loading...</div>;\\n\\n// Don't just show an empty page or section, get creative and show a dancing banana!\\nexport const Empty = () => <div>No posts yet!</div>;\\n\\n// The posts failed to load, lets show the error message\\nexport const Failure = ({ error }) => (\\n  <div>Error loading posts: {error.message}</div>\\n);\\n\\n// The data to show in whatever format you like\\nexport const Success = ({ posts }) => {\\n  return posts.map(post => (\\n    <article>\\n      <h2>{post.title}</h2>\\n      <div>{post.body}</div>\\n    </article>\\n  ));\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"scaffolding\"\n  }, \"Scaffolding\"), mdx(\"p\", null, \"The magic happens behind the scenes but the gist is that it will show the Loading component first then once the query is run Redwood will show one of the three other states. These functions are placed in a file appended with Cell. The beauty is that you can use the CLI to scaffold out the files, you can use a multitude of ways to format how the file should be named so long as it indicates that its two word:\"), mdx(\"p\", null, \"From the tutorial:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn rw g cell blog_posts\\nyarn rw g cell blog-posts\\nyarn rw g cell blogPosts\\nyarn rw g cell BlogPosts\\n\")), mdx(\"p\", null, \"These will all result in a BlogPostCell folder being created for you with a file and a test file and a passing test, Mr Dodds would be oh so proud of us! From here we import our Cell component into our view and the rest is taken care of for us.\"), mdx(\"p\", null, \"Another aspect of Redwood i really liked was the routing, its intuitive, easy to grasp and powerful. When we want to create a new page we can again use the CLI which will do a couple of nifty things for us:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn rw generate page post\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Redwood will create a folder and page by appending the name in the command with Page\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a test file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add a route to the routes.js file for us\")), mdx(\"h2\", {\n    \"id\": \"routing\"\n  }, \"Routing\"), mdx(\"p\", null, \"Here is my routes.js file after going through the tutorial:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Router, Route } from \\\"@redwoodjs/router\\\";\\n\\nconst Routes = () => {\\n  return (\\n    <Router>\\n      <Route path=\\\"/blog-post/{id:Int}\\\" page={BlogPostPage} name=\\\"blogPost\\\" />\\n      <Route path=\\\"/posts\\\" page={PostsPage} name=\\\"posts\\\" />\\n      <Route path=\\\"/posts/{id:Int}\\\" page={PostPage} name=\\\"post\\\" />\\n      <Route path=\\\"/posts/{id:Int}/edit\\\" page={EditPostPage} name=\\\"editPost\\\" />\\n      <Route path=\\\"/posts/new\\\" page={NewPostPage} name=\\\"newPost\\\" />\\n      <Route path=\\\"/about\\\" page={AboutPage} name=\\\"about\\\" />\\n      <Route path=\\\"/\\\" page={HomePage} name=\\\"home\\\" />\\n      <Route notfound page={NotFoundPage} />\\n    </Router>\\n  );\\n};\\n\\nexport default Routes;\\n\")), mdx(\"p\", null, \"There a few things off the bat which are striking, we don't have any imports! (Except for the router ones) Redwood handles all of that automatically for us so will don't end up with 100 lines of imports. Nice \\uD83D\\uDE0E. Before i continue i should probably show you how to use the routes via the Link component:\"), mdx(\"p\", null, \"Taken from the tutorial.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// web/src/components/BlogPostsCell/BlogPostsCell.js\\n\\nimport { Link, routes } from \\\"@redwoodjs/router\\\";\\n\\n// QUERY, Loading, Empty and Failure definitions...\\n\\nexport const Success = ({ posts }) => {\\n  return posts.map(post => (\\n    <article key={post.id}>\\n      <header>\\n        <h2>\\n          <Link to={routes.blogPost({ id: post.id })}>{post.title}</Link>\\n        </h2>\\n      </header>\\n      <p>{post.body}</p>\\n      <div>Posted at: {post.createdAt}</div>\\n    </article>\\n  ));\\n};\\n\")), mdx(\"p\", null, \"As you can see its very similar to what we are familiar with already. Except that we can pass variables to the routes with ease, in fact we can pass whatever we want! Here we are passing the id of the blog post which is taken form the query and expected in the BlogPostCell component as a prop. But we can also pass anything we want, like a random number \\uD83D\\uDE15, for example:\"), mdx(\"p\", null, \"Taken from the tutorial:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<BlogPostCell id={id} rand={Math.random()}>\\n\")), mdx(\"p\", null, \"Ive worked on code bases with extremely complicated routing systems where passing values, whatever they may be, via the routes has been a headache, and im sure im not alone. You can read more about routing in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://redwoodjs.com/tutorial/routing-params\"\n  }), \"routing-params docs\"), \".\"), mdx(\"h2\", {\n    \"id\": \"styling-with-theme-ui\"\n  }, \"Styling with Theme-ui\"), mdx(\"p\", null, \"There isn't much info on how to style your website in the docs and when looking at the project all i saw was an index.css file. Nowadays i really enjoy using theme-ui to style my websites so i wanted to see how easy it would be to integrate that with Redwood. Turns out its super simple. Now, im not blowing smoke up Redwoods backside here, this is also a great benefit to using theme-ui but i was happy that Redwood didn't put any obstacles in the way.\"), mdx(\"p\", null, \"If you are the theme-ui way inclined (and you should be \\uD83D\\uDE1C) all you have to do is install theme-ui, remembering that Redwood operates as a yarn workspace so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn workspace web add theme-ui\\n\")), mdx(\"p\", null, \"Then simply create a theme.js folder under your src folder. For those that don't know how that looks, something like this will get yo started:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default {\\n  initialColorMode: \\\"dark\\\",\\n  useCustomProperties: false,\\n  fonts: {\\n    body: \\\"Open Sans\\\",\\n    heading: \\\"Muli\\\"\\n  },\\n  fontWeights: {\\n    body: 300,\\n    heading: 400,\\n    bold: 700\\n  },\\n  lineHeights: {\\n    body: \\\"110%\\\",\\n    heading: 1.125,\\n    tagline: \\\"100px\\\"\\n  },\\n  letterSpacing: {\\n    body: \\\"2px\\\",\\n    text: \\\"5px\\\"\\n  },\\n  colors: {\\n    text: \\\"#FFFfff\\\",\\n    background: \\\"#121212\\\",\\n    primary: \\\"#000010\\\",\\n    secondary: \\\"#E7E7E9\\\",\\n    secondaryDarker: \\\"#212935\\\",\\n    accent: \\\"#DE3C4B\\\",\\n    modes: {\\n      dark: {\\n        text: \\\"#000010\\\",\\n        background: \\\"#FFFfff\\\",\\n        primary: \\\"#000010\\\",\\n        secondary: \\\"#E7E7E9\\\",\\n        secondaryDarker: \\\"#212935\\\",\\n        accent: \\\"#DE3C4B\\\"\\n      }\\n    }\\n  },\\n  breakpoints: [\\\"40em\\\", \\\"56em\\\", \\\"64em\\\"]\\n};\\n\")), mdx(\"p\", null, \"You must then wrap the Redwood app in the ThemeProvider by heading to the web apps entry point at index.js and importing and wrapping the RedwoodProvider and importing and passing in your theme file like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import ReactDOM from \\\"react-dom\\\";\\nimport { RedwoodProvider, FatalErrorBoundary } from \\\"@redwoodjs/web\\\";\\nimport FatalErrorPage from \\\"src/pages/FatalErrorPage\\\";\\nimport { ThemeProvider } from \\\"theme-ui\\\";\\nimport theme from \\\"./theme\\\";\\n\\nimport Routes from \\\"src/Routes\\\";\\n\\nimport \\\"./scaffold.css\\\";\\nimport \\\"./index.css\\\";\\n\\nReactDOM.render(\\n  <ThemeProvider theme={theme}>\\n    <FatalErrorBoundary page={FatalErrorPage}>\\n      <RedwoodProvider>\\n        <Routes />\\n      </RedwoodProvider>\\n    </FatalErrorBoundary>\\n  </ThemeProvider>,\\n  document.getElementById(\\\"redwood-app\\\")\\n);\\n\")), mdx(\"p\", null, \"From here you can use the jsx pragma (more info \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://theme-ui.com/guides/jsx-pragma/\"\n  }), \"here\"), \") and then use the sx prop to access and style your components like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\";\\nimport { Link, routes } from \\\"@redwoodjs/router\\\";\\n\\nconst BlogPost = ({ post }) => {\\n  return (\\n    <article>\\n      <header>\\n        <h2>\\n          <Link\\n            sx={{\\n              fontFamily: \\\"heading\\\",\\n              fontWeight: 400,\\n              color: \\\"text\\\",\\n              \\\":hover\\\": {\\n                color: \\\"accent\\\"\\n              }\\n            }}\\n            to={routes.blogPost({ id: post.id })}\\n          >\\n            {post.title}\\n          </Link>\\n        </h2>\\n      </header>\\n      <div\\n        sx={{\\n          fontFamily: \\\"heading\\\",\\n          fontWeight: 400,\\n          color: \\\"text\\\"\\n        }}\\n      >\\n        {post.body}\\n      </div>\\n    </article>\\n  );\\n};\\n\\nexport default BlogPost;\\n\")), mdx(\"p\", null, \"Easy peezy, lemon squeezy!\"), mdx(\"p\", null, \"Thats as far as i have got for now. I plan on looking into the database in more detail and i will write a post about my experience with that. All in all im really liking where this project is heading, im not going to jump ship from Gatsby as i feel that they both have their places but im excited to see how Redwood develops and will be following the project closely!\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"First look at RedwoodJS\",\n  \"date\": \"2020-03-23T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"First Look\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"javascript\", \"redwoodjs\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"introduction-to-redwoodjs\"\n    }}>{`Introduction to RedwoodJS`}</h2>\n    <p>{`RedwoodJS is a new opinionated full stack, serverless web app framework that takes all the good parts of what a JAMstack website offers and packages it up into something that promises to offer all the good and much more. Its still in alpha phase but i decided to take it for a spin to learn a little about how it works and how its workflow compares to my favorite dev tool Gatsby. This post is about some of the things i found along the way that i thought were cool and wanted to point out.`}</p>\n    <p>{`Of course its unfair to compare the two as they are very different beasts. While Gatsby is a progressive web app generator where you can connect to any backend headless CMS you like, Redwood aims to take the full stack approach and gives you an api setup via prisma. The main difference could be argued to be their approaches to data and how you store and retrieve it. With Gatsby you get the database connection at build time where as with Redwood its at runtime. Having said that there is in fact more to it but i will not dive into such things in this post. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.org/docs/data-fetching/\"\n      }}>{`here`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://stackoverflow.com/questions/846103/runtime-vs-compile-time\"\n      }}>{`here`}</a>{` for some googling inspiration.`}</p>\n    <p>{`I highly suggest you take a look at the `}<a parentName=\"p\" {...{\n        \"href\": \"https://redwoodjs.com/docs/introduction\"\n      }}>{`Redwood docs`}</a>{` and follow their tutorial, which i have to say is one of the best out there! Thats where i began, my aim was to follow along, get a site up and running and try to add a few things along the way that i would normally include in my day to day toolchain.`}</p>\n    <h2 {...{\n      \"id\": \"cells\"\n    }}>{`Cells`}</h2>\n    <p>{`To that end i wanted to see if i could transfer some of my workflow from Gatsby over to Redwood. By that i mean, how i generally like to develop a Gatsby site.`}</p>\n    <p>{`It looks something like this.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Clean install of gatsby, react and react-dom`}</li>\n      <li parentName=\"ul\">{`Add `}<a parentName=\"li\" {...{\n          \"href\": \"https://theme-ui.com/\"\n        }}>{`theme-ui`}</a></li>\n      <li parentName=\"ul\">{`Create my folder structure`}</li>\n      <li parentName=\"ul\">{`Create my base layout`}</li>\n      <li parentName=\"ul\">{`If using the filesystem install plugins and setup gatsby-node.js stuff, otherwise install correct CMS plugin and set up components and queries`}</li>\n    </ul>\n    <p>{`Now im not going to focus too much on what Gatsby offers as thats not what this post is about but i will say that i love the fact that Gatsby gives you the option to start fresh with a blank folder or if you don't fancy that, with a starter with a lot of the leg work done for you.`}</p>\n    <p>{`Even though i love setting things up in Gatsby my first impression of Redwoods scaffold architecture could best be summerized by üò± followed by üßê then üòç. The ease from which you can start creating your routes, components and pages is a delight to work with. There are some best practices borrowed from Rails (which i have never looked at) and these scaffolded implementation take advantage of them, but you are not tied to them. I have to say that i found it a breath of fresh air to have a CLI that gave me what i (thought) i wanted. An interesting case in point is the concept of Cells. When we load data into a component or page we have to take into consideration a couple of factors before we can show said data to the user.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Is the data loading?`}</li>\n      <li parentName=\"ul\">{`Has it loaded successfully?`}</li>\n      <li parentName=\"ul\">{`Was there an error?`}</li>\n    </ul>\n    <p>{`These are all standard things we check for. Now, this may be a popular pattern that other developers adopt in their projects but it was new to me. With the idea of Cells Redwood wants you to take a declarative approach to fetching the data by having one file related to the data being fetched that exports a few named constants:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Loading`}</li>\n      <li parentName=\"ul\">{`Empty`}</li>\n      <li parentName=\"ul\">{`Failure`}</li>\n      <li parentName=\"ul\">{`Success`}</li>\n    </ul>\n    <p>{`Within your Loading function you can export any kind of loading logic you would like to be shown before the data has been fetched. Empty? You guessed it, the data is empty. And Success is where you actually show the loaded data.`}</p>\n    <p>{`An example of how this might look, borrowing from the Redwood tutorial:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export const QUERY = gql\\`\n  query {\n    posts {\n      id\n      title\n      body\n      createdAt\n    }\n  }\n\\`;\n\n// We can show anything we like here, maybe a cool animation?\nexport const Loading = () => <div>Loading...</div>;\n\n// Don't just show an empty page or section, get creative and show a dancing banana!\nexport const Empty = () => <div>No posts yet!</div>;\n\n// The posts failed to load, lets show the error message\nexport const Failure = ({ error }) => (\n  <div>Error loading posts: {error.message}</div>\n);\n\n// The data to show in whatever format you like\nexport const Success = ({ posts }) => {\n  return posts.map(post => (\n    <article>\n      <h2>{post.title}</h2>\n      <div>{post.body}</div>\n    </article>\n  ));\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"scaffolding\"\n    }}>{`Scaffolding`}</h2>\n    <p>{`The magic happens behind the scenes but the gist is that it will show the Loading component first then once the query is run Redwood will show one of the three other states. These functions are placed in a file appended with Cell. The beauty is that you can use the CLI to scaffold out the files, you can use a multitude of ways to format how the file should be named so long as it indicates that its two word:`}</p>\n    <p>{`From the tutorial:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn rw g cell blog_posts\nyarn rw g cell blog-posts\nyarn rw g cell blogPosts\nyarn rw g cell BlogPosts\n`}</code></pre>\n    <p>{`These will all result in a BlogPostCell folder being created for you with a file and a test file and a passing test, Mr Dodds would be oh so proud of us! From here we import our Cell component into our view and the rest is taken care of for us.`}</p>\n    <p>{`Another aspect of Redwood i really liked was the routing, its intuitive, easy to grasp and powerful. When we want to create a new page we can again use the CLI which will do a couple of nifty things for us:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn rw generate page post\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Redwood will create a folder and page by appending the name in the command with Page`}</li>\n      <li parentName=\"ul\">{`Create a test file`}</li>\n      <li parentName=\"ul\">{`Add a route to the routes.js file for us`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"routing\"\n    }}>{`Routing`}</h2>\n    <p>{`Here is my routes.js file after going through the tutorial:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Router, Route } from \"@redwoodjs/router\";\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Route path=\"/blog-post/{id:Int}\" page={BlogPostPage} name=\"blogPost\" />\n      <Route path=\"/posts\" page={PostsPage} name=\"posts\" />\n      <Route path=\"/posts/{id:Int}\" page={PostPage} name=\"post\" />\n      <Route path=\"/posts/{id:Int}/edit\" page={EditPostPage} name=\"editPost\" />\n      <Route path=\"/posts/new\" page={NewPostPage} name=\"newPost\" />\n      <Route path=\"/about\" page={AboutPage} name=\"about\" />\n      <Route path=\"/\" page={HomePage} name=\"home\" />\n      <Route notfound page={NotFoundPage} />\n    </Router>\n  );\n};\n\nexport default Routes;\n`}</code></pre>\n    <p>{`There a few things off the bat which are striking, we don't have any imports! (Except for the router ones) Redwood handles all of that automatically for us so will don't end up with 100 lines of imports. Nice üòé. Before i continue i should probably show you how to use the routes via the Link component:`}</p>\n    <p>{`Taken from the tutorial.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// web/src/components/BlogPostsCell/BlogPostsCell.js\n\nimport { Link, routes } from \"@redwoodjs/router\";\n\n// QUERY, Loading, Empty and Failure definitions...\n\nexport const Success = ({ posts }) => {\n  return posts.map(post => (\n    <article key={post.id}>\n      <header>\n        <h2>\n          <Link to={routes.blogPost({ id: post.id })}>{post.title}</Link>\n        </h2>\n      </header>\n      <p>{post.body}</p>\n      <div>Posted at: {post.createdAt}</div>\n    </article>\n  ));\n};\n`}</code></pre>\n    <p>{`As you can see its very similar to what we are familiar with already. Except that we can pass variables to the routes with ease, in fact we can pass whatever we want! Here we are passing the id of the blog post which is taken form the query and expected in the BlogPostCell component as a prop. But we can also pass anything we want, like a random number üòï, for example:`}</p>\n    <p>{`Taken from the tutorial:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`<BlogPostCell id={id} rand={Math.random()}>\n`}</code></pre>\n    <p>{`Ive worked on code bases with extremely complicated routing systems where passing values, whatever they may be, via the routes has been a headache, and im sure im not alone. You can read more about routing in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://redwoodjs.com/tutorial/routing-params\"\n      }}>{`routing-params docs`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"styling-with-theme-ui\"\n    }}>{`Styling with Theme-ui`}</h2>\n    <p>{`There isn't much info on how to style your website in the docs and when looking at the project all i saw was an index.css file. Nowadays i really enjoy using theme-ui to style my websites so i wanted to see how easy it would be to integrate that with Redwood. Turns out its super simple. Now, im not blowing smoke up Redwoods backside here, this is also a great benefit to using theme-ui but i was happy that Redwood didn't put any obstacles in the way.`}</p>\n    <p>{`If you are the theme-ui way inclined (and you should be üòú) all you have to do is install theme-ui, remembering that Redwood operates as a yarn workspace so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn workspace web add theme-ui\n`}</code></pre>\n    <p>{`Then simply create a theme.js folder under your src folder. For those that don't know how that looks, something like this will get yo started:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n  initialColorMode: \"dark\",\n  useCustomProperties: false,\n  fonts: {\n    body: \"Open Sans\",\n    heading: \"Muli\"\n  },\n  fontWeights: {\n    body: 300,\n    heading: 400,\n    bold: 700\n  },\n  lineHeights: {\n    body: \"110%\",\n    heading: 1.125,\n    tagline: \"100px\"\n  },\n  letterSpacing: {\n    body: \"2px\",\n    text: \"5px\"\n  },\n  colors: {\n    text: \"#FFFfff\",\n    background: \"#121212\",\n    primary: \"#000010\",\n    secondary: \"#E7E7E9\",\n    secondaryDarker: \"#212935\",\n    accent: \"#DE3C4B\",\n    modes: {\n      dark: {\n        text: \"#000010\",\n        background: \"#FFFfff\",\n        primary: \"#000010\",\n        secondary: \"#E7E7E9\",\n        secondaryDarker: \"#212935\",\n        accent: \"#DE3C4B\"\n      }\n    }\n  },\n  breakpoints: [\"40em\", \"56em\", \"64em\"]\n};\n`}</code></pre>\n    <p>{`You must then wrap the Redwood app in the ThemeProvider by heading to the web apps entry point at index.js and importing and wrapping the RedwoodProvider and importing and passing in your theme file like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import ReactDOM from \"react-dom\";\nimport { RedwoodProvider, FatalErrorBoundary } from \"@redwoodjs/web\";\nimport FatalErrorPage from \"src/pages/FatalErrorPage\";\nimport { ThemeProvider } from \"theme-ui\";\nimport theme from \"./theme\";\n\nimport Routes from \"src/Routes\";\n\nimport \"./scaffold.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <FatalErrorBoundary page={FatalErrorPage}>\n      <RedwoodProvider>\n        <Routes />\n      </RedwoodProvider>\n    </FatalErrorBoundary>\n  </ThemeProvider>,\n  document.getElementById(\"redwood-app\")\n);\n`}</code></pre>\n    <p>{`From here you can use the jsx pragma (more info `}<a parentName=\"p\" {...{\n        \"href\": \"https://theme-ui.com/guides/jsx-pragma/\"\n      }}>{`here`}</a>{`) and then use the sx prop to access and style your components like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { Link, routes } from \"@redwoodjs/router\";\n\nconst BlogPost = ({ post }) => {\n  return (\n    <article>\n      <header>\n        <h2>\n          <Link\n            sx={{\n              fontFamily: \"heading\",\n              fontWeight: 400,\n              color: \"text\",\n              \":hover\": {\n                color: \"accent\"\n              }\n            }}\n            to={routes.blogPost({ id: post.id })}\n          >\n            {post.title}\n          </Link>\n        </h2>\n      </header>\n      <div\n        sx={{\n          fontFamily: \"heading\",\n          fontWeight: 400,\n          color: \"text\"\n        }}\n      >\n        {post.body}\n      </div>\n    </article>\n  );\n};\n\nexport default BlogPost;\n`}</code></pre>\n    <p>{`Easy peezy, lemon squeezy!`}</p>\n    <p>{`Thats as far as i have got for now. I plan on looking into the database in more detail and i will write a post about my experience with that. All in all im really liking where this project is heading, im not going to jump ship from Gatsby as i feel that they both have their places but im excited to see how Redwood develops and will be following the project closely!`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}