{"expireTime":9007200851906807000,"key":"gatsby-plugin-mdx-entire-payload-b67bd3016c7ddb642d764629fe421a7c-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Responsive cards with css grid.","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":35,"offset":36},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":35,"offset":36},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whenever we want to display a bunch of cards on a page we want them to be responsive. We want the columns and rows to be dynamic depending on the screen width. To that end we could add a bunch of media queries to our code and be done with it. However, css grid makes this easy for us and without the need for media queries.","position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":324,"offset":363},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":324,"offset":363},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are many hundreds of articles out there in on the internet that explain this very concept. Im writing this post more as a reminder to myself as i always find myself forgetting the syntax and having to pull up other projects which i have used it in. Which i slowly becoming basically all of them.","position":{"start":{"line":6,"column":1,"offset":367},"end":{"line":6,"column":302,"offset":668},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":367},"end":{"line":6,"column":302,"offset":668},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets say we have a container, this container will define our grid. Inside our container we have our card components which will be iterated over and displayed in a nice, responsive grid. Lets gooooo...","position":{"start":{"line":8,"column":1,"offset":672},"end":{"line":8,"column":201,"offset":872},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":672},"end":{"line":8,"column":201,"offset":872},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"    <div\n    sx={{\n    margin: \"2em auto\",\n    display: \"grid\",\n    gridAutoRows: \"auto\",\n    gridTemplateColumns: \"repeat(auto-fill, minmax(auto, 450px))\",\n    gap: \"1.5em\",\n    justifyContent: \"space-evenly\",\n    width: \"100%\"\n    }}\n    >\n        {projects.map(({ node: project }) => (\n          <ProjectCard\n            key={project.id}\n            {...project}\n          />\n        ))}\n    </div>","position":{"start":{"line":10,"column":1,"offset":876},"end":{"line":29,"column":4,"offset":1307},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Can you spot the magic line?","position":{"start":{"line":31,"column":1,"offset":1311},"end":{"line":31,"column":29,"offset":1339},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1311},"end":{"line":31,"column":29,"offset":1339},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"gridTemplateColumns: \"repeat(auto-fill, minmax(auto, 450px))\"","position":{"start":{"line":33,"column":1,"offset":1343},"end":{"line":35,"column":4,"offset":1417},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are telling the grid template columns property that depending on the amount of iterated components we want, to auto fill each column by how ever many components there are. The second argument is a minmax function which is saying that at their smallest the cards should have an auto width (this can be set to anything lower than the second param, which is the largest width) and at their largest they should have no more than 450px width. The repeat function which takes this information ensures that the end result is dynamic by repeating its input for as many iterables as there are.","position":{"start":{"line":37,"column":1,"offset":1421},"end":{"line":37,"column":593,"offset":2013},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1421},"end":{"line":37,"column":593,"offset":2013},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You are welcome future me (any anyone else who finds this helpful!) ðŸ˜ƒ","position":{"start":{"line":39,"column":1,"offset":2017},"end":{"line":39,"column":71,"offset":2087},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2017},"end":{"line":39,"column":71,"offset":2087},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"CSS grid responsive cards\",\"date\":\"2020-04-07T00:00:00.000Z\",\"published\":true,\"category\":\"CSS\",\"author\":\"Richard Haines\",\"keywords\":[\"css grid\",\"css\",\"css-in-js\",\"emotion\",\"responsive cards\"],\"pin\":false}","position":{"start":{"line":41,"column":1,"offset":2089},"end":{"line":41,"column":243,"offset":2331},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":41,"column":243,"offset":2331}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CSS grid responsive cards\",\n  \"date\": \"2020-04-07T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"CSS\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"css grid\", \"css\", \"css-in-js\", \"emotion\", \"responsive cards\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"responsive-cards-with-css-grid\"\n  }, \"Responsive cards with css grid.\"), mdx(\"p\", null, \"Whenever we want to display a bunch of cards on a page we want them to be responsive. We want the columns and rows to be dynamic depending on the screen width. To that end we could add a bunch of media queries to our code and be done with it. However, css grid makes this easy for us and without the need for media queries.\"), mdx(\"p\", null, \"There are many hundreds of articles out there in on the internet that explain this very concept. Im writing this post more as a reminder to myself as i always find myself forgetting the syntax and having to pull up other projects which i have used it in. Which i slowly becoming basically all of them.\"), mdx(\"p\", null, \"Lets say we have a container, this container will define our grid. Inside our container we have our card components which will be iterated over and displayed in a nice, responsive grid. Lets gooooo...\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"    <div\\n    sx={{\\n    margin: \\\"2em auto\\\",\\n    display: \\\"grid\\\",\\n    gridAutoRows: \\\"auto\\\",\\n    gridTemplateColumns: \\\"repeat(auto-fill, minmax(auto, 450px))\\\",\\n    gap: \\\"1.5em\\\",\\n    justifyContent: \\\"space-evenly\\\",\\n    width: \\\"100%\\\"\\n    }}\\n    >\\n        {projects.map(({ node: project }) => (\\n          <ProjectCard\\n            key={project.id}\\n            {...project}\\n          />\\n        ))}\\n    </div>\\n\")), mdx(\"p\", null, \"Can you spot the magic line?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"gridTemplateColumns: \\\"repeat(auto-fill, minmax(auto, 450px))\\\"\\n\")), mdx(\"p\", null, \"Here we are telling the grid template columns property that depending on the amount of iterated components we want, to auto fill each column by how ever many components there are. The second argument is a minmax function which is saying that at their smallest the cards should have an auto width (this can be set to anything lower than the second param, which is the largest width) and at their largest they should have no more than 450px width. The repeat function which takes this information ensures that the end result is dynamic by repeating its input for as many iterables as there are.\"), mdx(\"p\", null, \"You are welcome future me (any anyone else who finds this helpful!) \\uD83D\\uDE03\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"CSS grid responsive cards\",\n  \"date\": \"2020-04-07T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"CSS\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"css grid\", \"css\", \"css-in-js\", \"emotion\", \"responsive cards\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"responsive-cards-with-css-grid\"\n    }}>{`Responsive cards with css grid.`}</h2>\n    <p>{`Whenever we want to display a bunch of cards on a page we want them to be responsive. We want the columns and rows to be dynamic depending on the screen width. To that end we could add a bunch of media queries to our code and be done with it. However, css grid makes this easy for us and without the need for media queries.`}</p>\n    <p>{`There are many hundreds of articles out there in on the internet that explain this very concept. Im writing this post more as a reminder to myself as i always find myself forgetting the syntax and having to pull up other projects which i have used it in. Which i slowly becoming basically all of them.`}</p>\n    <p>{`Lets say we have a container, this container will define our grid. Inside our container we have our card components which will be iterated over and displayed in a nice, responsive grid. Lets gooooo...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`    <div\n    sx={{\n    margin: \"2em auto\",\n    display: \"grid\",\n    gridAutoRows: \"auto\",\n    gridTemplateColumns: \"repeat(auto-fill, minmax(auto, 450px))\",\n    gap: \"1.5em\",\n    justifyContent: \"space-evenly\",\n    width: \"100%\"\n    }}\n    >\n        {projects.map(({ node: project }) => (\n          <ProjectCard\n            key={project.id}\n            {...project}\n          />\n        ))}\n    </div>\n`}</code></pre>\n    <p>{`Can you spot the magic line?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`gridTemplateColumns: \"repeat(auto-fill, minmax(auto, 450px))\"\n`}</code></pre>\n    <p>{`Here we are telling the grid template columns property that depending on the amount of iterated components we want, to auto fill each column by how ever many components there are. The second argument is a minmax function which is saying that at their smallest the cards should have an auto width (this can be set to anything lower than the second param, which is the largest width) and at their largest they should have no more than 450px width. The repeat function which takes this information ensures that the end result is dynamic by repeating its input for as many iterables as there are.`}</p>\n    <p>{`You are welcome future me (any anyone else who finds this helpful!) ðŸ˜ƒ`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}