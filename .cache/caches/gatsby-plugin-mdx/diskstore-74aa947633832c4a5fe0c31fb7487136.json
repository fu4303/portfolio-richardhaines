{"expireTime":9007200851906807000,"key":"gatsby-plugin-mdx-entire-payload-ae0b5a3888e308f6fbe0640f80e759d9-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import { Box } from \"theme-ui\";","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":32,"offset":31},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While still a work in progress, learning in public is fun! With that in mind id\nlike to share v1 of my ","position":{"start":{"line":4,"column":1,"offset":37},"end":{"line":5,"column":24,"offset":141},"indent":[1]}},{"type":"link","title":null,"url":"https://fauna.com/","children":[{"type":"text","value":"FaunaDB","position":{"start":{"line":5,"column":25,"offset":142},"end":{"line":5,"column":32,"offset":149},"indent":[]}}],"position":{"start":{"line":5,"column":24,"offset":141},"end":{"line":5,"column":53,"offset":170},"indent":[]}},{"type":"text","value":" CRUD hooks. Ive tested them\nlocally and they work. They provide simple abstractions though\n","position":{"start":{"line":5,"column":53,"offset":170},"end":{"line":7,"column":1,"offset":264},"indent":[1,1]}},{"type":"link","title":null,"url":"https://docs.fauna.com/fauna/current/api/fql/","children":[{"type":"text","value":"Fauna Query Language (FQL)","position":{"start":{"line":7,"column":2,"offset":265},"end":{"line":7,"column":28,"offset":291},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":264},"end":{"line":7,"column":76,"offset":339},"indent":[]}},{"type":"text","value":"\nenables so much more and the hooks will need refactoring, but for a first\nversion im relatively pleased! ðŸ˜ƒ","position":{"start":{"line":7,"column":76,"offset":339},"end":{"line":9,"column":34,"offset":449},"indent":[1,1]}}],"position":{"start":{"line":4,"column":1,"offset":37},"end":{"line":9,"column":34,"offset":449},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"useFaunaGetAll","position":{"start":{"line":11,"column":4,"offset":456},"end":{"line":11,"column":18,"offset":470},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":453},"end":{"line":11,"column":18,"offset":470},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export const useFaunaGetAll = (collectionIndex, limit) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const getAll = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(\n            q.Map(\n              q.Paginate(q.Match(q.Index(collectionIndex)), {\n                size: limit\n              }),\n              q.Lambda(\"ref\", q.Select([\"data\"], q.Get(q.Var(\"ref\"))))\n            )\n          )\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    getAll();\n  }, [collectionIndex]);\n\n  return { response, error, isLoading };\n};","position":{"start":{"line":13,"column":1,"offset":474},"end":{"line":48,"column":4,"offset":1465},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"useFaunaGetSingle","position":{"start":{"line":50,"column":4,"offset":1472},"end":{"line":50,"column":21,"offset":1489},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1469},"end":{"line":50,"column":21,"offset":1489},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"export const useFaunaGetSingle = (collectionIndex, id) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const getSingle = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(q.Get(q.Match(q.Index(collectionIndex), id)))\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    getSingle();\n  }, [id]);\n\n  return { response, error, isLoading };\n};","position":{"start":{"line":52,"column":1,"offset":1493},"end":{"line":80,"column":4,"offset":2291},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"useFaunaCreate","position":{"start":{"line":82,"column":4,"offset":2298},"end":{"line":82,"column":18,"offset":2312},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2295},"end":{"line":82,"column":18,"offset":2312},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"export const useFaunaCreate = (collectionIndex, data, customId) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const create = async () => {\n      setIsLoading(true);\n      try {\n        customId\n          ? client\n              .query(\n                q.Create(q.Ref(q.Collection(collectionIndex), customId), {\n                  data\n                })\n              )\n              .then(result => {\n                setResponse(result.data);\n                setIsLoading(false);\n              })\n          : client\n              .query(\n                q.Create(q.Collection(collectionIndex), {\n                  data\n                })\n              )\n              .then(result => {\n                setResponse(result.data);\n                setIsLoading(false);\n              });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    create();\n  }, []);\n\n  return { response, error, isLoading };\n};","position":{"start":{"line":84,"column":1,"offset":2316},"end":{"line":127,"column":4,"offset":3545},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"useFaunaUpdate","position":{"start":{"line":129,"column":4,"offset":3552},"end":{"line":129,"column":18,"offset":3566},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3549},"end":{"line":129,"column":18,"offset":3566},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"export const useFaunaUpdate = (collectionIndex, data, id) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const update = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(\n            q.Update(q.Ref(q.Collection(collectionIndex), id), {\n              data\n            })\n          )\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    update();\n  }, [id]);\n\n  return { response, error, isLoading };\n};","position":{"start":{"line":131,"column":1,"offset":3570},"end":{"line":163,"column":4,"offset":4436},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"useFaunaReplace","position":{"start":{"line":165,"column":4,"offset":4443},"end":{"line":165,"column":19,"offset":4458},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":4440},"end":{"line":165,"column":19,"offset":4458},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"export const useFaunaReplace = (collectionIndex, data, id) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const replace = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(\n            q.Replace(q.Ref(q.Collection(collectionIndex), id), {\n              data\n            })\n          )\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    replace();\n  }, [id]);\n\n  return { response, error, isLoading };\n};","position":{"start":{"line":167,"column":1,"offset":4462},"end":{"line":199,"column":4,"offset":5332},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"useFaunaDelete","position":{"start":{"line":201,"column":4,"offset":5339},"end":{"line":201,"column":18,"offset":5353},"indent":[]}}],"position":{"start":{"line":201,"column":1,"offset":5336},"end":{"line":201,"column":18,"offset":5353},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"export const useFaunaDelete = (collectionIndex, id) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const deleteIndex = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(q.Delete(q.Ref(q.Collection(collectionIndex), id)))\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    deleteIndex();\n  }, [id]);\n\n  return { response, error, isLoading };\n};","position":{"start":{"line":203,"column":1,"offset":5357},"end":{"line":231,"column":4,"offset":6163},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"FaunaDB CRUD hooks (WIP)\",\"date\":\"2020-05-08T00:00:00.000Z\",\"published\":true,\"category\":\"Serverless\",\"author\":\"Richard Haines\",\"keywords\":[\"react hooks\",\"faunadb\"],\"pin\":false}","position":{"start":{"line":233,"column":1,"offset":6165},"end":{"line":233,"column":215,"offset":6379},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":233,"column":215,"offset":6379}}},"scopeImports":["import { Box } from \"theme-ui\";","import React from 'react'"],"scopeIdentifiers":["Box","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FaunaDB CRUD hooks (WIP)\",\n  \"date\": \"2020-05-08T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Serverless\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"react hooks\", \"faunadb\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"While still a work in progress, learning in public is fun! With that in mind id\\nlike to share v1 of my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fauna.com/\"\n  }), \"FaunaDB\"), \" CRUD hooks. Ive tested them\\nlocally and they work. They provide simple abstractions though\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.fauna.com/fauna/current/api/fql/\"\n  }), \"Fauna Query Language (FQL)\"), \"\\nenables so much more and the hooks will need refactoring, but for a first\\nversion im relatively pleased! \\uD83D\\uDE03\"), mdx(\"h2\", {\n    \"id\": \"usefaunagetall\"\n  }, \"useFaunaGetAll\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export const useFaunaGetAll = (collectionIndex, limit) => {\\n  const fauna = React.useContext(FaunaContext);\\n  const { client, q } = fauna;\\n  const [response, setResponse] = React.useState(null);\\n  const [error, setError] = React.useState(null);\\n  const [isLoading, setIsLoading] = React.useState(false);\\n\\n  React.useEffect(() => {\\n    const getAll = async () => {\\n      setIsLoading(true);\\n      try {\\n        client\\n          .query(\\n            q.Map(\\n              q.Paginate(q.Match(q.Index(collectionIndex)), {\\n                size: limit\\n              }),\\n              q.Lambda(\\\"ref\\\", q.Select([\\\"data\\\"], q.Get(q.Var(\\\"ref\\\"))))\\n            )\\n          )\\n          .then(result => {\\n            setResponse(result.data);\\n            setIsLoading(false);\\n          });\\n      } catch (error) {\\n        setError(error);\\n      }\\n      setIsLoading(false);\\n    };\\n    getAll();\\n  }, [collectionIndex]);\\n\\n  return { response, error, isLoading };\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"usefaunagetsingle\"\n  }, \"useFaunaGetSingle\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export const useFaunaGetSingle = (collectionIndex, id) => {\\n  const fauna = React.useContext(FaunaContext);\\n  const { client, q } = fauna;\\n  const [response, setResponse] = React.useState(null);\\n  const [error, setError] = React.useState(null);\\n  const [isLoading, setIsLoading] = React.useState(false);\\n\\n  React.useEffect(() => {\\n    const getSingle = async () => {\\n      setIsLoading(true);\\n      try {\\n        client\\n          .query(q.Get(q.Match(q.Index(collectionIndex), id)))\\n          .then(result => {\\n            setResponse(result.data);\\n            setIsLoading(false);\\n          });\\n      } catch (error) {\\n        setError(error);\\n      }\\n      setIsLoading(false);\\n    };\\n    getSingle();\\n  }, [id]);\\n\\n  return { response, error, isLoading };\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"usefaunacreate\"\n  }, \"useFaunaCreate\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"export const useFaunaCreate = (collectionIndex, data, customId) => {\\n  const fauna = React.useContext(FaunaContext);\\n  const { client, q } = fauna;\\n  const [response, setResponse] = React.useState(null);\\n  const [error, setError] = React.useState(null);\\n  const [isLoading, setIsLoading] = React.useState(false);\\n\\n  React.useEffect(() => {\\n    const create = async () => {\\n      setIsLoading(true);\\n      try {\\n        customId\\n          ? client\\n              .query(\\n                q.Create(q.Ref(q.Collection(collectionIndex), customId), {\\n                  data\\n                })\\n              )\\n              .then(result => {\\n                setResponse(result.data);\\n                setIsLoading(false);\\n              })\\n          : client\\n              .query(\\n                q.Create(q.Collection(collectionIndex), {\\n                  data\\n                })\\n              )\\n              .then(result => {\\n                setResponse(result.data);\\n                setIsLoading(false);\\n              });\\n      } catch (error) {\\n        setError(error);\\n      }\\n      setIsLoading(false);\\n    };\\n    create();\\n  }, []);\\n\\n  return { response, error, isLoading };\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"usefaunaupdate\"\n  }, \"useFaunaUpdate\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"export const useFaunaUpdate = (collectionIndex, data, id) => {\\n  const fauna = React.useContext(FaunaContext);\\n  const { client, q } = fauna;\\n  const [response, setResponse] = React.useState(null);\\n  const [error, setError] = React.useState(null);\\n  const [isLoading, setIsLoading] = React.useState(false);\\n\\n  React.useEffect(() => {\\n    const update = async () => {\\n      setIsLoading(true);\\n      try {\\n        client\\n          .query(\\n            q.Update(q.Ref(q.Collection(collectionIndex), id), {\\n              data\\n            })\\n          )\\n          .then(result => {\\n            setResponse(result.data);\\n            setIsLoading(false);\\n          });\\n      } catch (error) {\\n        setError(error);\\n      }\\n      setIsLoading(false);\\n    };\\n    update();\\n  }, [id]);\\n\\n  return { response, error, isLoading };\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"usefaunareplace\"\n  }, \"useFaunaReplace\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"export const useFaunaReplace = (collectionIndex, data, id) => {\\n  const fauna = React.useContext(FaunaContext);\\n  const { client, q } = fauna;\\n  const [response, setResponse] = React.useState(null);\\n  const [error, setError] = React.useState(null);\\n  const [isLoading, setIsLoading] = React.useState(false);\\n\\n  React.useEffect(() => {\\n    const replace = async () => {\\n      setIsLoading(true);\\n      try {\\n        client\\n          .query(\\n            q.Replace(q.Ref(q.Collection(collectionIndex), id), {\\n              data\\n            })\\n          )\\n          .then(result => {\\n            setResponse(result.data);\\n            setIsLoading(false);\\n          });\\n      } catch (error) {\\n        setError(error);\\n      }\\n      setIsLoading(false);\\n    };\\n    replace();\\n  }, [id]);\\n\\n  return { response, error, isLoading };\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"usefaunadelete\"\n  }, \"useFaunaDelete\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"export const useFaunaDelete = (collectionIndex, id) => {\\n  const fauna = React.useContext(FaunaContext);\\n  const { client, q } = fauna;\\n  const [response, setResponse] = React.useState(null);\\n  const [error, setError] = React.useState(null);\\n  const [isLoading, setIsLoading] = React.useState(false);\\n\\n  React.useEffect(() => {\\n    const deleteIndex = async () => {\\n      setIsLoading(true);\\n      try {\\n        client\\n          .query(q.Delete(q.Ref(q.Collection(collectionIndex), id)))\\n          .then(result => {\\n            setResponse(result.data);\\n            setIsLoading(false);\\n          });\\n      } catch (error) {\\n        setError(error);\\n      }\\n      setIsLoading(false);\\n    };\\n    deleteIndex();\\n  }, [id]);\\n\\n  return { response, error, isLoading };\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport { Box } from \"theme-ui\";\nexport const _frontmatter = {\n  \"title\": \"FaunaDB CRUD hooks (WIP)\",\n  \"date\": \"2020-05-08T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Serverless\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"react hooks\", \"faunadb\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`While still a work in progress, learning in public is fun! With that in mind id\nlike to share v1 of my `}<a parentName=\"p\" {...{\n        \"href\": \"https://fauna.com/\"\n      }}>{`FaunaDB`}</a>{` CRUD hooks. Ive tested them\nlocally and they work. They provide simple abstractions though\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.fauna.com/fauna/current/api/fql/\"\n      }}>{`Fauna Query Language (FQL)`}</a>{`\nenables so much more and the hooks will need refactoring, but for a first\nversion im relatively pleased! ðŸ˜ƒ`}</p>\n    <h2 {...{\n      \"id\": \"usefaunagetall\"\n    }}>{`useFaunaGetAll`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export const useFaunaGetAll = (collectionIndex, limit) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const getAll = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(\n            q.Map(\n              q.Paginate(q.Match(q.Index(collectionIndex)), {\n                size: limit\n              }),\n              q.Lambda(\"ref\", q.Select([\"data\"], q.Get(q.Var(\"ref\"))))\n            )\n          )\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    getAll();\n  }, [collectionIndex]);\n\n  return { response, error, isLoading };\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usefaunagetsingle\"\n    }}>{`useFaunaGetSingle`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export const useFaunaGetSingle = (collectionIndex, id) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const getSingle = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(q.Get(q.Match(q.Index(collectionIndex), id)))\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    getSingle();\n  }, [id]);\n\n  return { response, error, isLoading };\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usefaunacreate\"\n    }}>{`useFaunaCreate`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const useFaunaCreate = (collectionIndex, data, customId) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const create = async () => {\n      setIsLoading(true);\n      try {\n        customId\n          ? client\n              .query(\n                q.Create(q.Ref(q.Collection(collectionIndex), customId), {\n                  data\n                })\n              )\n              .then(result => {\n                setResponse(result.data);\n                setIsLoading(false);\n              })\n          : client\n              .query(\n                q.Create(q.Collection(collectionIndex), {\n                  data\n                })\n              )\n              .then(result => {\n                setResponse(result.data);\n                setIsLoading(false);\n              });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    create();\n  }, []);\n\n  return { response, error, isLoading };\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usefaunaupdate\"\n    }}>{`useFaunaUpdate`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const useFaunaUpdate = (collectionIndex, data, id) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const update = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(\n            q.Update(q.Ref(q.Collection(collectionIndex), id), {\n              data\n            })\n          )\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    update();\n  }, [id]);\n\n  return { response, error, isLoading };\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usefaunareplace\"\n    }}>{`useFaunaReplace`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const useFaunaReplace = (collectionIndex, data, id) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const replace = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(\n            q.Replace(q.Ref(q.Collection(collectionIndex), id), {\n              data\n            })\n          )\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    replace();\n  }, [id]);\n\n  return { response, error, isLoading };\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usefaunadelete\"\n    }}>{`useFaunaDelete`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const useFaunaDelete = (collectionIndex, id) => {\n  const fauna = React.useContext(FaunaContext);\n  const { client, q } = fauna;\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const deleteIndex = async () => {\n      setIsLoading(true);\n      try {\n        client\n          .query(q.Delete(q.Ref(q.Collection(collectionIndex), id)))\n          .then(result => {\n            setResponse(result.data);\n            setIsLoading(false);\n          });\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    deleteIndex();\n  }, [id]);\n\n  return { response, error, isLoading };\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}