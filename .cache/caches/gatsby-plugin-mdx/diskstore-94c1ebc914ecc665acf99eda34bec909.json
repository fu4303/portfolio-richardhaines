{"expireTime":9007200851906808000,"key":"gatsby-plugin-mdx-entire-payload-abceb8c439fac1ef463ab28340c54277-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"When i started using theme-ui i was already an avid emotion user. I would splatter my files with styled components without really thinking about if they could (or should) be shared. It was a well drilled operation that i felt was giving me the results i wanted.","position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":262,"offset":263},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":262,"offset":263},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, i would generally use css grid for my sites base layout, this would be wrapped around the whole app using gatsby-plugin-layout. ","position":{"start":{"line":4,"column":1,"offset":267},"end":{"line":4,"column":142,"offset":408},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":267},"end":{"line":4,"column":142,"offset":408},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With media queries","position":{"start":{"line":6,"column":4,"offset":415},"end":{"line":6,"column":22,"offset":433},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":412},"end":{"line":6,"column":22,"offset":433},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"const Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-areas:\n    \"nav\"\n    \"main\"\n    \"footer\";\n  height: 100%;\n  width: fit-content;\n\n  /* 48em = 768px */\n  @media (min-width: 48em) {\n    display: grid;\n    grid-template-columns: repeat(6, 1fr);\n    grid-template-rows: 0.5fr 4fr 0.5fr;\n    grid-template-areas:\n      \"nav nav nav nav nav nav\"\n      \"main main main main main main\"\n      \"footer footer footer footer footer footer\";\n    height: 100vh;\n    width: auto;\n  }\n`;\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        `}\n      />\n      <Container>\n        <Header>\n          <Nav />\n        </Header>\n        {children}\n        <Footer />\n      </Container>\n    </>\n  );\n};\n\nexport default Layout;","position":{"start":{"line":8,"column":1,"offset":437},"end":{"line":64,"column":4,"offset":1607},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using the sx prop","position":{"start":{"line":66,"column":4,"offset":1614},"end":{"line":66,"column":21,"offset":1631},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1611},"end":{"line":66,"column":21,"offset":1631},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This worked perfectly fine, but i had learned through discussions with other devs, and through seeing their work that mixing both emotion and theme-ui not only wasn't really necessary but also a bit clunky to say the least. Thats without going into how theme-ui uses emotion under the hood (what was i thinking?)","position":{"start":{"line":68,"column":1,"offset":1635},"end":{"line":68,"column":313,"offset":1947},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1635},"end":{"line":68,"column":313,"offset":1947},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When i decided to do a complete redesign of my website i wanted to try and use theme-ui only to style my site, and more specifically the sx prop. The problem i faced was not how to add the grid system via the sx prop, but how to make it responsive, that is, how to do what i was doing with media queries but via the sx prop.","position":{"start":{"line":70,"column":1,"offset":1951},"end":{"line":70,"column":325,"offset":2275},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1951},"end":{"line":70,"column":325,"offset":2275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The solution was surprisingly simple. With css variables on the sx prop you can use an array format to give different values depending on the browser width. With this knowledge in hand i converted the above code to the following:","position":{"start":{"line":72,"column":1,"offset":2279},"end":{"line":72,"column":230,"offset":2508},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2279},"end":{"line":72,"column":230,"offset":2508},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"const Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        `}\n      />\n      <div\n        sx={{\n          display: \"grid\",\n          gridTemplateRows: \"auto\",\n          gridTemplateColumns: [\n            \"repeat(4, 1fr)\",\n            \"repeat(6, 1fr)\",\n            \"repeat(8, 1fr)\"\n          ],\n          gridTemplateAreas: [\n            `\n            'nav      nav     nav     nav'\n            'main     main    main    main'\n            'footer   footer  footer  footer'\n          `,\n            `\n            'nav      nav     nav     nav     nav     nav'\n            'main     main    main    main    main    main'\n            'footer   footer  footer  footer  footer  footer'\n          `,\n            `\n            '.    nav      nav     nav     nav     nav     nav    .'\n            '.    main     main    main    main    main    main   .'\n            '.    footer   footer  footer  footer  footer  footer .'\n          `\n          ],\n          padding: \"0 1em\"\n        }}\n      >\n        <Header>\n          <Nav />\n        </Header>\n        {children}\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport default Layout;","position":{"start":{"line":74,"column":1,"offset":2512},"end":{"line":134,"column":4,"offset":4059},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Extraction","position":{"start":{"line":136,"column":4,"offset":4066},"end":{"line":136,"column":14,"offset":4076},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":4063},"end":{"line":136,"column":14,"offset":4076},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This was a great improvement and when looking at it with the understanding that the array notation works like so ","position":{"start":{"line":138,"column":1,"offset":4080},"end":{"line":138,"column":114,"offset":4193},"indent":[]}},{"type":"linkReference","identifier":"'mobile', 'tablet', 'desktop'","label":"'mobile', 'tablet', 'desktop'","referenceType":"shortcut","children":[{"type":"text","value":"'mobile', 'tablet', 'desktop'","position":{"start":{"line":138,"column":115,"offset":4194},"end":{"line":138,"column":144,"offset":4223},"indent":[]}}],"position":{"start":{"line":138,"column":114,"offset":4193},"end":{"line":138,"column":145,"offset":4224},"indent":[]}},{"type":"text","value":" it becomes really easy to read and understand what is going on. Having all those long strings in there was kinda messy though so i moved them out into another file and replaced them:","position":{"start":{"line":138,"column":145,"offset":4224},"end":{"line":138,"column":328,"offset":4407},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":4080},"end":{"line":138,"column":328,"offset":4407},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"<div\n  sx={{\n    display: \"grid\",\n    gridTemplateRows: \"auto\",\n    gridTemplateColumns: [\"repeat(4, 1fr)\", \"repeat(6, 1fr)\", \"repeat(8, 1fr)\"],\n    gridTemplateAreas: [\n      PhoneTemplateAreas,\n      TabletTemplateAreas,\n      DesktopTemplateAreas\n    ],\n    padding: \"0 1em\"\n  }}\n>\n  <Header>\n    <Nav />\n  </Header>\n  {children}\n  <Footer />\n</div>","position":{"start":{"line":140,"column":1,"offset":4411},"end":{"line":160,"column":4,"offset":4794},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Much better! ðŸ˜Ž","position":{"start":{"line":162,"column":1,"offset":4798},"end":{"line":162,"column":16,"offset":4813},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":4798},"end":{"line":162,"column":16,"offset":4813},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"CSS grid with theme-ui\",\"date\":\"2020-02-25T00:00:00.000Z\",\"published\":true,\"category\":\"Theme-ui\",\"author\":\"Richard Haines\",\"keywords\":[\"css grid\",\"theme-ui\",\"css-in-js\",\"emotion\",\"media queries\",\"layouts\"],\"pin\":false}","position":{"start":{"line":165,"column":1,"offset":4817},"end":{"line":165,"column":257,"offset":5073},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":165,"column":257,"offset":5073}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CSS grid with theme-ui\",\n  \"date\": \"2020-02-25T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Theme-ui\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"css grid\", \"theme-ui\", \"css-in-js\", \"emotion\", \"media queries\", \"layouts\"],\n  \"pin\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When i started using theme-ui i was already an avid emotion user. I would splatter my files with styled components without really thinking about if they could (or should) be shared. It was a well drilled operation that i felt was giving me the results i wanted.\"), mdx(\"p\", null, \"For example, i would generally use css grid for my sites base layout, this would be wrapped around the whole app using gatsby-plugin-layout. \"), mdx(\"h2\", {\n    \"id\": \"with-media-queries\"\n  }, \"With media queries\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const Container = styled.div`\\n  display: grid;\\n  grid-template-columns: 1fr;\\n  grid-template-areas:\\n    \\\"nav\\\"\\n    \\\"main\\\"\\n    \\\"footer\\\";\\n  height: 100%;\\n  width: fit-content;\\n\\n  /* 48em = 768px */\\n  @media (min-width: 48em) {\\n    display: grid;\\n    grid-template-columns: repeat(6, 1fr);\\n    grid-template-rows: 0.5fr 4fr 0.5fr;\\n    grid-template-areas:\\n      \\\"nav nav nav nav nav nav\\\"\\n      \\\"main main main main main main\\\"\\n      \\\"footer footer footer footer footer footer\\\";\\n    height: 100vh;\\n    width: auto;\\n  }\\n`;\\n\\nconst Layout = ({ children }) => {\\n  return (\\n    <>\\n      <Global\\n        styles={css`\\n          * {\\n            margin: 0;\\n            padding: 0;\\n            box-sizing: border-box;\\n          }\\n          body {\\n            scroll-behavior: smooth;\\n            overflow-y: scroll;\\n            -webkit-overflow-scrolling: touch;\\n            width: 100%;\\n            overflow-x: hidden;\\n          }\\n        `}\\n      />\\n      <Container>\\n        <Header>\\n          <Nav />\\n        </Header>\\n        {children}\\n        <Footer />\\n      </Container>\\n    </>\\n  );\\n};\\n\\nexport default Layout;\\n\")), mdx(\"h2\", {\n    \"id\": \"using-the-sx-prop\"\n  }, \"Using the sx prop\"), mdx(\"p\", null, \"This worked perfectly fine, but i had learned through discussions with other devs, and through seeing their work that mixing both emotion and theme-ui not only wasn't really necessary but also a bit clunky to say the least. Thats without going into how theme-ui uses emotion under the hood (what was i thinking?)\"), mdx(\"p\", null, \"When i decided to do a complete redesign of my website i wanted to try and use theme-ui only to style my site, and more specifically the sx prop. The problem i faced was not how to add the grid system via the sx prop, but how to make it responsive, that is, how to do what i was doing with media queries but via the sx prop.\"), mdx(\"p\", null, \"The solution was surprisingly simple. With css variables on the sx prop you can use an array format to give different values depending on the browser width. With this knowledge in hand i converted the above code to the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const Layout = ({ children }) => {\\n  return (\\n    <>\\n      <Global\\n        styles={css`\\n          * {\\n            margin: 0;\\n            padding: 0;\\n            box-sizing: border-box;\\n          }\\n          body {\\n            scroll-behavior: smooth;\\n            overflow-y: scroll;\\n            -webkit-overflow-scrolling: touch;\\n            width: 100%;\\n            overflow-x: hidden;\\n          }\\n        `}\\n      />\\n      <div\\n        sx={{\\n          display: \\\"grid\\\",\\n          gridTemplateRows: \\\"auto\\\",\\n          gridTemplateColumns: [\\n            \\\"repeat(4, 1fr)\\\",\\n            \\\"repeat(6, 1fr)\\\",\\n            \\\"repeat(8, 1fr)\\\"\\n          ],\\n          gridTemplateAreas: [\\n            `\\n            'nav      nav     nav     nav'\\n            'main     main    main    main'\\n            'footer   footer  footer  footer'\\n          `,\\n            `\\n            'nav      nav     nav     nav     nav     nav'\\n            'main     main    main    main    main    main'\\n            'footer   footer  footer  footer  footer  footer'\\n          `,\\n            `\\n            '.    nav      nav     nav     nav     nav     nav    .'\\n            '.    main     main    main    main    main    main   .'\\n            '.    footer   footer  footer  footer  footer  footer .'\\n          `\\n          ],\\n          padding: \\\"0 1em\\\"\\n        }}\\n      >\\n        <Header>\\n          <Nav />\\n        </Header>\\n        {children}\\n        <Footer />\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default Layout;\\n\")), mdx(\"h2\", {\n    \"id\": \"extraction\"\n  }, \"Extraction\"), mdx(\"p\", null, \"This was a great improvement and when looking at it with the understanding that the array notation works like so \", \"['mobile', 'tablet', 'desktop']\", \" it becomes really easy to read and understand what is going on. Having all those long strings in there was kinda messy though so i moved them out into another file and replaced them:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<div\\n  sx={{\\n    display: \\\"grid\\\",\\n    gridTemplateRows: \\\"auto\\\",\\n    gridTemplateColumns: [\\\"repeat(4, 1fr)\\\", \\\"repeat(6, 1fr)\\\", \\\"repeat(8, 1fr)\\\"],\\n    gridTemplateAreas: [\\n      PhoneTemplateAreas,\\n      TabletTemplateAreas,\\n      DesktopTemplateAreas\\n    ],\\n    padding: \\\"0 1em\\\"\\n  }}\\n>\\n  <Header>\\n    <Nav />\\n  </Header>\\n  {children}\\n  <Footer />\\n</div>\\n\")), mdx(\"p\", null, \"Much better! \\uD83D\\uDE0E\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"CSS grid with theme-ui\",\n  \"date\": \"2020-02-25T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"Theme-ui\",\n  \"author\": \"Richard Haines\",\n  \"keywords\": [\"css grid\", \"theme-ui\", \"css-in-js\", \"emotion\", \"media queries\", \"layouts\"],\n  \"pin\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`When i started using theme-ui i was already an avid emotion user. I would splatter my files with styled components without really thinking about if they could (or should) be shared. It was a well drilled operation that i felt was giving me the results i wanted.`}</p>\n    <p>{`For example, i would generally use css grid for my sites base layout, this would be wrapped around the whole app using gatsby-plugin-layout. `}</p>\n    <h2 {...{\n      \"id\": \"with-media-queries\"\n    }}>{`With media queries`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Container = styled.div\\`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-areas:\n    \"nav\"\n    \"main\"\n    \"footer\";\n  height: 100%;\n  width: fit-content;\n\n  /* 48em = 768px */\n  @media (min-width: 48em) {\n    display: grid;\n    grid-template-columns: repeat(6, 1fr);\n    grid-template-rows: 0.5fr 4fr 0.5fr;\n    grid-template-areas:\n      \"nav nav nav nav nav nav\"\n      \"main main main main main main\"\n      \"footer footer footer footer footer footer\";\n    height: 100vh;\n    width: auto;\n  }\n\\`;\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css\\`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        \\`}\n      />\n      <Container>\n        <Header>\n          <Nav />\n        </Header>\n        {children}\n        <Footer />\n      </Container>\n    </>\n  );\n};\n\nexport default Layout;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-the-sx-prop\"\n    }}>{`Using the sx prop`}</h2>\n    <p>{`This worked perfectly fine, but i had learned through discussions with other devs, and through seeing their work that mixing both emotion and theme-ui not only wasn't really necessary but also a bit clunky to say the least. Thats without going into how theme-ui uses emotion under the hood (what was i thinking?)`}</p>\n    <p>{`When i decided to do a complete redesign of my website i wanted to try and use theme-ui only to style my site, and more specifically the sx prop. The problem i faced was not how to add the grid system via the sx prop, but how to make it responsive, that is, how to do what i was doing with media queries but via the sx prop.`}</p>\n    <p>{`The solution was surprisingly simple. With css variables on the sx prop you can use an array format to give different values depending on the browser width. With this knowledge in hand i converted the above code to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Layout = ({ children }) => {\n  return (\n    <>\n      <Global\n        styles={css\\`\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          body {\n            scroll-behavior: smooth;\n            overflow-y: scroll;\n            -webkit-overflow-scrolling: touch;\n            width: 100%;\n            overflow-x: hidden;\n          }\n        \\`}\n      />\n      <div\n        sx={{\n          display: \"grid\",\n          gridTemplateRows: \"auto\",\n          gridTemplateColumns: [\n            \"repeat(4, 1fr)\",\n            \"repeat(6, 1fr)\",\n            \"repeat(8, 1fr)\"\n          ],\n          gridTemplateAreas: [\n            \\`\n            'nav      nav     nav     nav'\n            'main     main    main    main'\n            'footer   footer  footer  footer'\n          \\`,\n            \\`\n            'nav      nav     nav     nav     nav     nav'\n            'main     main    main    main    main    main'\n            'footer   footer  footer  footer  footer  footer'\n          \\`,\n            \\`\n            '.    nav      nav     nav     nav     nav     nav    .'\n            '.    main     main    main    main    main    main   .'\n            '.    footer   footer  footer  footer  footer  footer .'\n          \\`\n          ],\n          padding: \"0 1em\"\n        }}\n      >\n        <Header>\n          <Nav />\n        </Header>\n        {children}\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"extraction\"\n    }}>{`Extraction`}</h2>\n    <p>{`This was a great improvement and when looking at it with the understanding that the array notation works like so `}{`['mobile', 'tablet', 'desktop']`}{` it becomes really easy to read and understand what is going on. Having all those long strings in there was kinda messy though so i moved them out into another file and replaced them:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<div\n  sx={{\n    display: \"grid\",\n    gridTemplateRows: \"auto\",\n    gridTemplateColumns: [\"repeat(4, 1fr)\", \"repeat(6, 1fr)\", \"repeat(8, 1fr)\"],\n    gridTemplateAreas: [\n      PhoneTemplateAreas,\n      TabletTemplateAreas,\n      DesktopTemplateAreas\n    ],\n    padding: \"0 1em\"\n  }}\n>\n  <Header>\n    <Nav />\n  </Header>\n  {children}\n  <Footer />\n</div>\n`}</code></pre>\n    <p>{`Much better! ðŸ˜Ž`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}